////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// УстановитьЗначениеАтрибута(РегПартии, ИДОбъекта, Значение)
//
// Параметры:
//  РегПартии   - регистр, регистр у которго устанвливает значение атрибута.
//  ИмяАтрибута - строка – идентификатор атрибута
//  Значение    - неопр. – значение атрибута
//
// Описание:
//  Устанавливает значение атрибута регистра.
//
Процедура УстановитьЗначениеАтрибута(РегПартии, ИмяАтрибута, Значение)
//	
//	Если (Метаданные.Регистр(РегПартии.Вид()).Измерение(ИмяАтрибута).Выбран() = 1) ИЛИ 
//	     (Метаданные.Регистр(РегПартии.Вид()).Ресурс   (ИмяАтрибута).Выбран() = 1) ИЛИ 
//	     (Метаданные.Регистр(РегПартии.Вид()).Реквизит (ИмяАтрибута).Выбран() = 1) Тогда
//		РегПартии.УстановитьАтрибут(ИмяАтрибута, Значение);
//	КонецЕсли;
//	
КонецПроцедуры // УстановитьЗначениеАтрибута()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	Если      ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоКассам Тогда
//		РегистрУчета = Регистр.Касса;
//	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоБанкСчетам Тогда
//		РегистрУчета = Регистр.Банк;
//	Иначе //Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоПодотчЛицам Тогда
//		РегистрУчета = Регистр.ПодотчетныеЛица;
//	КонецЕсли;
//	
//	УстановитьЗначениеАтрибута(РегистрУчета, "Фирма", 	         Фирма);
//	
//    ВыбратьСтроки();
//	Пока ПолучитьСтроку() = 1 Цикл
//
//		Если ФлагСвертки = 0 Тогда
//		    Тест = "Объект,Валюта";
//		Иначе
//		    Тест = "Объект";
//		КонецЕсли;
//		
//	   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,Тест)=0 Тогда
//			Возврат;
//		КонецЕсли;
//		
//		Если (ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоБанкСчетам) 
//		   и (ФлагСвертки = 0) Тогда
//			Если Валюта <> ?(ПустоеЗначение(Объект.ВалютаСчета)=1, глРубли, Объект.ВалютаСчета) Тогда
//				глНеПроводить(Контекст,"Валюта документа не совпадает с валютой банковского счета!");
//				Возврат;
//			КонецЕсли;
//		КонецЕсли;
//		
//		УстановитьЗначениеАтрибута(РегистрУчета, "Касса"         , Объект);
//		УстановитьЗначениеАтрибута(РегистрУчета, "БанковскийСчет", Объект);
//		УстановитьЗначениеАтрибута(РегистрУчета, "ФизЛицо"       , Объект);
//		УстановитьЗначениеАтрибута(РегистрУчета, "Валюта"        , Валюта);
//		УстановитьЗначениеАтрибута(РегистрУчета, "КредДокумент"    , ?(КредДокумент.Выбран()=1,КредДокумент,ТекущийДокумент()));
//		
//		ЗнакДвижения = ?(СуммаВал < 0, -1, 1);
//		РегистрУчета.СуммаВал = ЗнакДвижения * СуммаВал;
//		РегистрУчета.СуммаУпр = ЗнакДвижения * СуммаУпр;
//		РегистрУчета.СуммаРуб = ЗнакДвижения * СуммаРуб;
//		
//		РегистрУчета.КодОперации = ?(Валюта <> глРубли, Перечисление.КодыОпераций.ВводОстатковВал, Перечисление.КодыОпераций.ВводОстатков);
//		
//		Если ЗнакДвижения < 0 Тогда
//			РегистрУчета.ДвижениеРасходВыполнить();
//		Иначе
//			РегистрУчета.ДвижениеПриходВыполнить();
//		КонецЕсли;
//		
//	КонецЦикла;
//	 
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)   
//	
//	// Проверка заполненности обязательных реквизитов.
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,"Фирма")=0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	СуммаВал_Итог = ТабличнаяЧасть1.Итог("СуммаВал");
	СуммаРуб_Итог = ТабличнаяЧасть1.Итог("СуммаРуб");
	СуммаУпр_Итог = ТабличнаяЧасть1.Итог("СуммаУпр");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
