////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ДокПодч;

Перем НачалоПериода;
Перем КонецПериода;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ПроверкаСФДокумента(ДокДляПроверки, НайденнаяСФ)
//
// Параметры:
//  ДокДляПроверки 	- документ              
//	НайденнаяСФ 	- переменная, в которую возвращается найденная СФ
//
// Возвращаемое значение:
//  1 - СФ есть и включено автоматическое формирование, можно вносить запись, 0 - иначе
//
// Описание:
//  У документа производится поиск счета фактуры. Если она есть и в ней включено 
// 	автоматическое формирование записей книги продаж, то возвращаем 1.
//
Функция ПроверкаСФДокумента(ДокДляПроверки,НайденнаяСФ)
//	                    
//	Если (ДокДляПроверки.Вид() = "ОтчетККМ") Тогда
//		НайденнаяСФ = ДокДляПроверки;
//		Возврат 1;
//	КонецЕсли;
//	
//	Если ДокДляПроверки.Вид() = "РеализацияРозница" Тогда
//		Если ДокДляПроверки.ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда
//		    НайденнаяСФ = ДокДляПроверки; 
//			Возврат 1;
//		КонецЕсли;	    
//	КонецЕсли;          
//	
//	Если ДокДляПроверки.Вид() = "ПКО" Тогда
//		Если (ДокДляПроверки.КодОперации = глКО.РозничнаяВыручка) ИЛИ (ДокДляПроверки.КодОперации = глКО.РозничнаяВыручкаЗаПринятые)Тогда
//		    НайденнаяСФ = ДокДляПроверки; 
//			Возврат 1;
//		КонецЕсли;	    
//	КонецЕсли;
//	
//	ДокПодч.ВыбратьПодчиненныеДокументы(,,ДокДляПроверки);
//	Пока ДокПодч.ПолучитьДокумент()=1 Цикл
//		Если ДокПодч.Вид()="СчетФактураВыданный" Тогда
//			Если (ДокПодч.Проведен()=1) или (ДокПодч.ФлагСвертки=1) Тогда
//				Если ДокПодч.АвтоКнигаПродаж = 1 Тогда
//					НайденнаяСФ = ДокПодч.ТекущийДокумент();
//					Возврат 1;
//				Иначе     
//					Возврат 0;
//				КонецЕсли;
//			КонецЕсли;
//			
//		ИначеЕсли ДокПодч.Вид()="СчетФактураПолученный" Тогда
//			Если (ДокПодч.Проведен()=1) или (ДокПодч.ФлагСвертки=1) Тогда
//				Если ДокПодч.АвтоКнигаПокупок = 1 Тогда
//					НайденнаяСФ = ДокПодч.ТекущийДокумент();
//					Возврат 1;
//				Иначе     
//					Возврат 0;
//				КонецЕсли;
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЦикла;   
//	
//	
//	глСообщениеПроведения("На документ "+ДокДляПроверки+" не зарегистрирован счет - фактура!",ДокДляПроверки,, ТекущийДокумент(),1);
//	Возврат 0;
Возврат "";//	
КонецФункции // ПроверкаСФДокумента()     

Процедура ДопЛистыПоОтрицательнымРазницам(ВремКнигаПродаж)
	
	Перем Запрос, ТекстЗапроса;    
//	ДатаНач = НачалоПериода;
//	ДатаКон = Мин(КонецПериода, ПолучитьДатуТА());
//	
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");  
//	
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(ДопЛисты)
//	|Период с ДатаНач по ДатаКон;
//	|КредДокумент               = Регистр.КнигаПродаж.КредДокумент;
//	|ФирмаРег                   = Регистр.КнигаПродаж.КредДокумент.Фирма;
//	|ДокументОплаты             = Регистр.КнигаПродаж.ДокументОплаты;
//	|ТекДокумент                = Регистр.КнигаПродаж.ТекущийДокумент;
//	|СтавкаНДС                  = Регистр.КнигаПродаж.СтавкаНДС;
//	|ВидДолга                   = Регистр.КнигаПродаж.ВидДолга;
//	|СуммаРуб                   = Регистр.КнигаПродаж.СуммаРуб;
//	|СуммаНДС                   = Регистр.КнигаПродаж.СуммаНДС;
//	|СуммаНП                    = Регистр.КнигаПродаж.СуммаНП;
//	|ЗаписьДополнительногоЛиста = Регистр.КнигаПродаж.ЗаписьДополнительногоЛиста;
//	|КорректируемыйПериод       = Регистр.КнигаПродаж.КорректируемыйПериод;
//	|Условие(ЗаписьДополнительногоЛиста = 2);    
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие	(ТекДокумент.Вид() <> ""ЗаписьКнигиПродаж"");
//	|Группировка КредДокумент;
//	|Группировка ДокументОплаты;
//	|Группировка СтавкаНДС;
//	|Группировка ВидДолга;
//	|Функция СуммаРубПриход     = Приход(СуммаРуб);
//	|Функция СуммаНДСПриход     = Приход(СуммаНДС);
//	|Функция СуммаНППриход      = Приход(СуммаНП);
//	|//Группировка КорректируемыйПериод;
//	|"//}}ЗАПРОС
//	;
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	Пока Запрос.Группировка(1) = 1 Цикл
//                                            
//		КредДокумент      = Запрос.КредДокумент;
//		ДатаКредДокумента = Запрос.КредДокумент.ДатаДок;      
//	
//	    НайденнаяСФ = "";            
//		Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		// Определим суммы, которые надо сторнировать по документу
//		ТаблДвижений = СоздатьОбъект("ТаблицаЗначений");
//		ТаблДвижений.НоваяКолонка ("ВидДолга");
//		ТаблДвижений.НоваяКолонка ("СтавкаНДС");
//		ТаблДвижений.НоваяКолонка ("СтавкаНП");
//		ТаблДвижений.НоваяКолонка ("СуммаРуб");
//		ТаблДвижений.НоваяКолонка ("СуммаНДС");
//		ТаблДвижений.НоваяКолонка ("СуммаНП");
//		ТаблДвижений.НоваяКолонка ("СуммаРуб1");
//		ТаблДвижений.НоваяКолонка ("СуммаНДС1");
//		ТаблДвижений.НоваяКолонка ("СуммаНП1");
//		ТаблДвижений.НоваяКолонка ("СуммаРуб2");
//		ТаблДвижений.НоваяКолонка ("СуммаНДС2");
//		ТаблДвижений.НоваяКолонка ("СуммаНП2");
//		ТаблДвижений.НоваяКолонка ("СуммаРуб3");
//		ТаблДвижений.НоваяКолонка ("СуммаНДС3");
//		ТаблДвижений.НоваяКолонка ("СуммаНП3");
//		
//		ВремКнига = СоздатьОбъект("Регистр.КнигаПродаж");
//		ВремКнига.ВыбратьДвиженияДокумента(КредДокумент);
//		Пока ВремКнига.ПолучитьДвижение() = 1 Цикл
//			Если (ВремКнига.Приход   = 1)
//			и    (ВремКнига.КодОперации <> глКО.СуммоваяРазница)
//			Тогда
//				ТаблДвижений.НоваяСтрока();
//				ТаблДвижений.ВидДолга  = ВремКнига.ВидДолга;
//				ТаблДвижений.СтавкаНДС = ВремКнига.СтавкаНДС;
//				ТаблДвижений.СтавкаНП  = ВремКнига.СтавкаНП;
//				ТаблДвижений.СуммаРуб  = ВремКнига.СуммаРуб;
//				ТаблДвижений.СуммаНДС  = ВремКнига.СуммаНДС;
//				ТаблДвижений.СуммаНП   = ВремКнига.СуммаНП;
//				ТаблДвижений.СуммаРуб1 = -ВремКнига.СуммаРуб;
//				ТаблДвижений.СуммаНДС1 = -ВремКнига.СуммаНДС;
//				ТаблДвижений.СуммаНП1  = -ВремКнига.СуммаНП;
//				ТаблДвижений.СуммаРуб2 = ВремКнига.СуммаРуб;
//				ТаблДвижений.СуммаНДС2 = ВремКнига.СуммаНДС;
//				ТаблДвижений.СуммаНП2  = ВремКнига.СуммаНП;
//				ТаблДвижений.СуммаРуб3 = ВремКнига.СуммаРуб;
//				ТаблДвижений.СуммаНДС3 = ВремКнига.СуммаНДС;
//				ТаблДвижений.СуммаНП3  = ВремКнига.СуммаНП;
//			КонецЕсли;
//		КонецЦикла;    
//		
//		Если ДатаКредДокумента < ДатаНач Тогда
//			
//			// Далее суммы документа надо скорректировать на дополнительные листы
//			// книги продаж, которые были в прошлом периоде
//			ЗапросПрошлые = СоздатьОбъект("Запрос");
//			ТекстЗапроса = "// Запрос ищет доп. листы предыдущих периодов
//			|Период с ДатаКредДокумента по ДатаНач; 
//			|КредДокумент               = Регистр.КнигаПродаж.КредДокумент;
//			|СтавкаНДС                  = Регистр.КнигаПродаж.СтавкаНДС;
//			|ВидДолга                   = Регистр.КнигаПродаж.ВидДолга;
//			|СуммаРуб                   = Регистр.КнигаПродаж.СуммаРуб;
//			|СуммаНДС                   = Регистр.КнигаПродаж.СуммаНДС;
//			|СуммаНП                    = Регистр.КнигаПродаж.СуммаНП;
//			|ЗаписьДополнительногоЛиста = Регистр.КнигаПродаж.ЗаписьДополнительногоЛиста;
//			|КорректируемыйПериод       = Регистр.КнигаПродаж.КорректируемыйПериод;
//			|Функция СуммаРубРасход     = Расход(СуммаРуб);
//			|Функция СуммаНДСРасход     = Расход(СуммаНДС);
//			|Функция СуммаНПРасход      = Расход(СуммаНП);
//			|Условие(КредДокумент       = Запрос.КредДокумент);   
//			|Условие(ЗаписьДополнительногоЛиста <> 0); 
//			|Группировка СтавкаНДС;
//			|Группировка ВидДолга;";
//			
//			ЗапросПрошлые.Выполнить(ТекстЗапроса);  
//			
//			Пока ЗапросПрошлые.Группировка("СтавкаНДС")=1 Цикл
//				Пока ЗапросПрошлые.Группировка("ВидДолга")=1 Цикл
//					ТаблДвижений.ВыбратьСтроки();
//					Пока ТаблДвижений.ПолучитьСтроку()=1 Цикл
//						Если (ТаблДвижений.ВидДолга=ЗапросПрошлые.ВидДолга)
//						   и (ТаблДвижений.СтавкаНДС=ЗапросПрошлые.СтавкаНДС) Тогда
//						   	ТаблДвижений.СуммаРуб  = ТаблДвижений.СуммаРуб  + ЗапросПрошлые.СуммаРубРасход;
//						   	ТаблДвижений.СуммаНДС  = ТаблДвижений.СуммаНДС  + ЗапросПрошлые.СуммаНДСРасход;
//						   	ТаблДвижений.СуммаНП   = ТаблДвижений.СуммаНП   + ЗапросПрошлые.СуммаНПРасход;
//						   	ТаблДвижений.СуммаРуб1 = ТаблДвижений.СуммаРуб1 - ЗапросПрошлые.СуммаРубРасход;
//						   	ТаблДвижений.СуммаНДС1 = ТаблДвижений.СуммаНДС1 - ЗапросПрошлые.СуммаНДСРасход;
//						   	ТаблДвижений.СуммаНП1  = ТаблДвижений.СуммаНП1  - ЗапросПрошлые.СуммаНПРасход;
//						   	ТаблДвижений.СуммаРуб2 = ТаблДвижений.СуммаРуб2 + ЗапросПрошлые.СуммаРубРасход;
//						   	ТаблДвижений.СуммаНДС2 = ТаблДвижений.СуммаНДС2 + ЗапросПрошлые.СуммаНДСРасход;
//						   	ТаблДвижений.СуммаНП2  = ТаблДвижений.СуммаНП2  + ЗапросПрошлые.СуммаНПРасход;
//						   	ТаблДвижений.СуммаРуб3 = ТаблДвижений.СуммаРуб3 + ЗапросПрошлые.СуммаРубРасход;
//						   	ТаблДвижений.СуммаНДС3 = ТаблДвижений.СуммаНДС3 + ЗапросПрошлые.СуммаНДСРасход;
//						   	ТаблДвижений.СуммаНП3  = ТаблДвижений.СуммаНП3  + ЗапросПрошлые.СуммаНПРасход;
//						КонецЕсли;
//					КонецЦикла;
//				КонецЦикла;
//			КонецЦикла;	         
//		КонецЕсли;
//		
//		Пока Запрос.Группировка(2) = 1 Цикл
//			Пока Запрос.Группировка(3) = 1 Цикл  
//				Пока Запрос.Группировка(4) = 1 Цикл  
//				                                   
//					СтрокаНайдена = 0;
//					ТаблДвижений.ВыбратьСтроки(); 
//					
//				 	Пока ТаблДвижений.ПолучитьСтроку()=1 Цикл
//						Если (ТаблДвижений.ВидДолга=Запрос.ВидДолга)
//						   и (ТаблДвижений.СтавкаНДС=Запрос.СтавкаНДС) Тогда 
//						   	СтрокаНайдена = 1;
//						   	Прервать;
//						КонецЕсли;            
//					КонецЦикла;
//					
//					Если СтрокаНайдена = 0 Тогда
//						Продолжить;
//					КонецЕсли;
//				
//					ОстСуммаРуб = 0;
//					ОстСуммаНДС = 0; 
//					ОстСуммаНП  = 0; 
//					
//					// Проверим остатки по книге продаж суммы, которые еще не приняты к вычету сторнировать нельзя
//					ВремРег = СоздатьОбъект("Регистры"); 
//					ВремКнигаПродаж = ВремРег.КнигаПродаж;
//					ВремКнигаПродаж.УстановитьЗначениеФильтра("КредДокумент", КредДокумент, 1);
//					ВремКнигаПродаж.УстановитьЗначениеФильтра("СтавкаНДС",    Запрос.СтавкаНДС, 1);
//					ВремКнигаПродаж.УстановитьЗначениеФильтра("ВидДолга",     Запрос.ВидДолга, 1);
//					ВремКнигаПродаж.ВременныйРасчет();      
//					ВремРег.РассчитатьРегистрыНа(НачалоПериода);         
//					                                        
//					ВремКнигаПродаж.ВыбратьИтоги();
//					
//					Если ВремКнигаПродаж.ПолучитьИтог() = 1 Тогда
//						ОстСуммаРуб = ВремКнигаПродаж.СуммаРуб;
//						ОстСуммаНДС = ВремКнигаПродаж.СуммаНДС; 
//						ОстСуммаНП  = ВремКнигаПродаж.СуммаНП;
//					КонецЕсли;  
//					
//					ТаблДвижений.СуммаРуб1     = - (ТаблДвижений.СуммаРуб - ОстСуммаРуб);
//					ТаблДвижений.СуммаНДС1     = - (ТаблДвижений.СуммаНДС - ОстСуммаНДС);
//					ТаблДвижений.СуммаНП1      = - (ТаблДвижений.СуммаНП  - ОстСуммаНП);
//				
//					ТаблДвижений.СуммаРуб2 = ТаблДвижений.СуммаРуб - ОстСуммаРуб;
//					ТаблДвижений.СуммаНДС2 = ТаблДвижений.СуммаНДС - ОстСуммаНДС;
//					ТаблДвижений.СуммаНП2  = ТаблДвижений.СуммаНП  - ОстСуммаНП;
//	
//					ТаблДвижений.СуммаРуб3 = ТаблДвижений.СуммаРуб - ОстСуммаРуб + Запрос.СуммаРубПриход;
//					ТаблДвижений.СуммаНДС3 = ТаблДвижений.СуммаНДС - ОстСуммаНДС + Запрос.СуммаНДСПриход;
//					ТаблДвижений.СуммаНП3  = ТаблДвижений.СуммаНП  - ОстСуммаНП  + Запрос.СуммаНППриход;
//					
//				КонецЦикла;
//			КонецЦикла;    
//			
//			ТаблДвижений.ВыбратьСтроки();
//			Пока ТаблДвижений.ПолучитьСтроку()=1 Цикл 
//				
//				Регистр.КнигаПродаж.КредДокумент = КредДокумент;
//				Регистр.КнигаПродаж.ВидДолга     = ТаблДвижений.ВидДолга;
//				Регистр.КнигаПродаж.СтавкаНДС    = ТаблДвижений.СтавкаНДС;
//				
//				Регистр.КнигаПродаж.СуммаРуб     = ТаблДвижений.СуммаРуб1;
//				Регистр.КнигаПродаж.СуммаНДС     = ТаблДвижений.СуммаНДС1;
//				Регистр.КнигаПродаж.СуммаНП      = ТаблДвижений.СуммаНП1;
//				
//			
//				Регистр.КнигаПродаж.ДокументОплаты = Запрос.ДокументОплаты;
//				Регистр.КнигаПродаж.КодОперации  = глКО.СуммоваяРазница;
//				Регистр.КнигаПродаж.ЗаписьДополнительногоЛиста = 1;
//				Регистр.КнигаПродаж.КорректируемыйПериод       = ДатаКредДокумента;
//				
//				Если (Регистр.КнигаПродаж.СуммаРуб <> 0) или (Регистр.КнигаПродаж.СуммаНДС <> 0) Тогда   
//					
//					Регистр.КнигаПродаж.ДвижениеПриходВыполнить();
//					Регистр.КнигаПродаж.ДвижениеРасходВыполнить();    
//					
//					Регистр.КнигаПродаж.СуммаРуб = ТаблДвижений.СуммаРуб2;
//					Регистр.КнигаПродаж.СуммаНДС = ТаблДвижений.СуммаНДС2;
//					Регистр.КнигаПродаж.СуммаНП  = ТаблДвижений.СуммаНП2;
//					Регистр.КнигаПродаж.ЗаписьДополнительногоЛиста = 2;
//					
//					Регистр.КнигаПродаж.ДвижениеПриходВыполнить();
//	
//					Регистр.КнигаПродаж.СуммаРуб = ТаблДвижений.СуммаРуб3;
//					Регистр.КнигаПродаж.СуммаНДС = ТаблДвижений.СуммаНДС3;
//					Регистр.КнигаПродаж.СуммаНП  = ТаблДвижений.СуммаНП3;
//					
//					Регистр.КнигаПродаж.ДвижениеРасходВыполнить();    
//					
//				КонецЕсли;
//			 
//			 КонецЦикла;
//		КонецЦикла;
//	КонецЦикла;
//
КонецПроцедуры

//******************************************************************************
// ПроведениеПоСторноАвансов2009(ВремКнигаПокупок)
//
// Параметры:
//  ВремКнигаПродаж
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПроведениеПоСторноАвансов2009(ВремКнигаПокупок)
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;
	Перем СписокНужныхКодов, СписокНужныхВидовДолга;
//	
//	// отбираем движения регистров, выбирая те из них, которые должны 
//	// быть включены в книгу продаж с 01.01.2009.
//	ДатаНачала = Макс(НачКвартала(ДатаДок), '01.01.2009');
//	ПериодПо = Мин(КонецПериода, ПолучитьДатуТА());
//
//	// движения по покупателям, включаемые в книгу продаж
//	СписокНужныхКодов = СоздатьОбъект("СписокЗначений");
//	СписокНужныхКодов.ДобавитьЗначение(глКО.СторнированАванс);  
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ВозвратОплатыОтПоставщика);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ВозвратОплатыОтПоставщикаВал);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.Прочее);
//	
//	СписокНужныхВидовДолга = СоздатьОбъект("СписокЗначений");
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.Аванс);
//	
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|Период с ДатаНачала по ПериодПо;
//	|ФирмаРег 		= Регистр.Поставщики.Фирма;
//	|ВидДолга 		= Регистр.Поставщики.ВидДолга;
//	|КредДокумент 	= Регистр.Поставщики.КредДокумент;
//	|СуммаРуб 		= Регистр.Поставщики.СуммаРуб;
//	|КодОперации 	= Регистр.Поставщики.КодОперации;
//	|Функция СуммаРубРасход = Расход(СуммаРуб);
//	|Группировка 	КредДокумент;
//	|Группировка 	Документ;
//	|Группировка 	ВидДолга;
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие	(КодОперации 	в СписокНужныхКодов);
//	|Условие	(ВидДолга 		в СписокНужныхВидовДолга);
//	|"//}}ЗАПРОС
//	;
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;                                   
//	
//    НайденнаяСФ = "";            
//	ТИКнигаПокупок = СоздатьОбъект("ТаблицаЗначений");
//		
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//	    Пока Запрос.Группировка("Документ") = 1 Цикл
//        	Пока Запрос.Группировка("ВидДолга") = 1 Цикл
//				ВремКнигаПокупок.УстановитьЗначениеФильтра("КредДокумент",Запрос.КредДокумент,1);
//				ВремКнигаПокупок.УстановитьЗначениеФильтра("ВидДолга",    Запрос.ВидДолга,    1);
//				
//				ВремКнигаПокупок.ВыгрузитьИтоги(ТИКнигаПокупок,1,1);      
//				ОстПогСуммаРуб = - Запрос.СуммаРубРасход; // сумма сторнированного аванса
//				                              
//				Если ТИКнигаПокупок.КоличествоСтрок()<>0 Тогда
//					Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//						Продолжить;
//					КонецЕсли;
//				КонецЕсли;    
//				
//				ТИКнигаПокупок.ВыбратьСтроки();
//				Пока (ТИКнигаПокупок.ПолучитьСтроку() = 1)
//				и    (ОстПогСуммаРуб <> 0)
//				Цикл
//					// в этом случае итоги в регистре "КнигаПокупок" отрицательные
//					СписСуммаРуб = - Мин(0,Макс(ТИКнигаПокупок.СуммаРуб,ОстПогСуммаРуб));
//					Если СписСуммаРуб <> 0 Тогда
//						КоэффСпис    = ?(ТИКнигаПокупок.СуммаРуб = 0,0,СписСуммаРуб/(ТИКнигаПокупок.СуммаРуб));
//						СписСуммаНДС = Окр(ТИКнигаПокупок.СуммаНДС * КоэффСпис,2,1);
//						СписСуммаНП  = Окр(ТИКнигаПокупок.СуммаНП  * КоэффСпис,2,1);
//						
//						
//						Регистр.КнигаПродаж.КредДокумент    = ТИКнигаПокупок.КредДокумент;
//						Регистр.КнигаПродаж.ВидДолга		= ТИКнигаПокупок.ВидДолга;
//						Регистр.КнигаПродаж.СтавкаНДС		= ТИКнигаПокупок.СтавкаНДС;
//						
//						Регистр.КнигаПродаж.СуммаРуб		= СписСуммаРуб;
//						Регистр.КнигаПродаж.СуммаНДС		= СписСуммаНДС;
//						Регистр.КнигаПродаж.СуммаНП	        = СписСуммаНП;
//						
//					                                                                 
//						// Надо прописать ставку НП. Важно для розничной выручки
//						Если ТИКнигаПокупок.КредДокумент.Вид() = "ПКО" Тогда
//							СтавкаНП = ?(ТИКнигаПокупок.КредДокумент.ОблагаетсяНП = 0,
//							             ПолучитьПустоеЗначение("Справочник.СтавкиНП"),
//										 ТИКнигаПокупок.КредДокумент.СтавкаНП
//										);
//						    Регистр.КнигаПродаж.СтавкаНП 	= СтавкаНП;
//						КонецЕсли;
//						Регистр.КнигаПродаж.КодОперации     = глКО.Прочее;
//						Регистр.КнигаПродаж.ДокументОплаты	= Запрос.Документ;
//						                                             
//					    Регистр.КнигаПродаж.ЗаписьДополнительногоЛиста = 0;
//						Регистр.КнигаПродаж.КорректируемыйПериод       = Дата(0);  
//						
//						Регистр.КнигаПродаж.ДвижениеПриходВыполнить();
//						Регистр.КнигаПродаж.ДвижениеРасходВыполнить();
//
//						
//						// Уберем итоги из книги покупок
//						
//						Регистр.КнигаПокупок.КредДокумент   = ТИКнигаПокупок.КредДокумент;
//						Регистр.КнигаПокупок.ВидДолга		= ТИКнигаПокупок.ВидДолга;
//						Регистр.КнигаПокупок.СтавкаНДС		= ТИКнигаПокупок.СтавкаНДС;
//						
//						Регистр.КнигаПокупок.СуммаРуб		=  СписСуммаРуб;
//						Регистр.КнигаПокупок.СуммаНДС		=  СписСуммаНДС;
//						Регистр.КнигаПокупок.СуммаНП	    =  СписСуммаНП;
//						
//					                                                                 
//						Регистр.КнигаПокупок.КодОперации     = глКО.Прочее;
//						Регистр.КнигаПокупок.ДокументОплаты	= Запрос.Документ;
//						                                             
//						Регистр.КнигаПокупок.ДвижениеПриходВыполнить();
//						
//						ОстПогСуммаРуб = ОстПогСуммаРуб - СписСуммаРуб;
//					КонецЕсли; // есть что списывать
//				КонецЦикла; // по строкам таблицы итогов КП
//			КонецЦикла; // по виду долга
//		КонецЦикла; // по тек документу
//	КонецЦикла;// по кред. документу
//	
КонецПроцедуры // ПроведениеПоСторноАвансов2009()

//******************************************************************************
// ПроведениеПоСторноАвансов(ВремКнигаПродаж)
//
// Параметры:
//  ВремКнигаПродаж
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПроведениеПоСторноАвансов(ВремКнигаПродаж)
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;
	Перем СписокНужныхКодов, СписокНужныхВидовДолга;
//	
//	// отбираем движения регистров, выбирая те из них, которые должны 
//	// быть включены в книгу продаж.
//	ДатаНачала = НачалоПериода;   
//	
//	// Сторнирование авансов в день вступления в силу Постановления Правительства РФ № 575 
//	// через книгу покупок
//	Дата575 = глДатаИзмененияПорядкаВычетаНДССАвансов - 1; 
//	
//	// Если весь отчетный период лежит после даты вступления в силу 
//	// Постановления Правительства РФ № 575, то сторно авансов будет осуществляться
//	// через книгу покупок
//	Если ДатаНачала > Дата575 Тогда
//		Возврат;
//	КонецЕсли;
//
//	// определение периода построения запросов
//	Если ДатаДок > Дата575  Тогда
//		ПериодПо = "по Дата575";
//	Иначе
//		Если ИтогиАктуальны() = 1 Тогда                                  
//			ПериодПо = "";
//		Иначе                  
//			ТекДок = ТекущийДокумент();
//			ПериодПо = "по ТекДок";
//		КонецЕсли;         
//	КонецЕсли;
//    
//	// движения по покупателям, включаемые в книгу продаж
//	СписокНужныхКодов = СоздатьОбъект("СписокЗначений");
//	СписокНужныхКодов.ДобавитьЗначение(глКО.СторнированАванс);  
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ВозвратОплатыПокупателю);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ВозвратОплатыПокупателюВал);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.Прочее);
//	
//	СписокНужныхВидовДолга = СоздатьОбъект("СписокЗначений");
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.Аванс);
//	
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|Период с ДатаНачала "+ ПериодПо+";
//	|ФирмаРег 		= Регистр.Покупатели.Фирма;
//	|ВидДолга 		= Регистр.Покупатели.ВидДолга;
//	|КредДокумент 	= Регистр.Покупатели.КредДокумент;
//	|СуммаРуб 		= Регистр.Покупатели.СуммаРуб;
//	|КодОперации 	= Регистр.Покупатели.КодОперации;
//	|Функция СуммаРубПриход = Приход(СуммаРуб);
//	|Группировка 	КредДокумент;
//	|Группировка 	Документ;
//	|Группировка 	ВидДолга;
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие	(КодОперации 	в СписокНужныхКодов);
//	|Условие	(ВидДолга 		в СписокНужныхВидовДолга);
//	|"//}}ЗАПРОС
//	;
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;                                   
//	
//    НайденнаяСФ = "";            
//	ТИКнигаПродаж = СоздатьОбъект("ТаблицаЗначений");
//		
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//	    Пока Запрос.Группировка("Документ") = 1 Цикл
//        	Пока Запрос.Группировка("ВидДолга") = 1 Цикл
//				ВремКнигаПродаж.УстановитьЗначениеФильтра("КредДокумент",Запрос.КредДокумент,1);
//				ВремКнигаПродаж.УстановитьЗначениеФильтра("ВидДолга",    Запрос.ВидДолга,    1);
//				
//				ВремКнигаПродаж.ВыгрузитьИтоги(ТИКнигаПродаж,1,1);      
//				ОстПогСуммаРуб = - Запрос.СуммаРубПриход; // сумма сторнированного аванса
//				                              
//				Если ТИКнигаПродаж.КоличествоСтрок()<>0 Тогда
//					Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//						Продолжить;
//					КонецЕсли;
//				КонецЕсли;    
//				
//				ТИКнигаПродаж.ВыбратьСтроки();
//				Пока (ТИКнигаПродаж.ПолучитьСтроку() = 1)
//				и    (ОстПогСуммаРуб <> 0)
//				Цикл
//					// в этом случае итоги в регистре "КнигаПродаж" отрицательные
//					СписСуммаРуб = Мин(0,Макс(ТИКнигаПродаж.СуммаРуб,ОстПогСуммаРуб));
//					Если СписСуммаРуб <> 0 Тогда
//						КоэффСпис    = ?(ТИКнигаПродаж.СуммаРуб = 0,0,СписСуммаРуб/(ТИКнигаПродаж.СуммаРуб));
//						СписСуммаНДС = Окр(ТИКнигаПродаж.СуммаНДС * КоэффСпис,2,1);
//						СписСуммаНП  = Окр(ТИКнигаПродаж.СуммаНП  * КоэффСпис,2,1);
//						
//						Регистр.КнигаПродаж.КредДокумент    = ТИКнигаПродаж.КредДокумент;
//						Регистр.КнигаПродаж.ВидДолга		= ТИКнигаПродаж.ВидДолга;
//						Регистр.КнигаПродаж.СтавкаНДС		= ТИКнигаПродаж.СтавкаНДС;
//						
//						Регистр.КнигаПродаж.СуммаРуб		=  СписСуммаРуб;
//						Регистр.КнигаПродаж.СуммаНДС		=  СписСуммаНДС;
//						Регистр.КнигаПродаж.СуммаНП	        =  СписСуммаНП;
//						
//					                                                                 
//						// Надо прописать ставку НП. Важно для розничной выручки
//						Если ТИКнигаПродаж.КредДокумент.Вид() = "ПКО" Тогда
//							СтавкаНП = ?(ТИКнигаПродаж.КредДокумент.ОблагаетсяНП = 0,
//							             ПолучитьПустоеЗначение("Справочник.СтавкиНП"),
//										 ТИКнигаПродаж.КредДокумент.СтавкаНП
//										);
//						    Регистр.КнигаПродаж.СтавкаНП 	= СтавкаНП;
//						КонецЕсли;
//						Регистр.КнигаПродаж.КодОперации     = глКО.Прочее;
//						Регистр.КнигаПродаж.ДокументОплаты	= Запрос.Документ;
//						                                             
//						Регистр.КнигаПродаж.ДвижениеРасходВыполнить();
//						
//						ОстПогСуммаРуб = ОстПогСуммаРуб - СписСуммаРуб;
//					КонецЕсли; // есть что списывать
//				КонецЦикла; // по строкам таблицы итогов КП
//			КонецЦикла; // по виду долга
//		КонецЦикла; // по тек документу
//	КонецЦикла;// по кред. документу
//	
КонецПроцедуры // ПроведениеПоСторноАвансов()

//******************************************************************************
// ПроведениеПоОплате(ВремКнигаПродаж)
//
// Параметры:
//  ВремКнигаПродаж
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Здесь можно перечислить элементы диалога.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПроведениеПоОплате(ВремКнигаПродаж)
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;
	Перем СписокНужныхКодов, СписокНужныхВидовДолга;
//	
//	// отбираем движения регистров, выбирая те из них, которые должны 
//	// быть включены в книгу продаж.
//	ДатаНачала = НачалоПериода;
//	
//	// определение периода построения запросов
//	Если ИтогиАктуальны() = 1 Тогда
//		ПериодПо = "";
//	Иначе       
//		ТекДок = ТекущийДокумент();
//		ПериодПо = "по ТекДок";
//	КонецЕсли;         
//    
//	// движения по покупателям, включаемые в книгу продаж
//	СписокНужныхКодов = СоздатьОбъект("СписокЗначений");
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ОплатаОтПокупателя);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ОплатаОтПокупателяВал);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ЗачтенАвансПокупателя);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ЗачтеноКомиссионноеВознаграждение); 
//	СписокНужныхКодов.ДобавитьЗначение(глКО.РозничнаяПродажа); // оплата совпадает с отгрузкой
//	СписокНужныхКодов.ДобавитьЗначение(глКО.Прочее);           // оплата прочими средствами
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ЗачтенВозвратПокупателя);                      
//	СписокНужныхКодов.ДобавитьЗначение(глКО.РозничнаяВыручка);                      
//	СписокНужныхКодов.ДобавитьЗначение(глКО.РозничнаяВыручкаЗаПринятые);                      
//	СписокНужныхКодов.ДобавитьЗначение(глКО.СуммоваяРазница);  
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ВводОстатков);
//	
//	СписокНужныхВидовДолга = СоздатьОбъект("СписокЗначений");
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаТовары);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаПродукцию);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаПолуфабрикаты);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаУслуги);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаРаботы);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаМатериалы);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаОС);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаНМА);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.Прочее);
//	
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|Период с ДатаНачала "+ ПериодПо+";
//	|ФирмаРег 		= Регистр.Покупатели.Фирма;
//	|ВидДолга 		= Регистр.Покупатели.ВидДолга;
//	|КредДокумент 	= Регистр.Покупатели.КредДокумент;
//	|ДокументОплаты = Регистр.Покупатели.ДокументОплаты;
//	|ТекДокумент 	= Регистр.Покупатели.ТекущийДокумент;
//	|СуммаРуб 		= Регистр.Покупатели.СуммаРуб;
//	|КодОперации 	= Регистр.Покупатели.КодОперации;
//	|СтавкаНП	 	= Регистр.Покупатели.СтавкаНП;
//	|Функция СуммаРубРасход = Расход(СуммаРуб);
//	|Группировка 	КредДокумент;
//	|Группировка 	ДокументОплаты;
//	|Группировка 	ВидДолга;
//	|Группировка 	СтавкаНП;
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие	(КодОперации 	в СписокНужныхКодов);
//	|Условие	(ВидДолга 		в СписокНужныхВидовДолга);
//	|Условие	(КредДокумент.ДатаДок < глНачало2006Года);
//	|"//}}ЗАПРОС
//	;
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;                                   
//	
//    НайденнаяСФ = "";            
//	ТИКнигаПродаж = СоздатьОбъект("ТаблицаЗначений");
//		
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//		
//		Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если Фирма.ЮрЛицо.МетодОпределенияВыручки.Получить(Запрос.КредДокумент.ДатаДок) = Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда
//			Продолжить;                                                                                                                  
//		КонецЕсли;
//			
//	    Пока Запрос.Группировка("ДокументОплаты") = 1 Цикл
//        	Пока Запрос.Группировка("ВидДолга") = 1 Цикл
//	        	Пока Запрос.Группировка("СтавкаНП") = 1 Цикл
//					ВремКнигаПродаж.УстановитьЗначениеФильтра("СтавкаНП"	,Запрос.СтавкаНП,1);
//					ВремКнигаПродаж.УстановитьЗначениеФильтра("КредДокумент",Запрос.КредДокумент,1);
//					ВремКнигаПродаж.УстановитьЗначениеФильтра("ВидДолга",    Запрос.ВидДолга,    1);
//					
//					ВремКнигаПродаж.ВыгрузитьИтоги(ТИКнигаПродаж,1,1);      
//					ОстПогСуммаРуб = Запрос.СуммаРубРасход; // сумма оплаты
//				
//					ТИКнигаПродаж.ВыбратьСтроки();
//					Пока (ТИКнигаПродаж.ПолучитьСтроку() = 1)
//					и    (ОстПогСуммаРуб <> 0)
//					Цикл
//						
//						СписСуммаРуб = Макс(0,Мин(ТИКнигаПродаж.СуммаРуб,ОстПогСуммаРуб));
//						Если СписСуммаРуб <> 0 Тогда
//							КоэффСпис    = ?(ТИКнигаПродаж.СуммаРуб = 0,0,СписСуммаРуб/(ТИКнигаПродаж.СуммаРуб));
//							СписСуммаНДС = Окр(ТИКнигаПродаж.СуммаНДС * КоэффСпис,2,1);
//							СписСуммаНП  = Окр(ТИКнигаПродаж.СуммаНП  * КоэффСпис,2,1);
//						
//							Регистр.КнигаПродаж.КредДокумент    = ТИКнигаПродаж.КредДокумент;
//							Регистр.КнигаПродаж.ВидДолга		= ТИКнигаПродаж.ВидДолга;
//							Регистр.КнигаПродаж.СтавкаНДС		= ТИКнигаПродаж.СтавкаНДС;
//						
//							Регистр.КнигаПродаж.СуммаРуб		= СписСуммаРуб;
//							Регистр.КнигаПродаж.СуммаНДС		= СписСуммаНДС;
//							Регистр.КнигаПродаж.СуммаНП	        = СписСуммаНП;
//						
//							Регистр.КнигаПродаж.КодОперации     = глКО.Прочее;
//							Регистр.КнигаПродаж.СтавкаНП 		= Запрос.СтавкаНП;
//						
//							// Для того чтобы док-нт Сторно попал в книгу, сделаем его документом оплаты
//							Если Запрос.ТекДокумент.Вид() = "Сторно" Тогда
//								Регистр.КнигаПродаж.ДокументОплаты	= Запрос.ТекДокумент;
//							Иначе    
//								Регистр.КнигаПродаж.ДокументОплаты	= Запрос.ДокументОплаты;
//							КонецЕсли;
//							
//							Регистр.КнигаПродаж.ДвижениеРасходВыполнить();
//							
//							ОстПогСуммаРуб = ОстПогСуммаРуб - СписСуммаРуб;
//						КонецЕсли; // есть что списывать                   
//					КонецЦикла; // по строкам таблицы итогов КП
//				КонецЦикла; // по ставкам НП
//			КонецЦикла; // по виду долга
//		КонецЦикла; // по тек документу
//	КонецЦикла;// по кред. документу
//	
КонецПроцедуры // ПроведениеПоОплате()

//******************************************************************************
// ПроведениеПоОтгрузке(ВремКнигаПродаж)
//
// Параметры:
//  ВремКнигаПродаж
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Здесь можно перечислить элементы диалога.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПроведениеПоОтгрузке(ВремКнигаПродаж)
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;
	Перем СписокНужныхКодов, СписокНужныхВидовДолга;
//	
//	// отбираем движения регистров, выбирая те из них, которые должны 
//	// быть включены в книгу продаж.
//	ДатаНачала = НачалоПериода;
//	
//	// определение периода построения запросов
//	Если ИтогиАктуальны() = 1 Тогда
//		ПериодПо = "";
//	Иначе       
//		ТекДок = ТекущийДокумент();
//		ПериодПо = "по ТекДок";
//	КонецЕсли;         
//    
//	// движения по покупателям, включаемые в книгу продаж
//	СписокНужныхКодов = СоздатьОбъект("СписокЗначений");
//	СписокНужныхКодов.ДобавитьЗначение(глКО.Продажа);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.НачисленоКомиссионноеВознаграждение);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ЗачтеноКомиссионноеВознаграждение);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ОтчетРеализатора); 
//	СписокНужныхКодов.ДобавитьЗначение(глКО.СуммоваяРазница);  
//	СписокНужныхКодов.ДобавитьЗначение(глКО.РозничнаяПродажа);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.КорректировкаОтгрузкиНачислениеНП);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.КорректировкаОтгрузкиСторнированиеНП);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ЗачтенАвансПокупателя);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ОплатаОтПокупателя);
//	
//	СписокНужныхВидовДолга = СоздатьОбъект("СписокЗначений");
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаТовары);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаПродукцию);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаПолуфабрикаты);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаУслуги);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаРаботы);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаМатериалы);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаОС);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаНМА);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.Прочее);
//	
//	КодОперацииСуммоваяРазница = глКО.СуммоваяРазница;
//
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|Период с ДатаНачала "+ ПериодПо+";
//	|ФирмаРег 		= Регистр.Покупатели.Фирма;
//	|ВидДолга 		= Регистр.Покупатели.ВидДолга;
//	|КредДокумент 	= Регистр.Покупатели.КредДокумент;
//	|ДокументОплаты = Регистр.Покупатели.ДокументОплаты;
//	|ТекДокумент 	= Регистр.Покупатели.ТекущийДокумент;
//	|СуммаРуб 		= Регистр.Покупатели.СуммаРуб;
//	|КодОперации 	= Регистр.Покупатели.КодОперации;
//	|СтавкаНП	 	= Регистр.Покупатели.СтавкаНП;
//	|Функция СуммаРубПриход = Приход(СуммаРуб);
//	|Функция СуммаРубОтг    = Приход(СуммаРуб) Когда (КодОперации <> КодОперацииСуммоваяРазница);
//	|Функция СуммаРубСР     = Приход(СуммаРуб) Когда (КодОперации =  КодОперацииСуммоваяРазница);
//	|Группировка 	КредДокумент;
//	|Группировка 	ВидДолга;
//	|Группировка 	СтавкаНП;
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие	(КодОперации 	в СписокНужныхКодов);
//	|Условие	(ВидДолга 		в СписокНужныхВидовДолга);
//	|"//}}ЗАПРОС
//	;
//	
//	Если ФормироватьТолькоПоДокументамОтгрузки = 1 Тогда
//		ТекстЗапроса = ТекстЗапроса + "Условие (ТекДокумент = КредДокумент);
//	|";
//	
//	КонецЕсли;
//	
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли; 
//	
//    НайденнаяСФ = "";            
//	ТИКнигаПродаж = СоздатьОбъект("ТаблицаЗначений");
//		
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//		Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//        	Пока Запрос.Группировка("ВидДолга") = 1 Цикл           
//				Пока Запрос.Группировка("СтавкаНП") = 1 Цикл       
//					ВремКнигаПродаж.УстановитьЗначениеФильтра("КредДокумент",Запрос.КредДокумент,1);
//					ВремКнигаПродаж.УстановитьЗначениеФильтра("ВидДолга",    Запрос.ВидДолга,    1);
//					ВремКнигаПродаж.ВыгрузитьИтоги(ТИКнигаПродаж,1,1);
//					
//					Если ФормироватьТолькоПоДокументамОтгрузки = 0 Тогда
//						ОстПогСуммаРуб = Запрос.СуммаРубПриход; // сумма отгрузки   
//						КоэффСписСР    = 0;
//						
//					Иначе
//						ОстПогСуммаРуб = Запрос.СуммаРубОтг; // сумма отгрузки без суммовых разниц, то есть по документу отгрузки
//						КоэффСписСР    = ?(ОстПогСуммаРуб = 0,0,Запрос.СуммаРубСР/(ОстПогСуммаРуб));
//
//					КонецЕсли;
//					
//					СуммаПогашения = ОстПогСуммаРуб;
//					
//					ТИКнигаПродаж.ВыбратьСтроки();
//					Пока (ТИКнигаПродаж.ПолучитьСтроку() = 1)
//					и    (ОстПогСуммаРуб <> 0)
//					Цикл
//						
//						Если ФормироватьТолькоПоДокументамОтгрузки = 0 Тогда
//							Если ОстПогСуммаРуб < 0 Тогда
//								СписСуммаРуб = Мин(0,Макс(ТИКнигаПродаж.СуммаРуб,ОстПогСуммаРуб));
//							Иначе    
//								СписСуммаРуб = Макс(0,Мин(ТИКнигаПродаж.СуммаРуб,ОстПогСуммаРуб));
//							КонецЕсли;
//							
//						Иначе
//							СписСуммаРуб = ОстПогСуммаРуб;
//							
//						КонецЕсли;
//						
//						Если СписСуммаРуб <> 0 Тогда
//							КоэффСпис    = ?(ТИКнигаПродаж.СуммаРуб = 0,0,СписСуммаРуб/(ТИКнигаПродаж.СуммаРуб));
//							СписСуммаНДС = Окр(ТИКнигаПродаж.СуммаНДС * КоэффСпис,2,1);
//							СписСуммаНП  = Окр(ТИКнигаПродаж.СуммаНП  * КоэффСпис,2,1);
//
//							СписСуммаСР = Окр(ТИКнигаПродаж.СуммаРуб * КоэффСпис * КоэффСписСР,2,1);
//							СписНДССР   = Окр(ТИКнигаПродаж.СуммаНДС * КоэффСпис * КоэффСписСР,2,1);
//							СписНПСР    = Окр(ТИКнигаПродаж.СуммаНП  * КоэффСпис * КоэффСписСР,2,1);
//							
//							Регистр.КнигаПродаж.КредДокумент    = ТИКнигаПродаж.КредДокумент;
//							Регистр.КнигаПродаж.ВидДолга		= ТИКнигаПродаж.ВидДолга;
//							Регистр.КнигаПродаж.СтавкаНДС		= ТИКнигаПродаж.СтавкаНДС;
//							
//							Регистр.КнигаПродаж.СуммаРуб		= СписСуммаРуб;
//							Регистр.КнигаПродаж.СуммаНДС		= СписСуммаНДС;
//							Регистр.КнигаПродаж.СуммаНП	        = СписСуммаНП;
//							Регистр.КнигаПродаж.СтавкаНП 		= Запрос.СтавкаНП;
//							Регистр.КнигаПродаж.КодОперации     = глКО.Прочее;
//							
//							// Для того чтобы док-нт Сторно попал в книгу, сделаем его документом оплаты
//							Если Запрос.ТекДокумент.Вид() = "Сторно" Тогда
//								Регистр.КнигаПродаж.ДокументОплаты	= Запрос.ТекДокумент;
//							Иначе    
//								Регистр.КнигаПродаж.ДокументОплаты	= Запрос.ДокументОплаты;
//							КонецЕсли;  							
//					                                                                                               
//							// Доп. листы формируются начиная с мая 2006 года
//							Если (Регистр.КнигаПродаж.СуммаРуб < 0) И (ДатаДок >= НачМесяца(глДатаПостановления283))  Тогда
//								Продолжить;
//							Иначе
//							    Регистр.КнигаПродаж.ЗаписьДополнительногоЛиста = 0;
//								Регистр.КнигаПродаж.КорректируемыйПериод       = Дата(0);  
//							КонецЕсли;          
//					
//							Регистр.КнигаПродаж.ДвижениеРасходВыполнить();
//							
//							Если СписСуммаСР <> 0 Тогда
//								Регистр.КнигаПродаж.СуммаРуб		= - СписСуммаСР;
//								Регистр.КнигаПродаж.СуммаНДС		= - СписНДССР;
//								Регистр.КнигаПродаж.СуммаНП	        = - СписНПСР;
//								
//								Регистр.КнигаПродаж.ДвижениеПриходВыполнить();
//							КонецЕсли;
//							
//							ОстПогСуммаРуб = ОстПогСуммаРуб - СписСуммаРуб;
//						КонецЕсли; // есть что списывать           
//					КонецЦикла; // по строкам таблицы итогов КП
//				КонецЦикла; // по ставке НП
//			КонецЦикла; // по виду долга
//	КонецЦикла;// по кред. документу
//	
КонецПроцедуры // ПроведениеПоОтгрузке()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ВремРегистры, ВремКнигаПродаж;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//
//	ВремРегистры = СоздатьОбъект("Регистры");
//	ВремКнигаПродаж = ВремРегистры.КнигаПродаж;
//	ВремКнигаПокупок = ВремРегистры.КнигаПокупок;
//    
//	// при необходимости делаем временный расчет итогов
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремКнигаПродаж.ВременныйРасчет();
//		Если НачалоПериода >= '01.01.2009' Тогда
//			ВремКнигаПокупок.ВременныйРасчет();
//		КонецЕсли;
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//                         
//                         
//	Если (Фирма.ЮрЛицо.МетодОпределенияВыручки.Получить(ДатаДок) = 
//	     Перечисление.МетодыОпределенияВыручки.ПоОплате) И (ДатаДок < глНачало2006Года) 
//	Тогда
//		 ПроведениеПоОплате(ВремКнигаПродаж);	
//	Иначе     
//		 ПроведениеПоОтгрузке(ВремКнигаПродаж);	
//		 ПроведениеПоОплате(ВремКнигаПродаж);	
//	КонецЕсли;
//                                                    
//	ПроведениеПоСторноАвансов(ВремКнигаПродаж); // а это надо в любом случае 
//	Если НачалоПериода >= '01.01.2009' Тогда
//		ПроведениеПоСторноАвансов2009(ВремКнигаПокупок); // после 01.01.2009
//	КонецЕсли;
//	ДопЛистыПоОтрицательнымРазницам(ВремКнигаПродаж);
//	
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)   
//	
//	// Проверка заполненности обязательных реквизитов.
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст,"Фирма")=0 Тогда
//		Возврат;
//	КонецЕсли;        
//	
//
//	ПоквартальныйУчет = Фирма.ЮрЛицо.УчитыватьНДСПоквартально.Получить(ДатаДок);
//	
//	Если ПоквартальныйУчет = 0 Тогда
//		НачалоПериода = НачМесяца(ДатаДок);
//		КонецПериода  = КонМесяца(ДатаДок);
//		
//	Иначе
//		НачалоПериода = НачКвартала(ДатаДок);
//		КонецПериода  = КонКвартала(ДатаДок);
//		
//	КонецЕсли;
//	
//	// проверим, не был ли уже проведен документ за этот месяц/квартал по этой же фирме
//	ДокКП = СоздатьОбъект("Документ.КнигаПродаж");
//	ДокКП.ВыбратьДокументы(НачалоПериода,КонецПериода);
//	Пока ДокКП.ПолучитьДокумент()=1 Цикл
//	    Если (ДокКП.ТекущийДокумент()<>ТекущийДокумент()) и 
//			 (ДокКП.Проведен()=1) и
//			 (ДокКП.Фирма = Фирма) Тогда    
//			 	
//			Если ПоквартальныйУчет = 0 Тогда
//		        глНеПроводить(Контекст,"За " + Формат(ДатаДок, "Д ММММГГГГ")+
//				"по фирме """+Фирма.Наименование+
//				""" формирование книги продаж уже проведено ("+ДокКП.ТекущийДокумент()+")!");
//			
//			Иначе
//		        глНеПроводить(Контекст,"За " + Формат(НачалоПериода, "Д ММММГГГГ") +  " - " + Формат(КонецПериода, "Д ММММГГГГ") +
//				" по фирме """+Фирма.Наименование+
//				""" формирование книги продаж уже проведено ("+ДокКП.ТекущийДокумент()+")!");
//			
//			КонецЕсли;
//			
//			Возврат;
//			
//	    КонецЕсли;
//	КонецЦикла;       
//	                     
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()  
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
////
//ДокПодч = СоздатьОбъект("Документ");
