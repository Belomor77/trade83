////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//                            
//******************************************************************************
// ОтменаЗаказа(ВремЗаказы, ВремЗаказыЗаявки)
//
// Параметры:
//  ВремЗаказы, ВремЗаказыЗаявки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Отмена (снятие) остатков документа - основания.
//
Процедура ОтменаЗаказа(ВремЗаказы, ВремЗаказыЗаявки)
	Перем ТИЗаказы;
//	
//	ВремЗаказы.УстановитьЗначениеФильтра("ЗаказПоставщику",ДокОснование,1);
//	ВремЗаказы.ВыгрузитьИтоги(ТИЗаказы,1,1);
//	
//	ТИЗаказы.ВыбратьСтроки();
//	Пока ТИЗаказы.ПолучитьСтроку() = 1 Цикл
//		Регистр.Заказы.Фирма             = ТИЗаказы.Фирма;
//		Регистр.Заказы.Номенклатура      = ТИЗаказы.Номенклатура;
//		Регистр.Заказы.ДоговорПоставщика = ТИЗаказы.ДоговорПоставщика;
//		Регистр.Заказы.ЗаказПоставщику   = ТИЗаказы.ЗаказПоставщику;
//		
//		Регистр.Заказы.КоличествоПриход  = ТИЗаказы.КоличествоПриход;
//		Регистр.Заказы.СтоимостьПриход   = ТИЗаказы.СтоимостьПриход;
//		
//		Регистр.Заказы.ДвижениеРасходВыполнить();
//	КонецЦикла;
//	
//	ВремЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаказПоставщику",ДокОснование,1);
//	ВремЗаказыЗаявки.ВыгрузитьИтоги(ТИЗаказы,1,1);
//	
//	ТИЗаказы.ВыбратьСтроки();
//	Пока ТИЗаказы.ПолучитьСтроку() = 1 Цикл
//		Регистр.ЗаказыЗаявки.Номенклатура      = ТИЗаказы.Номенклатура;
//		Регистр.ЗаказыЗаявки.ЗаказПоставщику   = ТИЗаказы.ЗаказПоставщику;
//		Регистр.ЗаказыЗаявки.ЗаявкаПокупателя  = ТИЗаказы.ЗаявкаПокупателя;
//		
//		Регистр.ЗаказыЗаявки.Количество        = ТИЗаказы.Количество;
//		
//		Регистр.ЗаказыЗаявки.ДвижениеРасходВыполнить();
//	КонецЦикла;
//	    
КонецПроцедуры // ОтменаЗаказа()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()        
	Перем ЭтоКорректировка;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;           
//	
//	Если (ДокОснование.Выбран()=1)
//	и    (ДокОснование.Вид() = Вид())
//	Тогда
//		ЭтоКорректировка = 1;
//		Если ДокОснование.Фирма <> Фирма Тогда
//		    глНеПроводить(Контекст,"Корректируемый заказ был выписан по другой фирме ("+ДокОснование.Фирма+")!");
//			Возврат;
//		КонецЕсли;
//	Иначе
//		ЭтоКорректировка = 0;
//	КонецЕсли;
//	
//	ТаблицаДокумента = глПодготовитьТаблицуДокумента(Контекст);
//	
//	ВремРегистры     = СоздатьОбъект("Регистры");
//	ВремЗаявки       = ВремРегистры.Заявки;
//	ВремЗаказыЗаявки = ВремРегистры.ЗаказыЗаявки;
//	ВремРезервыТМЦ   = ВремРегистры.РезервыТМЦ;
//	Если ЭтоКорректировка = 1 Тогда
//		ВремЗаказы   = ВремРегистры.Заказы;
//	КонецЕсли;
//	
//    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
//
//	// надо выбрать заказы покупателей, не распределенные по заказам поставщику
//	ВремЗаявки.    УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ , 2);
//	ВремРезервыТМЦ.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ , 2);
//	Если ЭтоКорректировка = 1 Тогда
//		ВремЗаказы.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ , 2);
//	КонецЕсли;
//	
//	// при необходимости делаем временный расчет итогов
//	Если ИтогиАктуальны() = 0 Тогда
//		СписокНоменклатуры = СоздатьОбъект("СписокЗначений");
//		ТаблицаДокумента.Выгрузить(СписокНоменклатуры,,,"Номенклатура");
//		Если ЭтоКорректировка = 1 Тогда
//			ДокОснование.ВыбратьСтроки();
//			Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
//				СписокНоменклатуры.ДобавитьЗначение(ДокОснование.Номенклатура);
//			КонецЦикла;
//		КонецЕсли;
//		
//		ВремЗаявки.      УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//		ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//		ВремРезервыТМЦ.  УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//		
//		ВремЗаявки.      ВременныйРасчет();
//		ВремЗаказыЗаявки.ВременныйРасчет();
//		ВремРезервыТМЦ.  ВременныйРасчет();
//		
//		Если ЭтоКорректировка = 1 Тогда                                                 
//			ВремЗаказы.  УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//			ВремЗаказы.  ВременныйРасчет();	
//		КонецЕсли;
//		
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	Если ЭтоКорректировка = 1 Тогда                                                                                                 
//		ОтменаЗаказа(ВремЗаказы, ВремЗаказыЗаявки)                                          
//	КонецЕсли;
//	
//	// общие для всех движений измерения
//	Регистр.Заказы.    Фирма			= Фирма;
//	
//	ТИЗаявки     = СоздатьОбъект("ТаблицаЗначений");
//	
//	ТаблицаДокумента.ВыбратьСтроки();
//	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
//		
//		ТекНоменклатура = ТаблицаДокумента.Номенклатура;
//		Если (ТекНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга)
//		 или (ТекНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Работа) Тогда
//			глНеПроводить(Контекст,"Услуги и работы заказывать поставщику нельзя! ("+ТекНоменклатура
//			                      +", строка "+ТаблицаДокумента.НомерСтроки+")");
//			Возврат;
//		КонецЕсли;                              
//		
//		// общие для всех движений измерения
//		Регистр.Заказы.      Номенклатура = ТекНоменклатура;
//		Регистр.ЗаказыЗаявки.Номенклатура = ТекНоменклатура;
//		
//		Если ТаблицаДокумента.ПоЗаявке.Выбран() = 1 Тогда
//			ВремЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",ТаблицаДокумента.ПоЗаявке, 1);
//		Иначе
//			ВремЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",, 0); // отключаем
//		КонецЕсли;
//		ВремЗаявки.УстановитьЗначениеФильтра("Номенклатура",ТекНоменклатура, 1);
//		ВремЗаявки.ВыгрузитьИтоги(ТИЗаявки,1,1);
//		
//		ТИЗаявки.НоваяКолонка("ДатаОтгрузки");
//		
//		КолСтрок = ТИЗаявки.КоличествоСтрок();
//		Для Сч = 1 по КолСтрок Цикл
//			ТИЗаявки.ПолучитьСтрокуПоНомеру(КолСтрок - Сч +1);
//			ЗаявкаПокупателя = ТИЗаявки.ЗаявкаПокупателя;
//                 
//            // Резервы учитываем в зависимости от настройки контроля остатков 
//			Если ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда
//				Зарезервировано = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,,,ЗаявкаПокупателя,"Количество");
//			ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда
//				Счетчик = 0;
//				Зарезервировано = 0;
//				Для Счетчик = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
//					Зарезервировано = Зарезервировано 
//						+ ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ.ПолучитьЗначение(Счетчик),ТекНоменклатура,,,ЗаявкаПокупателя,"Количество");
//				КонецЦикла;			    
//			КонецЕсли;
//			                     
//			УжеРаспределено = ВремЗаказыЗаявки.СводныйОстаток(ТекНоменклатура,ЗаявкаПокупателя,,"Количество") + Зарезервировано;
//			
//			ТИЗаявки.КоличествоРасход = ТИЗаявки.КоличествоРасход - УжеРаспределено;
//			
//			Если (ЗаявкаПокупателя.Выбран() = 0)
//			или  (ТИЗаявки.КоличествоРасход <= 0) 
//			Тогда
//				ТИЗаявки.УдалитьСтроку();Продолжить;
//			КонецЕсли;     
//			
//			// если Заявка покупателя должна быть выполнена раньше, чем
//			// мы получим от поставщика - игнорируем такую заявку;
//			// кроме того, игнорируем неподтвержденные заявки
//			Если (ЗаявкаПокупателя.ДатаОтгрузки < ДатаОтгрузки)
//			 или (ЗаявкаПокупателя.ВидОперации  <> Перечисление.ВидыОперацийЗаявок.НаПоставку) Тогда
//				ТИЗаявки.УдалитьСтроку();Продолжить;
//			КонецЕсли; 
//			
//			ТИЗаявки.ДатаОтгрузки = ЗаявкаПокупателя.ДатаОтгрузки;
//			
//		КонецЦикла;
//		
//		ТИЗаявки.Сортировать("+ДатаОтгрузки"); // сначала погашаем заявки с ближ. датой отгрузки
//		    
//		ОстПогКоличество = ТаблицаДокумента.Количество;
//		
//		ТИЗаявки.ВыбратьСтроки();
//		Пока (ТИЗаявки.ПолучитьСтроку()=1) 
//		и    (ОстПогКоличество<>0) 
//		Цикл
//			СписКоличество = Макс(0,Мин(ТИЗаявки.КоличествоРасход,ОстПогКоличество));
//			
//			// измерения
//			Регистр.ЗаказыЗаявки.ЗаказПоставщику   = ТекущийДокумент();
//			Регистр.ЗаказыЗаявки.ЗаявкаПокупателя  = ТИЗаявки.ЗаявкаПокупателя;  
//			// ресурсы
//			Регистр.ЗаказыЗаявки.Количество        = СписКоличество;
//			
//			Регистр.ЗаказыЗаявки.ДвижениеПриходВыполнить();
//			
//			// уменьшаем остаток к погашению
//			ОстПогКоличество = ОстПогКоличество - СписКоличество;
//			
//		КонецЦикла; // по строкам таблицы итогов
//		
//		// измерения
//		Регистр.Заказы.ДоговорПоставщика = Договор;
//		Регистр.Заказы.ЗаказПоставщику	 = ТекущийДокумент();  
//		// ресурсы
//		Регистр.Заказы.КоличествоПриход  = ТаблицаДокумента.Количество;
//		Регистр.Заказы.СтоимостьПриход 	 = ТаблицаДокумента.Сумма;
//		// выполняем движение
//		
//		Регистр.Заказы.ДвижениеПриходВыполнить();
//		
//	КонецЦикла; // по строкам таблицы документа
//	
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
//		"Фирма,Валюта,Контрагент,Договор,ДатаОтгрузки")=0 Тогда
//		Возврат;
//	КонецЕсли;
//	              
//	Если (ДатаОтгрузки < ДатаДок) Тогда
//		глНеПроводить(Контекст, "Дата документа превышает указанную в заказе дату поставки!");
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	Сумма_Итог = ТабличнаяЧасть1.Итог("Сумма");
	СуммаНДС_Итог = ТабличнаяЧасть1.Итог("СуммаНДС");
	СуммаНП_Итог = ТабличнаяЧасть1.Итог("СуммаНП");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
