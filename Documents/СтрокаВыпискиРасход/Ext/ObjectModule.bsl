Перем РабочийКО;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ФильтрБанка(ВремБанк)
//
// Параметры:
//  ВремБанк
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтра по регистру Банк.
//
Процедура ФильтрБанка(ВремБанк)
//	
//	ВремБанк.УстановитьЗначениеФильтра("Фирма",			Фирма,			1);
//	ВремБанк.УстановитьЗначениеФильтра("БанковскийСчет",БанковскийСчет,	1);
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремБанк.ВременныйРасчет(1);
//	КонецЕсли;
//	
КонецПроцедуры // ФильтрБанка()

//******************************************************************************
// ОбработкаПроведенияПоБанку(ВремБанк)
//
// Параметры:
//  ВремБанк
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ОбработкаПроведенияПоБанку(ВремБанк)
//	
//	Регистр.Банк.Фирма			= Фирма;
//	Регистр.Банк.БанковскийСчет	= БанковскийСчет;  
//	Регистр.Банк.ДвижениеДенежныхСредств = ДвижениеДенежныхСредств;
//	
//	СуммаУпр = глПересчет(Сумма,Валюта,Курс,глДоллары,ДатаДок,Кратность);
//	СуммаРуб = глПересчет(Сумма,Валюта,Курс,глРубли,ДатаДок,Кратность);
//	
//	ОстатокВал = ВремБанк.Остаток(Фирма,БанковскийСчет,"СуммаВал"); 
//	ОстатокУпр = ВремБанк.Остаток(Фирма,БанковскийСчет,"СуммаУпр"); 
//	ОстатокРуб = ВремБанк.Остаток(Фирма,БанковскийСчет,"СуммаРуб"); 
//	
//	Если (ОстатокВал>0) Тогда
//		ПогаситьВал = Мин(ОстатокВал,Сумма);
//		ПогаситьУпр = Окр(ОстатокУпр*ПогаситьВал/ОстатокВал,2,1);
//		ПогаситьРуб = Окр(ОстатокРуб*ПогаситьВал/ОстатокВал,2,1);
//		
//		СписатьУпр = Окр(СуммаУпр * ПогаситьВал/Сумма,2,1);
//		СписатьРуб = Окр(СуммаРуб * ПогаситьВал/Сумма,2,1);
//		КурсРазницаУпр = СписатьУпр - ПогаситьУпр;
//		КурсРазницаРуб = СписатьРуб - ПогаситьРуб;
//		
//		Если (КурсРазницаУпр<>0) или (КурсРазницаРуб<>0) Тогда
//			Регистр.Банк.КодОперации = глКО.КурсоваяРазница;
//			Если КурсРазницаРуб < 0 Тогда
//				Регистр.Банк.СуммаВал 	= 0;
//				Регистр.Банк.СуммаУпр 	= - КурсРазницаУпр;
//				Регистр.Банк.СуммаРуб 	= - КурсРазницаРуб;
//			
//				Регистр.Банк.ДвижениеРасходВыполнить();	
//			Иначе
//				Регистр.Банк.СуммаВал 	= 0;
//				Регистр.Банк.СуммаУпр 	= КурсРазницаУпр;
//				Регистр.Банк.СуммаРуб 	= КурсРазницаРуб;
//			
//				Регистр.Банк.ДвижениеПриходВыполнить();	
//			КонецЕсли;
//			
//		КонецЕсли;
//	КонецЕсли; // остаток вал >0
//	        
//	Регистр.Банк.СуммаВал = Сумма;
//	Регистр.Банк.СуммаУпр = СуммаУпр;
//	Регистр.Банк.СуммаРуб = СуммаРуб;
//		
//	Регистр.Банк.КодОперации = РабочийКО;
//	
//	Регистр.Банк.ДвижениеРасходВыполнить();
//	
КонецПроцедуры // ОбработкаПроведенияПоБанку()

//******************************************************************************
Процедура ОбработкаПроведенияПоВзаиморасчетам()
	
	Перем ТаблицаДолгов;
	Перем ВремРегистры;
	Перем ВремВзаиморасчеты, ВремБанк;
//		
//	СписокПараметров=СоздатьОбъект("СписокЗначений");
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
//	СписокПараметров.ДобавитьЗначение(РабочийКО,	"КодОперации");
//	                   
//	ВремРегистры = СоздатьОбъект("Регистры");
//	СписокПараметров.ДобавитьЗначение(1, "ЗнакДвижения"); // увеличение долга клиента
//		
//	Если      КодОперации=Перечисление.КодыОпераций.ОплатаПоставщику Тогда
//		ВремВзаиморасчеты=ВремРегистры.Поставщики;
//		
//	ИначеЕсли КодОперации=Перечисление.КодыОпераций.ВозвратОплатыПокупателю Тогда                               
//		ВремВзаиморасчеты=ВремРегистры.Покупатели;
//		
//	КонецЕсли;
//	
//	глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремВзаиморасчеты);
//	
//	ВремБанк = ВремРегистры.Банк;
//	ФильтрБанка(ВремБанк);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	ТаблДолгов = СоздатьОбъект("ТаблицаЗначений");
//
//	ТаблДолгов.НоваяКолонка("КредДокумент");
//	ТаблДолгов.НоваяКолонка("ВидДолга");
//	ТаблДолгов.НоваяКолонка("СтавкаНДС");
//	ТаблДолгов.НоваяКолонка("СтавкаНП");
//	ТаблДолгов.НоваяКолонка("Сумма");
//	ТаблДолгов.НоваяКолонка("СуммаУпр");
//	ТаблДолгов.НоваяКолонка("СуммаРуб");
//	ТаблДолгов.НоваяКолонка("СуммаНДС");
//	ТаблДолгов.НоваяКолонка("СуммаНП");
//	ТаблДолгов.НоваяКолонка("Себестоимость");
//	ТаблДолгов.НоваяКолонка("ОблагаетсяНП");        
//	ТаблДолгов.НоваяКолонка("ДоговорКомитента");
//	    
//	КурсДоллара	= глКурсДляВалюты(глДоллары,ДатаДок);
//	КратДоллара = глКратностьДляВалюты(глДоллары,ДатаДок);
//	КурсРубля	= глКурсДляВалюты(глРубли,ДатаДок);
//	КратРубля   = глКратностьДляВалюты(глРубли,ДатаДок);
//	
//	ТаблДолгов.НоваяСтрока();
//	
//	ТаблДолгов.КредДокумент = ТекущийДокумент();
//	ТаблДолгов.ВидДолга 	= ?(Валюта= глРубли, глВД.Аванс, глВД.АвансВал);
//		
//	// суммы
//    ВалютаВзаим	= Договор.ВалютаВзаиморасчетов;
//		
//	ТаблДолгов.СуммаУпр = ?(ВалютаВзаим=глДоллары,СуммаВзаиморасчетов,глПересчет(Сумма,Валюта,Курс,глДоллары,КурсДоллара,Кратность,КратДоллара));
//	ТаблДолгов.СуммаРуб = ?(ВалютаВзаим=глРубли	 ,СуммаВзаиморасчетов,глПересчет(Сумма,Валюта,Курс,глРубли,КурсРубля,Кратность,КратРубля));
//	ТаблДолгов.Сумма 	= СуммаВзаиморасчетов;
//		           
//	ТаблДолгов.СуммаНДС = 0;
//	ТаблДолгов.СуммаНП 	= 0;
//	ТаблДолгов.СтавкаНДС= ПолучитьПустоеЗначение(Перечисление.СтавкиНДС);
//	ТаблДолгов.СтавкаНП = ПолучитьПустоеЗначение("Справочник.СтавкиНП");
//		
//	ТаблДолгов.Себестоимость = 0;
//	ТаблДолгов.ОблагаетсяНП = ОблагаетсяНП;
//	    
//	глДвижениеДолгов(Контекст, Договор,ТаблДолгов,СписокПараметров,ВремВзаиморасчеты);
//	
//	ОбработкаПроведенияПоБанку(ВремБанк);
//
КонецПроцедуры    

//******************************************************************************
// ОбработкаПроведенияПрочее()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Обработка проведения по коду операции "Прочее".
//
Процедура ОбработкаПроведенияПрочее()
//	
//	ВремРегистры 	= СоздатьОбъект("Регистры");
//	
//	ВремБанк 		= ВремРегистры.Банк;
//	ФильтрБанка(ВремБанк);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	                                                  
//	ОбработкаПроведенияПоБанку(ВремБанк);
//	
КонецПроцедуры // ОбработкаПроведенияПрочее()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	ВалютаСчета = ?(ПустоеЗначение(БанковскийСчет.ВалютаСчета)=1,глРубли,БанковскийСчет.ВалютаСчета);
//	Если ВалютаСчета <> Валюта Тогда
//		глНеПроводить(Контекст,"Валюта документа не совпадает с валютой банковского счета!");
//		Возврат;
//	КонецЕсли;	
//	
//	Если КодОперации <> глКО.Прочее Тогда
//		ОбработкаПроведенияПоВзаиморасчетам(); 
//		
//	Иначе
//		ОбработкаПроведенияПрочее();
//		
//	КонецЕсли;       
//
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	                   
//	СписокОбязРеквизитов = "Фирма,БанковскийСчет,Валюта,КодОперации,Сумма";
//	
//	Если КодОперации <> глКО.Прочее Тогда
//		СписокОбязРеквизитов = СписокОбязРеквизитов + ",Контрагент,Договор";
//	КонецЕсли;          
//	
//	// Проверка заполненности обязательных реквизитов.
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст,	СписокОбязРеквизитов)=0 Тогда
//		Возврат;
//	КонецЕсли;                                                     
//	
//	Если Валюта <> глРубли Тогда
//		РабочийКО = глКО.ЗначениеПоИдентификатору(""+КодОперации.Идентификатор()+"Вал");
//	Иначе
//		РабочийКО = КодОперации;
//	КонецЕсли;
//   	                  
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
