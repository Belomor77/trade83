////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам() 
//
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//
//	// В таблице значений будет собираться информация по заявкам, с которых
//	// снимается резерв и номеклатуре
//	ТЗПоЗаявкам = СоздатьОбъект("ТаблицаЗначений");
//	ТЗПоЗаявкам.НоваяКолонка("Заявка");
//	ТЗПоЗаявкам.НоваяКолонка("Номенклатура");
//	ТЗПоЗаявкам.НоваяКолонка("Снято");
//	
//	ВремРег          = СоздатьОбъект("Регистры");
//	ВремРезервы      = ВремРег.РезервыТМЦ;
//	ВремЗаказыЗаявки = ВремРег.ЗаказыЗаявки;
//	ВремЗаказы       = ВремРег.Заказы;
//    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
//	ВремРезервы.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
//	ВремЗаказы. УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
//	Если СокрЛП(ВидОперации) = "Снятие резерва по складу" Тогда
//	    ВремРезервы.УстановитьЗначениеФильтра("Склад", Склад);
//	КонецЕсли;                                                
//	Если ИтогиАктуальны() = 0 Тогда
//	    ВремРезервы.     ВременныйРасчет();
//		ВремЗаказыЗаявки.ВременныйРасчет();
//		ВремЗаказы.      ВременныйРасчет();          
//		ВремРег.Актуальность(1);
//		ВремРег.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	ВыбратьСтроки();      
//	Пока ПолучитьСтроку() = 1  Цикл  
//		КоличествоБазовое = Количество * Коэффициент;
//		ВремРезервы.     УстановитьЗначениеФильтра("Номенклатура",      Номенклатура);		
//		ВремЗаказы.      УстановитьЗначениеФильтра("Номенклатура",      Номенклатура);		
//		ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",      Номенклатура);
//		Если Договор.Выбран() = 1 Тогда
//			ВремРезервы.     УстановитьЗначениеФильтра("ДоговорПокупателя", Договор);		
//			Если ВремРезервы.СводныйОстаток(Фирма,Номенклатура,Склад,Договор,,"Количество") < КоличествоБазовое Тогда
//			     глНеПроводить(Контекст,"Количество снимаемого товара (" + Строка(Номенклатура) + ") превышает резерв по данному договору (" 
//				+ Строка(Договор.Владелец) + "; " + Строка(Договор) + ").");  
//				СтатусВозврата(0);
//				Возврат;                                                    
//			КонецЕсли;    
//		ИначеЕсли Контрагент.Выбран() = 1 тогда
//			СпрДог = СоздатьОбъект("Справочник.Договоры");
//			СпрДог.ИспользоватьВладельца(Контрагент);
//			СпрДог.ВыбратьЭлементы();
//			ОстПоКонтрагенту = 0;
//			Пока СпрДог.ПолучитьЭлемент() = 1 Цикл
//			    ОстПоКонтрагенту = ОстПоКонтрагенту + ВремРезервы.СводныйОстаток(Фирма,Номенклатура,Склад,СпрДог.ТекущийЭлемент(),,"Количество");
//			КонецЦикла;                                                                                                          
//			Если ОстПоКонтрагенту < КоличествоБазовое Тогда
//			    глНеПроводить(Контекст, "Количество снимаемого товара (" + Строка(Номенклатура) + ") превышает имеющийся резерв.");  
//				Возврат;                                                    
//			КонецЕсли;    
//		Иначе                    
//			Если ВремРезервы.СводныйОстаток(Фирма,Номенклатура,Склад,,,"Количество") < КоличествоБазовое Тогда
//			    глНеПроводить(Контекст, "Количество снимаемого товара (" + Строка(Номенклатура) + ") превышает имеющийся резерв.");  
//				Возврат;                                                    
//			КонецЕсли;    
//		КонецЕсли;		
//		Регистр.РезервыТМЦ.Фирма             = Фирма;
//		Регистр.РезервыТМЦ.Номенклатура      = Номенклатура;
//		Регистр.РезервыТМЦ.Склад             = Склад;   
//		Если Договор.Выбран() = 1 Тогда
//			Регистр.РезервыТМЦ.ДоговорПокупателя = Договор;
//		КонецЕсли;
//		ТЗЗаявок = СоздатьОбъект("ТаблицаЗначений");
//		ВремРезервы.ВыгрузитьИтоги(ТЗЗаявок, 1, 1);    
//		ТЗЗаявок.Сортировать("-ЗаявкаПокупателя");  // Заявки выбираем по LIFO
//		ТЗЗаявок.ВыбратьСтроки();
//		КСписанию = КоличествоБазовое;
//		Пока ТЗЗаявок.ПолучитьСтроку()=1 Цикл
//			Если Договор.Выбран() = 0  Тогда
//			    Регистр.РезервыТМЦ.ДоговорПокупателя = ТЗЗаявок.ДоговорПокупателя;
//			КонецЕсли;                       
//			Если Контрагент.Выбран() = 1 Тогда
//			    Если ТЗЗаявок.ДоговорПокупателя.Владелец <> Контрагент Тогда
//			        Продолжить;
//			    КонецЕсли;
//			КонецЕсли;
//		    Регистр.РезервыТМЦ.ЗаявкаПокупателя = ТЗЗаявок.ЗаявкаПокупателя;  
//			Списать 							= Мин(ТЗЗаявок.Количество, КСписанию);
//			Регистр.РезервыТМЦ.Количество 		= Списать;
//			КСписанию 							= КСписанию - Списать;
//			Регистр.РезервыТМЦ.ДвижениеРасходВыполнить(); 
//			ТЗПоЗаявкам.НоваяСтрока();
//			ТЗПоЗаявкам.Заявка		 = ТЗЗаявок.ЗаявкаПокупателя; 			
//			ТЗПоЗаявкам.Номенклатура = Номенклатура;
//			ТЗПоЗаявкам.Снято 		 = Списать;   
//			Если КСписанию = 0 Тогда
//			    Прервать;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла; // По строкам документа         
//	
//	// Теперь разберемся с регистром ЗаказыЗаявки
//	ТЗПоЗаявкам.Свернуть("Заявка, Номенклатура", "Снято");
//	ТЗПоЗаявкам.Сортировать("Заявка");   // Здесь FIFO
//	ТИЗаказы	 = СоздатьОбъект("ТаблицаЗначений");
//	ТИЗаказыВрем = СоздатьОбъект("ТаблицаЗначений");
//	ТЗПоЗаявкам.ВыбратьСтроки();        
//	Пока ТЗПоЗаявкам.ПолучитьСтроку()=1 Цикл    
//		ТекНоменклатура = ТЗПоЗаявкам.Номенклатура;
//		ВремЗаказы.УстановитьЗначениеФильтра("Номенклатура", ТекНоменклатура);		
//		ВремЗаказы.ВыгрузитьИтоги(ТИЗаказы,1,1);
//		ТИЗаказы.Выгрузить(ТИЗаказыВрем);        
//		
//		ТИЗаказы.НоваяКолонка("ДатаОтгрузки");
//		
//		КолСтрок         = ТИЗаказы.КоличествоСтрок();
//		ОстПогКоличество = ТЗПоЗаявкам.Снято;
//		Для Сч = 1 по КолСтрок Цикл
//			ТИЗаказы.ПолучитьСтрокуПоНомеру(КолСтрок - Сч +1);
//			ЗаказПоставщику = ТИЗаказы.ЗаказПоставщику;
//			
//			УжеРаспределено = ВремЗаказыЗаявки.СводныйОстаток(ТекНоменклатура,,ЗаказПоставщику,"Количество");
//			         
//			ТИЗаказы.КоличествоПриход = ТИЗаказы.КоличествоПриход - УжеРаспределено;
//			
//			Если (ЗаказПоставщику.Выбран() = 0)
//			или  (ТИЗаказы.КоличествоПриход<=0) 
//			или  (ЗаказПоставщику.ДатаОтгрузки > ТЗПоЗаявкам.Заявка.ДатаОтгрузки)
//			Тогда
//			 	// если заказ поставщику будет получен позже, чем
//			    // мы отгрузим покупателю - игнорируем такой заказ
//				ТИЗаказы.УдалитьСтроку();Продолжить;
//			КонецЕсли;     
//			
//			ТИЗаказы.ДатаОтгрузки = ЗаказПоставщику.ДатаОтгрузки;
//			
//		КонецЦикла;
//		
//		ТИЗаказы.Сортировать("-ДатаОтгрузки"); // сначала погашаем заказы которые будут получены позднее
//		
//		ТИЗаказы.ВыбратьСтроки();
//		Пока (ТИЗаказы.ПолучитьСтроку()=1) 
//		и    (ОстПогКоличество<>0) 
//		Цикл
//			СписКоличество = Макс(0,Мин(ТИЗаказы.КоличествоПриход,ОстПогКоличество));
//			
//			// измерения      
//			Регистр.ЗаказыЗаявки.Номенклатура     = ТекНоменклатура;
//			Регистр.ЗаказыЗаявки.ЗаказПоставщику  = ТИЗаказы.ЗаказПоставщику;
//			Регистр.ЗаказыЗаявки.ЗаявкаПокупателя = ТЗПоЗаявкам.Заявка;  
//			// ресурсы
//			Регистр.ЗаказыЗаявки.Количество       = СписКоличество;
//			// выполняем движение
//			Регистр.ЗаказыЗаявки.ДвижениеПриходВыполнить();
//			
//			// уменьшаем остаток к погашению
//			ОстПогКоличество = ОстПогКоличество - СписКоличество;
//			
//		КонецЦикла; // по строкам таблицы итогов
//	КонецЦикла;
//
КонецПроцедуры // ПроведениеПоРегистрам() 

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//	СписОбязРеквизитов = "Фирма";
//	Если СокрЛП(ВидОперации) = "Снятие резерва по складу"  Тогда
//		СписОбязРеквизитов = СписОбязРеквизитов + ",Склад";
//	КонецЕсли;                                                         
//	
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст, СписОбязРеквизитов) = 0 Тогда
//	    глНеПроводить(Контекст, "Не все обязательные реквизиты документа заполнены!");
//		Возврат;
//	КонецЕсли;                 
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры // ОбработкаПроведения()
