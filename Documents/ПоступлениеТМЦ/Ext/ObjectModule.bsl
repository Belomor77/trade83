////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

//******************************************************************************
// СкорректироватьДвиженияПартийПоАвансам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Определяет сумму документа по взаиморасчетам с учетом авансов
//  и корректирует суммы в регистре партий пропорционально
//  сумме документа по табличной части
//
Процедура СкорректироватьДвиженияПартийПоАвансам()
//
//	ОбщаяСуммаДокумента = глПересчет(глОбщаяСуммаДокумента(Контекст), Валюта, Курс, глРубли, 1, Кратность, 1);
//    ОбщаяСуммаПоУчету = 0;
//	
//	РегистрВзаиморасчетов = СоздатьОбъект("Регистр.Поставщики");
//	Если РегистрВзаиморасчетов.ВыбратьДвиженияДокумента(ТекущийДокумент()) = 1 Тогда
//		Пока РегистрВзаиморасчетов.ПолучитьДвижение() = 1 Цикл
//			Если РегистрВзаиморасчетов.КодОперации <> глКО.ТаможенныеПлатежи Тогда
//				Если РегистрВзаиморасчетов.Приход = 1 Тогда
//    	        	 ОбщаяСуммаПоУчету = ОбщаяСуммаПоУчету - РегистрВзаиморасчетов.ОценкаРуб;
//				Иначе
//    	        	 ОбщаяСуммаПоУчету = ОбщаяСуммаПоУчету + РегистрВзаиморасчетов.ОценкаРуб;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//
//	Если ОбщаяСуммаПоУчету <> 0 Тогда
//		// если документ не отражается по книгам покупок/продаж, корректировать не надо
//		ТаблицаКорректировкиПартий = глСоздатьТаблицуКорректировкиПартий();
//		
//		глЗаполнитьТаблицуПоДвижениямРегистраПартий(ТаблицаКорректировкиПартий, Контекст);
//		глСкорректироватьСуммыПартий(ТаблицаКорректировкиПартий, ОбщаяСуммаДокумента, ОбщаяСуммаПоУчету, ДатаДок);
//	
//		глЗаписатьДвиженияРегистраПартийПоТаблице(ТаблицаКорректировкиПартий, Контекст);
//	
//	КонецЕсли;
//
КонецПроцедуры // СкорректироватьДвиженияПартийПоАвансам()

//******************************************************************************
// ВидДолгаПоТМЦ(пВидТМЦ)
//
// Параметры:
//  пВидТМЦ - Перечисление.ВидыТМЦ - вид отгруженного ТМЦ
//
// Возвращаемое значение:
//  Значение перечисления ВидыДолга, соотв. переданному виду ТМЦ
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  По переданному значению вида ТМЦ возвращает соответствующий вид долга отгрузки.
//
Функция ВидДолгаПоТМЦ(пВидТМЦ)
//	
//	Если пВидТМЦ=Перечисление.ВидыТМЦ.Товар Тогда
//		Возврат глВД.ДолгЗаТовары;
//	ИначеЕсли пВидТМЦ=Перечисление.ВидыТМЦ.Материал Тогда
//		Возврат глВД.ДолгЗаМатериалы;
//	Иначе
//		глСообщениеПроведения("Неизвестный вид ТМЦ: "+пВидТМЦ, ТекущийДокумент(),,,1);
//	КонецЕсли;
Возврат "";//	
КонецФункции //ВидДолгаПоТМЦ()
                                        
//******************************************************************************
// ФильтрЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
//
// Параметры:
//  ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтров для отбора итогов регистров Заказы, ЗаказыЗаявки.
//
Процедура ФильтрЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
//	          
//    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
//	ВремЗаказы.УстановитьЗначениеФильтра("Фирма",	            ФирмаДляОстатковТМЦ , 2);
//	ВремЗаказы.УстановитьЗначениеФильтра("ДоговорПоставщика",	Договор             , 1);
//	
//	ВидОсн = ДокОснование.Вид();
//	Если (ДокОснование.Выбран()=1) и (ВидОсн = "ЗаказПоставщику") Тогда
//		// если выбран заказ, то гасим только его !!!
//		ВремЗаказы.УстановитьЗначениеФильтра("ЗаказПоставщику",	ДокОснование,1);
//	КонецЕсли;
//	
//	Если ИтогиАктуальны()=0 Тогда
//		СписокТМЦ = СоздатьОбъект("СписокЗначений");
//		ТаблицаТМЦ.Выгрузить(СписокТМЦ,,,"Номенклатура");
//		
//		ВремЗаказы.      УстановитьЗначениеФильтра("Номенклатура", СписокТМЦ, 2);
//        ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура", СписокТМЦ, 2);
//
//		ВремЗаказы.      ВременныйРасчет();      
//		ВремЗаказыЗаявки.ВременныйРасчет();
//	КонецЕсли;
//	
КонецПроцедуры // ФильтрЗаказов()

//******************************************************************************
// ДвижениеЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
//
// Параметры:
//  ТаблицаТМЦ - подготовленная таблица документа.
//  ВремЗаказы       - объект "Регистр.Заказы",       должным образом рассчитанный и отфильтрованный
//  ВремЗаказыЗаявки - объект "Регистр.ЗаказыЗаявки", должным образом рассчитанный и отфильтрованный
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит списание по регистру "Заказы"
//
Процедура ДвижениеЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
	Перем ТИЗаказы, ТИЗЗ;  
//	
//	// общие для всех движений измерения
//	Регистр.Заказы.    Фирма			= Фирма;
//	Регистр.РезервыТМЦ.Фирма			= Фирма;
//	                                       
//	ТаблицаТМЦ.ВыбратьСтроки();
//	Пока ТаблицаТМЦ.ПолучитьСтроку()=1 Цикл  
//		
//		ТекНоменк = ТаблицаТМЦ.Номенклатура;
//		
//	    // общие для всех движений измерения
//    	Регистр.Заказы.      Номенклатура 	= ТекНоменк;
//		Регистр.РезервыТМЦ.  Номенклатура 	= ТекНоменк;
//        Регистр.ЗаказыЗаявки.Номенклатура 	= ТекНоменк;
//                
//		ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
//		ВремЗаказы.      УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
//		
//		ВремЗаказы.ВыгрузитьИтоги(ТИЗаказы,1,1);
//		
//		ПогаситьКолВо = ТаблицаТМЦ.Количество;
//		
//		ТИЗаказы.ВыбратьСтроки();
//		Пока (ТИЗаказы.ПолучитьСтроку()=1) 
//		и    (ПогаситьКолВо>0) 
//		Цикл
//			ОстЗакКПриход = ТИЗаказы.КоличествоПриход;
//			ОстЗакСПриход = ТИЗаказы.СтоимостьПриход;
//			
//			ПогЗакКПриход = Макс(Мин(ОстЗакКПриход, ПогаситьКолВо),0);
//			ПогЗакСПриход = ?(ОстЗакКПриход = 0, 0, ОстЗакСПриход * ПогЗакКПриход / ОстЗакКПриход);
//			
//			Если ПогЗакКПриход <> 0 Тогда
//				
//				Регистр.Заказы.ДоговорПоставщика= ТИЗаказы.ДоговорПоставщика;
//				Регистр.Заказы.ЗаказПоставщику	= ТИЗаказы.ЗаказПоставщику;
//				
//				Регистр.Заказы.КоличествоПриход	= ПогЗакКПриход;
//				Регистр.Заказы.СтоимостьПриход	= ПогЗакСПриход;
//				
//				Регистр.Заказы.ДвижениеРасходВыполнить();      
//				
//				ПогаситьКолВо = ПогаситьКолВо - ПогЗакКПриход; 
//				
//				// посмотрим, а не числилась ли привязка к заказу поставщика по заявке?
//				ВремЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаказПоставщику",ТИЗаказы.ЗаказПоставщику,1);
//				ВремЗаказыЗаявки.ВыгрузитьИтоги(ТИЗЗ,1,1);
//				ОстПогКПоЗаказу = ПогЗакКПриход;
//				                             
//				ТИЗЗ.ВыбратьСтроки();
//				Пока (ТИЗЗ.ПолучитьСтроку()=1)
//				и    (ОстПогКПоЗаказу <> 0)
//				Цикл                                       
//					ОстПоЗаявке  = ТИЗЗ.Количество;
//					ПогКПоЗаявке = Макс(Мин(ОстПогКПоЗаказу, ОстПоЗаявке),0);
//					Если ПогКПоЗаявке <> 0 Тогда
//						// измерения
//						Регистр.ЗаказыЗаявки.ЗаявкаПокупателя = ТИЗЗ.ЗаявкаПокупателя;
//						Регистр.ЗаказыЗаявки.ЗаказПоставщику  = ТИЗЗ.ЗаказПоставщику;
//						// ресурсы
//						Регистр.ЗаказыЗаявки.Количество       = ПогКПоЗаявке;
//						// выполним движение
//						Регистр.ЗаказыЗаявки.ДвижениеРасходВыполнить();
//						
//						// и сразу зарезервируем за покупателем эти ТМЦ 
//						// измерения
//						Регистр.РезервыТМЦ.Номенклатура      = ТекНоменк;
//						// если приходуем на другой склад - резерв выставляем в целом по фирме
//						Регистр.РезервыТМЦ.Склад		     = ?(ТИЗЗ.ЗаявкаПокупателя.Склад = Склад,Склад,"");
//						Регистр.РезервыТМЦ.ДоговорПокупателя = ТИЗЗ.ЗаявкаПокупателя.Договор;
//						Регистр.РезервыТМЦ.ЗаявкаПокупателя  = ТИЗЗ.ЗаявкаПокупателя;
//						// ресурс
//						Регистр.РезервыТМЦ.Количество	     = ПогКПоЗаявке;
//						// выполняем движение
//						Регистр.РезервыТМЦ.ДвижениеПриходВыполнить();
//						
//						ОстПогКПоЗаказу = ОстПогКПоЗаказу - ПогКПоЗаявке;
//					КонецЕсли;
//				КонецЦикла;
//				
//			КонецЕсли; // если надо погасить заказ
//
//		КонецЦикла; // по выбранным итогам
//		
//	КонецЦикла; // по строкам документа
//	
КонецПроцедуры // ДвижениеЗаказов()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ВремРегистры;
	Перем ВремПоставщики, ВремЗаказы, ВремЗаказыЗаявки;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	ТаблицаДокумента=глПодготовитьТаблицуДокумента(Контекст);
//	
//	СписокПараметров=СоздатьОбъект("СписокЗначений");
//	
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Склад,		"Склад");
//	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
//	СписокПараметров.ДобавитьЗначение(Контрагент,	"Контрагент");
//	СписокПараметров.ДобавитьЗначение(Договор,		"Договор");
//	
//	СписокПараметров.ДобавитьЗначение(КодОперации,	"КодОперации");
//	        
//	ВремРегистры     = СоздатьОбъект("Регистры");
//	ВремЗаказы	     = ВремРегистры.Заказы;
//	ВремЗаказыЗаявки = ВремРегистры.ЗаказыЗаявки;
//	
//	ФильтрЗаказов(ТаблицаДокумента, ВремЗаказы, ВремЗаказыЗаявки);
//	Если КодОперации=Перечисление.КодыОпераций.Закупка Тогда
//		ВремПоставщики = ВремРегистры.Поставщики;
//		глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремПоставщики);
//	КонецЕсли;
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	// Принимать на реализацию будет только товары
//	Если КодОперации=Перечисление.КодыОпераций.ПриемНаРеализацию  Тогда
//		                          
//		ТаблицаДокумента.ВыбратьСтроки();
//		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
//			ТаблицаДокумента.ВидТМЦ		= Перечисление.ВидыТМЦ.Товар;
//		КонецЦикла;      
//	КонецЕсли;    
//	
//	ДвижениеЗаказов(ТаблицаДокумента, ВремЗаказы, ВремЗаказыЗаявки);
//	глПриходОстатковТМЦ	    (Контекст,ТаблицаДокумента,СписокПараметров);
//	глОприходованиеПартийТМЦ(Контекст,ТаблицаДокумента,СписокПараметров);
//		                                                             
//	Если КодОперации=Перечисление.КодыОпераций.Закупка Тогда
//		                          
//		ТаблицаДокумента.Свернуть("ВидТМЦ,СтавкаНДС","Сумма,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП");
//		ТаблицаДокумента.НоваяКолонка("ВидДолга");
//		ТаблицаДокумента.НоваяКолонка("КредДокумент");
//		
//		ТаблицаДокумента.ВыбратьСтроки();
//		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
//			ТаблицаДокумента.ВидДолга		= ВидДолгаПоТМЦ(ТаблицаДокумента.ВидТМЦ);
//			ТаблицаДокумента.КредДокумент   = ТекущийДокумент();
//		КонецЦикла;      
//		
//		СписокПараметров.Установить("ЗнакДвижения", -1); // уменьшение долга контрагента
//		глДвижениеДолгов(Контекст, Договор, ТаблицаДокумента,СписокПараметров,ВремПоставщики);
//	КонецЕсли;    
//
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
// *****************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)   
//	
//	// Проверка заполненности обязательных реквизитов.
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
//		"Фирма,Склад,Валюта,Контрагент,Договор")=0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ДатаДок >= глДатаПоПриказу147 Тогда
//		СкорректироватьДвиженияПартийПоАвансам();
//	КонецЕсли;
//
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	Сумма_Итог = ТабличнаяЧасть1.Итог("Сумма");
	СуммаНДС_Итог = ТабличнаяЧасть1.Итог("СуммаНДС");
	СуммаНП_Итог = ТабличнаяЧасть1.Итог("СуммаНП");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
