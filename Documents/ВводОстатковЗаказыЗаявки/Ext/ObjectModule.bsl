////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// УстановитьЗначениеАтрибута(РегПартии, ИДОбъекта, Значение)
//
// Параметры:
//  РегПартии   - регистр, регистр у которго устанвливает значение атрибута.
//  ИмяАтрибута - строка – идентификатор атрибута
//  Значение    - неопр. – значение атрибута
//
// Описание:
//  Устанавливает значение атрибута регистра.
//
Процедура УстановитьЗначениеАтрибута(РегПартии, ИмяАтрибута, Значение)
//	
//	Если (Метаданные.Регистр(РегПартии.Вид()).Измерение(ИмяАтрибута).Выбран() = 1) ИЛИ 
//	     (Метаданные.Регистр(РегПартии.Вид()).Ресурс   (ИмяАтрибута).Выбран() = 1) ИЛИ 
//	     (Метаданные.Регистр(РегПартии.Вид()).Реквизит (ИмяАтрибута).Выбран() = 1) Тогда
//		РегПартии.УстановитьАтрибут(ИмяАтрибута, Значение);
//	КонецЕсли;
//	
КонецПроцедуры // УстановитьЗначениеАтрибута()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//
//	// определим регистр партий по которому вводятся остатки
//	Если      ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиЗаказов Тогда
//		РегОстатки  = Регистр.Заказы;
//	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиЗаявок Тогда
//		РегОстатки  = Регистр.Заявки;
//	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиЗаказовЗаявок Тогда
//		РегОстатки  = Регистр.ЗаказыЗаявки;
//	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРезервов Тогда
//		РегОстатки  = Регистр.РезервыТМЦ;
//	КонецЕсли;
//	
//	// установим общие, для всех движений, значения измерений и реквизитов регистра партии
//	УстановитьЗначениеАтрибута(РегОстатки, "Фирма"           , Фирма);
//	
//	ВыбратьСтроки();
//	Пока  ПолучитьСтроку()=1 Цикл
//
//		РегОстатки.ПривязыватьСтроку(НомерСтроки);
//
//		// измерения
//		
//		УстановитьЗначениеАтрибута(РегОстатки, "Номенклатура"      ,Номенклатура);
//		УстановитьЗначениеАтрибута(РегОстатки, "ДоговорПоставщика" ,Договор);
//		УстановитьЗначениеАтрибута(РегОстатки, "ДоговорПокупателя" ,Договор);
//		УстановитьЗначениеАтрибута(РегОстатки, "ЗаказПоставщику"   ,ЗаказПоставщику);
//		УстановитьЗначениеАтрибута(РегОстатки, "ЗаявкаПокупателя"  ,ЗаявкаПокупателя);
//		УстановитьЗначениеАтрибута(РегОстатки, "Склад"             ,Склад);
//
//        // ресурсы
//		
//		УстановитьЗначениеАтрибута(РегОстатки, "КоличествоПриход"  ,Количество);
//		УстановитьЗначениеАтрибута(РегОстатки, "СтоимостьПриход"   ,Стоимость);
//		УстановитьЗначениеАтрибута(РегОстатки, "КоличествоРасход"  ,Количество);
//		УстановитьЗначениеАтрибута(РегОстатки, "СтоимостьРасход"   ,Стоимость);
//		УстановитьЗначениеАтрибута(РегОстатки, "Количество"        ,Количество);
//
//		РегОстатки.ДвижениеПриходВыполнить();
//
//	КонецЦикла; 
//		                               
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)   
//	
//	// Проверка заполненности обязательных реквизитов.
//	СпОбязРеквизитов = "ВидОперации";
//	
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст, СпОбязРеквизитов)=0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	Стоимость_Итог = ТабличнаяЧасть1.Итог("Стоимость");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
