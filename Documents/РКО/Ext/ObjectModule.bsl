////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем РабочийКО;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ФильтрКассы(ВремКасса)
//
// Параметры:
//  ВремКасса
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтра по регистру Касса.
//
Процедура ФильтрКассы(ВремКасса)
//	
//	ВремКасса.УстановитьЗначениеФильтра("Фирма",	Фирма,	1);
//	ВремКасса.УстановитьЗначениеФильтра("Касса",	Касса,	1);
//	ВремКасса.УстановитьЗначениеФильтра("Валюта",	Валюта,	1);
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремКасса.ВременныйРасчет(1);
//	КонецЕсли;
//	
КонецПроцедуры // ФильтрКассы()

//******************************************************************************
// ОбработкаПроведенияПоКассе(ВремКасса)
//
// Параметры:
//  ВремКасса - рассчитанный регистр "Касса"
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Осуществляет движения по регистру "Касса".
//
Процедура ОбработкаПроведенияПоКассе(ВремКасса)
//	
//	Регистр.Касса.Фирма		= Фирма;
//	Регистр.Касса.Касса 	= Касса;
//	Регистр.Касса.Валюта 	= Валюта;      
//	Регистр.Касса.ДвижениеДенежныхСредств = ДвижениеДенежныхСредств;
//	
//	ОстатокВал = ВремКасса.Остаток(Фирма,Касса,Валюта,"СуммаВал"); 
//	ОстатокУпр = ВремКасса.Остаток(Фирма,Касса,Валюта,"СуммаУпр"); 
//	ОстатокРуб = ВремКасса.Остаток(Фирма,Касса,Валюта,"СуммаРуб"); 
//	
//	СуммаУпр = глПересчет(Сумма,Валюта,Курс,глДоллары,ДатаДок,Кратность);
//	СуммаРуб = глПересчет(Сумма,Валюта,Курс,глРубли,ДатаДок,Кратность);
//	
//	Если ОстатокВал>0 Тогда
//		ПогаситьВал = Мин(ОстатокВал,Сумма);
//		ПогаситьУпр = Окр(ОстатокУпр*ПогаситьВал/ОстатокВал,2,1);
//		ПогаситьРуб = Окр(ОстатокРуб*ПогаситьВал/ОстатокВал,2,1);
//		                               
//		СписатьУпр = Окр(СуммаУпр * ПогаситьВал/Сумма,2,1);
//		СписатьРуб = Окр(СуммаРуб * ПогаситьВал/Сумма,2,1);
//		КурсРазницаУпр = СписатьУпр - ПогаситьУпр;
//		КурсРазницаРуб = СписатьРуб - ПогаситьРуб;
//		
//		Если (КурсРазницаУпр<>0) или (КурсРазницаРуб<>0) Тогда
//			
//			Регистр.Касса.КодОперации = глКО.КурсоваяРазница;
//			
//			Если КурсРазницаРуб < 0 Тогда
//				Регистр.Касса.СуммаВал 	= 0;
//				Регистр.Касса.СуммаУпр 	= - КурсРазницаУпр;
//				Регистр.Касса.СуммаРуб 	= - КурсРазницаРуб;
//				
//				Регистр.Касса.ДвижениеРасходВыполнить();
//			Иначе
//				Регистр.Касса.СуммаВал 	= 0;
//				Регистр.Касса.СуммаУпр 	= КурсРазницаУпр;
//				Регистр.Касса.СуммаРуб 	= КурсРазницаРуб;
//				
//				Регистр.Касса.ДвижениеПриходВыполнить();
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;                                                  
//	        
//	Регистр.Касса.СуммаВал 	= Сумма;
//	Регистр.Касса.СуммаУпр 	= СуммаУпр;
//	Регистр.Касса.СуммаРуб 	= СуммаРуб;
//		
//	Регистр.Касса.КодОперации = РабочийКО;
//		
//	Регистр.Касса.ДвижениеРасходВыполнить();
//	
КонецПроцедуры // ОбработкаПроведенияПоКассе()

//******************************************************************************
// ОбработкаПроведенияПоВзаиморасчетам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Осуществляет движения по регистру Покупатели или Поставщики.
//
Процедура ОбработкаПроведенияПоВзаиморасчетам()
	
	Перем ТаблицаДолгов;
	Перем ВремРегистры;
	Перем ВремВзаиморасчеты, ВремКасса;
//	                  
//	СписокПараметров=СоздатьОбъект("СписокЗначений");
//	
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
//	СписокПараметров.ДобавитьЗначение(1, 			"ЗнакДвижения"); // увеличение долга клиента
//	СписокПараметров.ДобавитьЗначение(РабочийКО,	"КодОперации");
//    
//	ВремРегистры = СоздатьОбъект("Регистры");
//	Если КодОперации=глКО.ОплатаПоставщику Тогда
//		ВремВзаиморасчеты=ВремРегистры.Поставщики;
//		
//	ИначеЕсли КодОперации=глКО.ВозвратОплатыПокупателю Тогда 
//		ВремВзаиморасчеты=ВремРегистры.Покупатели;
//		
//	КонецЕсли;      
//	глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремВзаиморасчеты);
//	
//	ВремКасса = ВремРегистры.Касса;
//	ФильтрКассы(ВремКасса);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	ТаблДолгов = СоздатьОбъект("ТаблицаЗначений");
//	
//	ТаблДолгов.НоваяКолонка("КредДокумент");
//	ТаблДолгов.НоваяКолонка("ВидДолга");
//	ТаблДолгов.НоваяКолонка("Сумма");
//	ТаблДолгов.НоваяКолонка("СуммаУпр");
//	ТаблДолгов.НоваяКолонка("СуммаРуб");
//	ТаблДолгов.НоваяКолонка("СуммаНДС");
//	ТаблДолгов.НоваяКолонка("СуммаНП");
//	ТаблДолгов.НоваяКолонка("СтавкаНДС");
//	ТаблДолгов.НоваяКолонка("СтавкаНП");
//	ТаблДолгов.НоваяКолонка("Себестоимость");
//	ТаблДолгов.НоваяКолонка("ОблагаетсяНП");        
//	ТаблДолгов.НоваяКолонка("ДоговорКомитента");
//	    
//	КурсДоллара	= глКурсДляВалюты(глДоллары,ДатаДок);
//	КратДоллара = глКратностьДляВалюты(глДоллары,ДатаДок);
//	КурсРубля	= глКурсДляВалюты(глРубли,ДатаДок);
//    КратРубля   = глКратностьДляВалюты(глРубли,ДатаДок);
//    	
//	ТаблДолгов.НоваяСтрока();
//	
//	ТаблДолгов.КредДокумент = ТекущийДокумент();
//	ТаблДолгов.ВидДолга	 	= глВД.Аванс;		
//	
//	// суммы
//	ВалютаВзаим	= Договор.ВалютаВзаиморасчетов;
//	
//	ТаблДолгов.СуммаУпр = ?(ВалютаВзаим=глДоллары,СуммаВзаиморасчетов,глПересчет(Сумма,Валюта,Курс,глДоллары,КурсДоллара,Кратность,КратДоллара));
//	ТаблДолгов.СуммаРуб = ?(ВалютаВзаим=глРубли	 ,СуммаВзаиморасчетов,глПересчет(Сумма,Валюта,Курс,глРубли,КурсРубля,Кратность,КратРубля));
//	ТаблДолгов.Сумма 	= СуммаВзаиморасчетов;
//	
//	ТаблДолгов.СуммаНП 	= 0;
//	ТаблДолгов.СуммаНДС = 0;
//	
//	ТаблДолгов.СтавкаНДС= ПолучитьПустоеЗначение(Перечисление.СтавкиНДС);
//	ТаблДолгов.СтавкаНП = ПолучитьПустоеЗначение("Справочник.СтавкиНП");
//	
//	ТаблДолгов.Себестоимость = 0;
//	ТаблДолгов.ОблагаетсяНП = ОблагаетсяНП;
//
//	глДвижениеДолгов(Контекст, Договор,ТаблДолгов,СписокПараметров,ВремВзаиморасчеты);
//	
//	ОбработкаПроведенияПоКассе(ВремКасса);
//
КонецПроцедуры
        
//******************************************************************************
// ОбработкаПроведенияПоПодотчетникам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Осуществляет движения по регистру "Подотчетные лица".
//
Процедура ОбработкаПроведенияПоПодотчетникам()          
	
	Перем ВремРегистры;
	Перем ВремПодотчетныеЛица, ВремКасса;
//	
//	СписокПараметров=СоздатьОбъект("СписокЗначений");
//	
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
//	СписокПараметров.ДобавитьЗначение(1, 			"ЗнакДвижения"); // увеличение долга подотчетника
//	СписокПараметров.ДобавитьЗначение(РабочийКО,	"КодОперации");
//	
//	ВремРегистры = СоздатьОбъект("Регистры");
//	
//	ВремКасса 				= ВремРегистры.Касса;
//	ВремПодотчетныеЛица 	= ВремРегистры.ПодотчетныеЛица;
//	
//	ФильтрКассы(ВремКасса);                            
//	глФильтрПодотчетников(Контекст, ФизЛицо, Валюта, СписокПараметров, ВремПодотчетныеЛица);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	ОбработкаПроведенияПоКассе(ВремКасса);
//	глОбработкаПроведенияПоПодотчетнику(Контекст,ФизЛицо,Валюта,
//			Сумма,
//			глПересчет(Сумма,Валюта,Курс,глДоллары	,ДатаДок,Кратность),
//			глПересчет(Сумма,Валюта,Курс,глРубли	,ДатаДок,Кратность),
//			СписокПараметров,ВремПодотчетныеЛица);
//	
КонецПроцедуры

//******************************************************************************
// ОбработкаПроведенияПрочее()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Осуществляет проведение по прочим операциям, которые не проходят по регистрам
//взаиморасчетов.
//
Процедура ОбработкаПроведенияПрочее()
//	
//	
//	ВремРегистры = СоздатьОбъект("Регистры");
//	
//	ВремКасса = ВремРегистры.Касса;
//	ФильтрКассы(ВремКасса);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	                                                  
//	ОбработкаПроведенияПоКассе(ВремКасса);
//	
КонецПроцедуры // ОбработкаПроведенияПрочее()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	Если КодОперации=глКО.ОплатаПоставщику Тогда
//		ОбработкаПроведенияПоВзаиморасчетам();
//	ИначеЕсли КодОперации=глКО.ВозвратОплатыПокупателю Тогда
//		ОбработкаПроведенияПоВзаиморасчетам();
//	ИначеЕсли КодОперации=глКО.ВыдачаПодотчет Тогда
//		ОбработкаПроведенияПоПодотчетникам();
//	Иначе                                       
//		ОбработкаПроведенияПрочее();
//	КонецЕсли;
//	          
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//	СписокОбязатРеквизитов = "Фирма,Валюта,Касса,Сумма";
//	Если (КодОперации=глКО.ОплатаПоставщику) или 
//	     (КодОперации=глКО.ВозвратОплатыПокупателю) Тогда
//		СписокОбязатРеквизитов = СписокОбязатРеквизитов + ",Контрагент,Договор";
//		
//	ИначеЕсли (КодОперации=глКО.ВыдачаПодотчет) Тогда
//		СписокОбязатРеквизитов = СписокОбязатРеквизитов + ",ФизЛицо";
//		
//	КонецЕсли;            
//	
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,СписокОбязатРеквизитов)=0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Валюта <> глРубли Тогда
//		РабочийКО = глКО.ЗначениеПоИдентификатору(""+КодОперации.Идентификатор()+"Вал");
//	Иначе
//		РабочийКО = КодОперации;
//	КонецЕсли;
//
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
