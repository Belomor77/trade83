//******************************************************************************
// ФильтрКассы(ВремКасса)
//
// Параметры:
//  ВремКасса
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтра по регистру Касса.
//
Процедура ФильтрКассы(ВремКасса)
//	
//	ВремКасса.УстановитьЗначениеФильтра("Фирма",	Фирма,	1);
//	ВремКасса.УстановитьЗначениеФильтра("Касса",	Касса,	1);
//	ВремКасса.УстановитьЗначениеФильтра("Валюта",	Валюта,	1);
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремКасса.ВременныйРасчет(1);
//	КонецЕсли;
//	
КонецПроцедуры // ФильтрКассы()

//******************************************************************************
// ПроведениеПоКассе()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Проведение по регистру "Касса".
//
Процедура ПроведениеПоКассе()
//	
//	ВремРегистры = СоздатьОбъект("Регистры");
//	
//	ВремКасса = ВремРегистры.Касса;
//	ФильтрКассы(ВремКасса);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	                                                  
//	Регистр.Касса.Фирма		= Фирма;
//	Регистр.Касса.Касса 	= Касса;
//	Регистр.Касса.Валюта 	= Валюта;      
//	Регистр.Касса.ДвижениеДенежныхСредств = ""; // не важно
//	
//	ОстатокВал = ВремКасса.Остаток(Фирма,Касса,Валюта,"СуммаВал"); 
//	ОстатокУпр = ВремКасса.Остаток(Фирма,Касса,Валюта,"СуммаУпр"); 
//	ОстатокРуб = ВремКасса.Остаток(Фирма,Касса,Валюта,"СуммаРуб"); 
//                                                                     
//	Если ОстатокВал<Сумма Тогда
//		глНеПроводить(Контекст, "В кассе"+Касса+" за фирмой "+Фирма+
//		" числится меньше средств в валюте "+Валюта+", чем указано к перемещению!"+РазделительСтрок+
//		"   Остаток в кассе:      "+ОстатокВал+" "+Валюта+РазделительСтрок+
//		"   Указано к перемещению:"+Сумма     +" "+Валюта);
//		Возврат;
//	КонецЕсли;
//        
//	ПогаситьВал = Мин(ОстатокВал,Сумма);
//	ПогаситьУпр = Окр(ОстатокУпр*ПогаситьВал/ОстатокВал,2,1);
//	ПогаситьРуб = Окр(ОстатокРуб*ПогаситьВал/ОстатокВал,2,1);
//
//	Регистр.Касса.СуммаВал 	= ПогаситьВал;
//	Регистр.Касса.СуммаУпр 	= ПогаситьУпр;
//	Регистр.Касса.СуммаРуб 	= ПогаситьРуб;
//		
//	Регистр.Касса.КодОперации = глКО.Перемещение;
//	// расход	
//	Регистр.Касса.ДвижениеРасходВыполнить();
//	// оприходуем средства на другую фирму и другую кассу
//	Регистр.Касса.Фирма = ФирмаПолучатель;
//	Регистр.Касса.Касса = КассаПолучатель;  
//	
//	Регистр.Касса.ДвижениеПриходВыполнить();
//	                            
КонецПроцедуры // ПроведениеПоКассе()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	ПроведениеПоКассе();
//	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	    
//	СписокОбязРеквизитов = "Фирма,ФирмаПолучатель,Валюта,Сумма,Касса,КассаПолучатель";
//	
//	// Проверка заполненности обязательных реквизитов.
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст,СписокОбязРеквизитов)=0 Тогда
//		Возврат;
//	КонецЕсли;
//   	   
//   	Если (Фирма.ЮрЛицо <> ФирмаПолучатель.ЮрЛицо)
//	Тогда     
//		глНеПроводить(Контекст,"Нельзя перемещать деньги между фирмами,
//		                       |имеющими различные юридические лица!");
//		Возврат;
//	КонецЕсли;
//
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
////
