////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
// *****************************************************************************
//
Процедура ПереместитьНаСклад(ТаблСписПартий,ТаблицаДокумента,СписокПараметров,СписалиПартии)     
//	
//	Если СписалиПартии = 1 Тогда
//		ТаблСписПартий.ВыбратьСтроки();
//		Пока  ТаблСписПартий.ПолучитьСтроку()=1 Цикл
//			//измерения
//			Регистр.ПартииНаличие. Фирма 			= ФирмаПолучатель;
//			Регистр.ПартииНаличие. МОЛ				= СкладПолучатель.МОЛ;
//			Регистр.ПартииНаличие. Номенклатура		= ТаблСписПартий.Номенклатура;     
//			Регистр.ПартииНаличие. КодОперации		= глКО.Перемещение;
//			Если ((ТаблСписПартий.СтатусПартии = Перечисление.СтатусыПартии.Т_Купленный) или (ТаблСписПартий.СтатусПартии = Перечисление.СтатусыПартии.Т_ВРознице))и (СкладПолучатель.РозничныйСклад = 1) Тогда
//				Регистр.ПартииНаличие. СтатусПартии	= Перечисление.СтатусыПартии.Т_ВРознице; 
//				Если Склад.РозничныйСклад = 0 Тогда
//					Регистр.ПартииНаличие. КодОперации	= глКО.ПередачаВРозницу;
//				Иначе
//					Регистр.ПартииНаличие. КодОперации	= глКО.Перемещение;
//				КонецЕсли;
//			ИначеЕсли (ТаблСписПартий.СтатусПартии = Перечисление.СтатусыПартии.Т_ВРознице) и (Склад.РозничныйСклад = 1) Тогда
//				Если СкладПолучатель.РозничныйСклад = 0 Тогда
//					Регистр.ПартииНаличие. СтатусПартии	= Перечисление.СтатусыПартии.Т_Купленный;  
//					Регистр.ПартииНаличие. КодОперации	= глКО.ВозвратИЗРозницы;
//				Иначе
//					Регистр.ПартииНаличие. СтатусПартии	= Перечисление.СтатусыПартии.Т_ВРознице;  
//					Регистр.ПартииНаличие. КодОперации	= глКО.Перемещение;
//				КонецЕсли;
//		    Иначе
//				Регистр.ПартииНаличие. СтатусПартии	= ТаблСписПартий.СтатусПартии;
//			КонецЕсли;
//			Регистр.ПартииНаличие. Партия			= ТаблСписПартий.Партия;
//			Регистр.ПартииНаличие. ДатаПартии		= ТаблСписПартий.ДатаПартии; 
//			
//			// ресурсы
//			Регистр.ПартииНаличие. Количество		= ТаблСписПартий.Количество;
//			Регистр.ПартииНаличие. СуммаУпр			= ТаблСписПартий.СуммаУпр;
//			Регистр.ПартииНаличие. СуммаРуб			= ТаблСписПартий.СуммаРуб;
//			Регистр.ПартииНаличие. СуммаБезНДС		= ТаблСписПартий.СуммаБезНДС;
//			// реквизиты                                          
//			
//			Регистр.ПартииНаличие.ПродСтоимость = ТаблСписПартий.СуммаПрод; 
//		
//			Регистр.ПартииНаличие.ПривязыватьСтроку(ТаблСписПартий.НомерСтрокиДокумента);
//			
//			Если СкладПолучатель.РозничныйСклад = 0 Тогда
//				Регистр.ПартииНаличие.ЦенаПрод = 0;  
//			Иначе
//				// Для определения продажной цены надо получить строку документа
//				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(ТаблСписПартий.НомерСтрокиДокумента);
//				Регистр.ПартииНаличие. ЦенаПрод			= ТаблицаДокумента.ЦенаПродПриход;
//			КонецЕсли;
//			
//			Регистр.ПартииНаличие.ДвижениеПриходВыполнить();
//		КонецЦикла;
//	КонецЕсли;
//	
//	// оприходование
//	СписокПараметров.Установить("Склад", СкладПолучатель);
//	СписокПараметров.Установить("Фирма", ФирмаПолучатель);
//	
//	Если глПриходОстатковТМЦ	(Контекст,ТаблицаДокумента,СписокПараметров)=0 Тогда
//		Возврат;
//	КонецЕсли;
//	                                  
КонецПроцедуры // ПереместитьНаСклад()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ТаблСписПартий, ТаблСписПартийКом;    
	Перем ВремРегистры;
	Перем ВремОстаткиТМЦ, ВремРезервыТМЦ, ВремПартииНаличие;
	Перем КодОперации;
	Перем ФирмаДляОстатковТМЦ;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	// Для перемещений между оптовыми и между розничными складами используется 
//	// код операции "Внутреннее перемещение"
//	КодОперации 	= глКО.Перемещение;     
//	
//	// Для перемещения из опта в розницу и обратно используются соответствующие
//	// коды операций
//	Если (Склад.РозничныйСклад = 1) и (СкладПолучатель.РозничныйСклад = 0) тогда
//		КодОперации = глКО.ВозвратИзРозницы;	
//	ИначеЕсли (СкладПолучатель.РозничныйСклад = 1) и (Склад.РозничныйСклад = 0) Тогда
//	    КодОперации = глКО.ПередачаВРозницу;
//	КонецЕсли;
//	
//	ТаблицаДокумента 	= глПодготовитьТаблицуДокумента(Контекст);            
//	
//    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
//	СписокПараметров	= СоздатьОбъект("СписокЗначений");
//	
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Склад,			"Склад");
//	СписокПараметров.ДобавитьЗначение(Фирма,			"Фирма");
//	СписокПараметров.ДобавитьЗначение(ФирмаДляОстатковТМЦ,"ФирмаДляОстатковТМЦ");
//	СписокПараметров.ДобавитьЗначение(КодОперации,		"КодОперации");         
//	
//	Если (Склад.МОЛ 	<> СкладПолучатель.МОЛ)  
//	или  (Фирма <> ФирмаПолучатель) или (Склад.РозничныйСклад = 1) или (СкладПолучатель.РозничныйСклад = 1)
//	Тогда
//		СпишемПартии = 1;
//	Иначе     
//		СпишемПартии = 0;
//	КонецЕсли;
//	
//	ВремРегистры = СоздатьОбъект("Регистры");
//	
//	ВремОстаткиТМЦ = ВремРегистры.ОстаткиТМЦ;
//	ВремРезервыТМЦ = ВремРегистры.РезервыТМЦ;
//	глФильтрОстатковТМЦ(Контекст,ТаблицаДокумента, СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ);
//	
//	Если СпишемПартии = 1 Тогда
//		ВремПартииНаличие = ВремРегистры.ПартииНаличие;
//		глФильтрПартийТМЦ(Контекст,ТаблицаДокумента, СписокПараметров, ВремПартииНаличие);
//	КонецЕсли;                                                                            
//		
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	// остатки ТМЦ
//	Если глСписаниеОстатковТМЦ	(Контекст,ТаблицаДокумента,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ)=0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если СпишемПартии = 1 Тогда
//		// партии ТМЦ
//		глСписаниеПартийТМЦ(Контекст,ТаблицаДокумента,СписокПараметров,ВремПартииНаличие,ТаблСписПартий,ТаблСписПартийКом);
//	КонецЕсли;
//	
//	ПереместитьНаСклад(ТаблСписПартий,ТаблицаДокумента,СписокПараметров,СпишемПартии);	
//
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
//		"Фирма,ФирмаПолучатель,Склад,СкладПолучатель,Валюта")=0 Тогда
//		Возврат;
//	КонецЕсли;           
//	
//   	Если (Фирма.ЮрЛицо <> ФирмаПолучатель.ЮрЛицо)	Тогда     
//		глНеПроводить(Контекст,"Нельзя перемещать ТМЦ между фирмами,
//		                       |имеющими различные юридические лица!");
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	Сумма_Итог = ТабличнаяЧасть1.Итог("Сумма");
	СуммаНДС_Итог = ТабличнаяЧасть1.Итог("СуммаНДС");
	СуммаНП_Итог = ТабличнаяЧасть1.Итог("СуммаНП");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
