Перем ФирмаДляОстатковТМЦ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//                              
//******************************************************************************
// КорректировкаЗаказа(ВремЗаявки, ВремЗаказыЗаявки, ВремРезервыТМЦ, ОтменаОснования, ТаблицаДокумента)
//
// Параметры:
//  ВремЗаявки        - подготовленный (отфильтрованный и рассчитанный) регистр Заявки,
//  ВремЗаказыЗаявки  - подготовленный (отфильтрованный и рассчитанный) регистр ЗаказыЗаявки,
//  ВремРезервыТМЦ    - подготовленный (отфильтрованный и рассчитанный) регистр РезервыТМЦ,
//  ОтменаОснования   - флаг необходимости полного сторнирования Заявки-основания, 
//                      если установлен (равен 1), то по всем регистрам делаются стронирующие движения
//                      на всю спецификацию Заявки-основания, если не установлен,
//                      то стронируется на спецификацию проводимой заявки
//  ТаблицаДокумента  - подготовленная таблица специяфикации проводимой Заявки.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Корректировка остатков документа - основания.
//
Процедура КорректировкаЗаявки(ВремЗаявки, ВремЗаказыЗаявки, ВремРезервыТМЦ, ОтменаОснования, ТаблицаДокумента)
	Перем ТаблИтогов;
//	
//	ВремЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",ДокОснование,1);
//	ВремЗаявки.ВыгрузитьИтоги(ТаблИтогов,1,1);                              
//	ВремЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",,0); // уберем за собой
//	
//	ТаблИтогов.ВыбратьСтроки();
//	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
//		Регистр.Заявки.Фирма             = ТаблИтогов.Фирма;
//		Регистр.Заявки.Номенклатура      = ТаблИтогов.Номенклатура;
//		Регистр.Заявки.ДоговорПокупателя = ТаблИтогов.ДоговорПокупателя;
//		Регистр.Заявки.ЗаявкаПокупателя  = ТаблИтогов.ЗаявкаПокупателя;
//		
//		Если ОтменаОснования = 1 Тогда
//			КоличествоРасход = ТаблИтогов.КоличествоРасход;
//			СтоимостьРасход  = ТаблИтогов.СтоимостьРасход;
//		Иначе                                                            
//			ТекСтрока = 0;
//		    Если ТаблицаДокумента.НайтиЗначение(ТаблИтогов.Номенклатура, ТекСтрока, "Номенклатура") = 1 Тогда
//				КоличествоРасход = Макс(Мин(ТаблИтогов.КоличествоРасход, ТаблицаДокумента.ПолучитьЗначение(ТекСтрока, "Количество")),0);
//				СтоимостьРасход  = ?(ТаблИтогов.КоличествоРасход = 0, 0, ТаблИтогов.СтоимостьРасход * КоличествоРасход / ТаблИтогов.КоличествоРасход);
//			Иначе	
//				КоличествоРасход = 0;
//				СтоимостьРасход  = 0;
//		    КонецЕсли;
//		КонецЕсли;
//		
//		Если КоличествоРасход  > 0 Тогда
//			Регистр.Заявки.КоличествоРасход  = КоличествоРасход;
//			Регистр.Заявки.СтоимостьРасход   = СтоимостьРасход;
//			Регистр.Заявки.ДвижениеРасходВыполнить();
//		КонецЕсли;
//	КонецЦикла;
//	
//	ВремЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",ДокОснование,1);
//	ВремЗаказыЗаявки.ВыгрузитьИтоги(ТаблИтогов,1,1);                              
//	ВремЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",,0); // уберем за собой
//	
//	ТаблИтогов.ВыбратьСтроки();
//	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
//		Регистр.ЗаказыЗаявки.Номенклатура      = ТаблИтогов.Номенклатура;
//		Регистр.ЗаказыЗаявки.ЗаказПоставщику   = ТаблИтогов.ЗаказПоставщику;
//		Регистр.ЗаказыЗаявки.ЗаявкаПокупателя  = ТаблИтогов.ЗаявкаПокупателя;
//		
//		Если ОтменаОснования = 1 Тогда
//			КоличествоРасход = ТаблИтогов.Количество;
//		Иначе                                                            
//			ТекСтрока = 0;
//		    Если ТаблицаДокумента.НайтиЗначение(ТаблИтогов.Номенклатура, ТекСтрока, "Номенклатура") = 1 Тогда
//				КоличествоРасход = Макс(Мин(ТаблИтогов.Количество, ТаблицаДокумента.ПолучитьЗначение(ТекСтрока, "Количество")),0);
//			Иначе	
//				КоличествоРасход = 0;
//		    КонецЕсли;
//		КонецЕсли;
//		
//		Если КоличествоРасход > 0 Тогда
//			Регистр.ЗаказыЗаявки.Количество  = КоличествоРасход;
//			Регистр.ЗаказыЗаявки.ДвижениеРасходВыполнить();
//		КонецЕсли;
//	КонецЦикла;
//
//	ВремРезервыТМЦ.УстановитьЗначениеФильтра("ЗаявкаПокупателя",ДокОснование,1);
//	ВремРезервыТМЦ.ВыгрузитьИтоги(ТаблИтогов,1,1);                               
//	ВремРезервыТМЦ.УстановитьЗначениеФильтра("ЗаявкаПокупателя",,0);
//	
//    ТаблИтогов.ВыбратьСтроки();
//	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
//		Регистр.РезервыТМЦ.Фирма             = ТаблИтогов.Фирма;
//		Регистр.РезервыТМЦ.Номенклатура      = ТаблИтогов.Номенклатура;
//		Регистр.РезервыТМЦ.Склад             = ТаблИтогов.Склад;
//		Регистр.РезервыТМЦ.ДоговорПокупателя = ТаблИтогов.ДоговорПокупателя;
//		Регистр.РезервыТМЦ.ЗаявкаПокупателя  = ТаблИтогов.ЗаявкаПокупателя;
//		
//		Если ОтменаОснования = 1 Тогда
//			КоличествоРасход = ТаблИтогов.Количество;
//		Иначе                                                            
//			ТекСтрока = 0;
//		    Если ТаблицаДокумента.НайтиЗначение(ТаблИтогов.Номенклатура, ТекСтрока, "Номенклатура") = 1 Тогда
//				КоличествоРасход = Макс(Мин(ТаблИтогов.Количество, ТаблицаДокумента.ПолучитьЗначение(ТекСтрока, "Количество")),0);
//			Иначе	
//				КоличествоРасход = 0;
//		    КонецЕсли;
//		КонецЕсли;
//		
//		Если КоличествоРасход > 0 Тогда
//			Регистр.РезервыТМЦ.Количество  = КоличествоРасход;
//			Регистр.РезервыТМЦ.ДвижениеРасходВыполнить();
//		КонецЕсли;
//	КонецЦикла;
//	
КонецПроцедуры // КорректировкаЗаявки()

//******************************************************************************
// СоздатьРезерв(КолРезерва,ТекНоменклатура,ТекСклад,ВремРезервыТМЦ,ВремОстаткиТМЦ)
//
// Параметры:
//  КолРезерва,ТекНоменклатура,ТекСклад,ВремРезервыТМЦ,ВремОстаткиТМЦ
//
// Возвращаемое значение:
//  Количество реально сделанного резерва
//
// Описание:
//  Движения по резервам.
//
Функция СоздатьРезерв(КолРезерва,ТекНоменклатура,ТекСклад,ВремРезервыТМЦ,ВремОстаткиТМЦ)
//	        
//	ОстатокНаСкладе = 0;
//	РезервНаСкладе  = 0;
//
//	// проверим, а есть ли у нас вообще-то свободный остаток?
//	Если ПустоеЗначение(ТекСклад) = 0 Тогда
//		Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 1 Тогда // Фильтр по фирме не нужен
//			ОстатокНаСкладе = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,ТекСклад,, "Количество");  
//			РезервНаСкладе  = ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,ТекСклад,,,"Количество");  
//		ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда // Нужны сводные остатки по нескольким фирмам
//				
//			СчетчикЦикла = 0;
//			Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
//					
//				ТекФирма        = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
//				ОстатокНаСкладе = ОстатокНаСкладе + 
//				                  ВремОстаткиТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,ТекСклад,, "Количество");
//				РезервНаСкладе  = РезервНаСкладе + 
//				                  ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,ТекСклад,,,"Количество");
//			КонецЦикла;
//			
//		ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
//			ОстатокНаСкладе = ВремОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,ТекСклад,, "Количество");  
//			РезервНаСкладе  = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,ТекСклад,,,"Количество");  
//		КонецЕсли;	
//		МожноСделатьРезервНаСкладе = Макс(0,Мин(КолРезерва,(ОстатокНаСкладе - РезервНаСкладе)));
//
//		// проверка резерва на складе
//		Если (МожноСделатьРезервНаСкладе < КолРезерва)
//		и    (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)
//		Тогда
//			глНеПроводить(Контекст,"На складе нет нужного свободного количества ТМЦ "+ТекНоменклатура.Наименование
//			+". "+РазделительСтрок+"    Всего осталось "+Строка(ОстатокНаСкладе)+" "+ТекНоменклатура.БазоваяЕдиница
//			+". "+РазделительСтрок+"    Зарезервировано по выписанным Заявкам "+Строка(РезервНаСкладе)
//			+" "+ТекНоменклатура.БазоваяЕдиница+"."+РазделительСтрок+"Требуемое количество "+Строка(КолРезерва)+" "+ТекНоменклатура.БазоваяЕдиница);
//			Возврат 0;
//		КонецЕсли;                 
//	КонецЕсли;
//	    
//	// теперь проверим по фирме в целом
//	ОстатокНаФирме = 0;
//	РезервНаФирме  = 0;
//	Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 1 Тогда // Фильтр по фирме не нужен
//		ОстатокНаФирме = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,,, "Количество");  
//		РезервНаФирме  = ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,,,,"Количество");  
//	ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда // Нужны сводные остатки по нескольким фирмам
//				
//		СчетчикЦикла = 0;
//		Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
//					
//			ТекФирма       = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
//			ОстатокНаФирме = ОстатокНаФирме + 
//				                  ВремОстаткиТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,,, "Количество");
//			РезервНаФирме  = РезервНаФирме + 
//				                  ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,,,,"Количество");
//		КонецЦикла;
//			
//	ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
//		ОстатокНаФирме = ВремОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,,, "Количество");  
//		РезервНаФирме  = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,,,,"Количество");  
//	КонецЕсли;	
//	                 
//	МожноСделатьРезервНаФирме = Макс(0,Мин(КолРезерва,(ОстатокНаФирме - РезервНаФирме)));
//
//	// проверка резерва на фирме в целом
//	Если (МожноСделатьРезервНаФирме < КолРезерва)
//	и    (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)
//	Тогда
//		глНеПроводить(Контекст,"На фирме в целом нет нужного свободного количества ТМЦ "+ТекНоменклатура.Наименование
//		+". "+РазделительСтрок+"    Всего осталось "+Строка(ОстатокНаФирме)+" "+ТекНоменклатура.БазоваяЕдиница
//		+". "+РазделительСтрок+"    Зарезервировано по выписанным Заявкам "+Строка(РезервНаФирме)
//		+" "+ТекНоменклатура.БазоваяЕдиница+"."+РазделительСтрок+"Требуемое количество "+Строка(КолРезерва)+" "+ТекНоменклатура.БазоваяЕдиница);
//		Возврат 0;
//	КонецЕсли;                 
//	
//	// по возможности делаем резерв
//	МожноСделатьРезерв = ?(ПустоеЗначение(ТекСклад) = 1, МожноСделатьРезервНаФирме, Мин(МожноСделатьРезервНаФирме,МожноСделатьРезервНаСкладе));
//	Если МожноСделатьРезерв > 0 Тогда
//		Регистр.РезервыТМЦ.Фирма	         = Фирма;
//		Регистр.РезервыТМЦ.Склад             = ТекСклад;
//		Регистр.РезервыТМЦ.Номенклатура      = ТекНоменклатура;
//		Регистр.РезервыТМЦ.ДоговорПокупателя = Договор;
//		Регистр.РезервыТМЦ.ЗаявкаПокупателя  = ТекущийДокумент();
//		Регистр.РезервыТМЦ.Количество        = МожноСделатьРезерв;
//		Регистр.РезервыТМЦ.ДвижениеПриходВыполнить();
//	КонецЕсли;
//	             
//	Возврат МожноСделатьРезерв; // сколько 
Возврат "";//	
КонецФункции // СоздатьРезерв()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам() 
	Перем ЭтоКорректировка;
	
	Перем КонтрольОстатков;
	Перем ВремЗаказы, ВремЗаказыЗаявки, ВремЗаявки;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//	               
//	ЭтоКорректировка = 0;
//	НадоСторнировать = 0;
//	Если (ДокОснование.Выбран()=1)
//	и    (ДокОснование.Вид() = Вид())
//	Тогда
//		Если ВидОперации = ДокОснование.ВидОперации Тогда
//			ЭтоКорректировка = 1; 
//			НадоСторнировать = 1;
//		Иначе
//			Если  ДокОснование.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная  Тогда
//				
//				// На основании неподтвержденной заявки выписали заявку на склад или заявку на поставку,
//				// надо снять с заявки-основания только вошедшие в новую заявку позиции номенклатуры
//				ЭтоКорректировка = 1; 
//			ИначеЕсли ДокОснование.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку Тогда
//				Если ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
//					
//					// На основании заявки на поставку выписали заявку на склад,
//					// надо снять с заявки-основания только вошедшие в новую заявку позиции номенклатуры
//					ЭтоКорректировка = 1; 
//				КонецЕсли;
//			КонецЕсли; 
//		КонецЕсли; 
//		
//		Если ЭтоКорректировка = 1 Тогда
//			Если ДокОснование.Фирма <> Фирма Тогда
//				глНеПроводить(Контекст,"Корректируемая заявка была выписана по другой фирме ("+ДокОснование.Фирма+")!");
//				Возврат;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
// 
//	КонтрольОстатков = ?(ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная, 0, 1);
//	
//	ТаблицаДокумента = глПодготовитьТаблицуДокумента(Контекст);
//	    
//	ВремРегистры     = СоздатьОбъект("Регистры");
//	
//	Если КонтрольОстатков = 1 Тогда
//		ВремЗаказы       = ВремРегистры.Заказы;
//		ВремЗаказыЗаявки = ВремРегистры.ЗаказыЗаявки;
//		ВремОстаткиТМЦ   = ВремРегистры.ОстаткиТМЦ;
//		ВремРезервыТМЦ   = ВремРегистры.РезервыТМЦ;
//	КонецЕсли;
//	Если ЭтоКорректировка = 1 Тогда
//		ВремЗаявки       = ВремРегистры.Заявки;    
//		ВремРезервыТМЦ   = ВремРегистры.РезервыТМЦ;  
//		ВремЗаказыЗаявки = ВремРегистры.ЗаказыЗаявки;
//	КонецЕсли;
//	                               
//    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
//	Если КонтрольОстатков = 1 Тогда
//
//		// надо выбрать заказы поставщику, не распределенные по заявкам покупателей
//		ВремЗаказы.    УстановитьЗначениеФильтра("Фирма",       ФирмаДляОстатковТМЦ , 2);
//		ВремОстаткиТМЦ.УстановитьЗначениеФильтра("Фирма",       ФирмаДляОстатковТМЦ , 2);
//		ВремРезервыТМЦ.УстановитьЗначениеФильтра("Фирма",       ФирмаДляОстатковТМЦ , 2);
//	КонецЕсли;                     
//	Если ЭтоКорректировка = 1 Тогда
//		ВремРезервыТМЦ.УстановитьЗначениеФильтра("Фирма",       ФирмаДляОстатковТМЦ , 2);
//		ВремЗаявки.    УстановитьЗначениеФильтра("Фирма",       ФирмаДляОстатковТМЦ , 2);
//	КонецЕсли;
//	
//	// при необходимости делаем временный расчет итогов
//	Если (ИтогиАктуальны() = 0) 
//	и    ((КонтрольОстатков = 1) или (ЭтоКорректировка = 1)) 
//	Тогда
//		
//		СписокНоменклатуры  = СоздатьОбъект("СписокЗначений");
//		ТаблицаДокумента.Выгрузить(СписокНоменклатуры,,,"Номенклатура");
//		Если НадоСторнировать = 1 Тогда
//			ДокОснование.ВыбратьСтроки();
//			Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
//				СписокНоменклатуры.ДобавитьЗначение(ДокОснование.Номенклатура);
//			КонецЦикла;
//		КонецЕсли;
//		                        
//		Если (КонтрольОстатков = 1) Тогда
//			ВремЗаказы.      УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//			ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//			ВремОстаткиТМЦ.  УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//			ВремРезервыТМЦ.  УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//		
//			ВремЗаказы.      ВременныйРасчет(); 
//			ВремЗаказыЗаявки.ВременныйРасчет();
//			ВремОстаткиТМЦ.  ВременныйРасчет(); 
//			ВремРезервыТМЦ.  ВременныйРасчет(); 
//		КонецЕсли;
//		
//		Если ЭтоКорректировка = 1 Тогда
//			ВремЗаявки.      УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//			ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//			ВремРезервыТМЦ.  УстановитьЗначениеФильтра("Номенклатура",СписокНоменклатуры,2);
//			
//			ВремЗаявки.      ВременныйРасчет(); 
//			ВремЗаказыЗаявки.ВременныйРасчет();
//			ВремРезервыТМЦ.  ВременныйРасчет(); 
//		КонецЕсли;
//		
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли; // итоги актуальны = 0
//	                 
//	Если ЭтоКорректировка = 1 Тогда
//		КорректировкаЗаявки(ВремЗаявки, ВремЗаказыЗаявки, ВремРезервыТМЦ, НадоСторнировать, ТаблицаДокумента);
//	КонецЕсли;
//	
//	// общие для всех движений измерения
//	Регистр.Заявки.    Фирма	= Фирма;
//	
//	ТИЗаказы     = СоздатьОбъект("ТаблицаЗначений");
//	
//	ТаблицаДокумента.ВыбратьСтроки();
//	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
//		
//		ТекНоменклатура = ТаблицаДокумента.Номенклатура;
//		
//		// общие для всех движений измерения
//		Регистр.Заявки.      Номенклатура = ТекНоменклатура;
//		Регистр.ЗаказыЗаявки.Номенклатура = ТекНоменклатура;
//		
//		ОстПогКоличество = ТаблицаДокумента.Количество;   
//		
//		// Для заявок "На склад" и заявок на поставку, которые в первую очередь резервируют
//		// из остатков на складе выставляем резерв.
//		Если (    (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)
//		      или ((ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку)
//			  	и   ((СпособРезервирования = Перечисление.СпособыРезервирования.Остаток) 
//			 	или (СпособРезервирования = Перечисление.СпособыРезервирования.ОстатокЗаказы))
//			  ))
//		и    (ОстПогКоличество <> 0)
//		и    (ТекНоменклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга)
//		и    (ТекНоменклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Работа)
//		Тогда                      
//
//			// попытка зарезервировать на складе, если он выбран
//			Если Склад.Выбран()=1 Тогда
//				СделанРезерв     = СоздатьРезерв(ОстПогКоличество,ТекНоменклатура,Склад,ВремРезервыТМЦ,ВремОстаткиТМЦ);
//				ОстПогКоличество = ОстПогКоличество - СделанРезерв;
//				Если СтатусВозврата() = 0 Тогда Возврат; КонецЕсли;
//			КонецЕсли;                                       
//			
//			// а потом резерв в целом по фирме - из того количества, что не распределилось
//			СделанРезерв = СоздатьРезерв(ОстПогКоличество,ТекНоменклатура,"",ВремРезервыТМЦ,ВремОстаткиТМЦ);
//			ОстПогКоличество = ОстПогКоличество - СделанРезерв;
//		КонецЕсли;
//		
//		// распределение по заказам поставщиков делаем только в случае 
//		// когда отгрузка планируется будущей датой (т.е. для заявки на поставку), 
//		// если не установлено способ резервирования "только из текущего остатка".
//		Если (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку) 
// 	  	   и (СпособРезервирования <> Перечисление.СпособыРезервирования.Остаток) 
// 	  	   и (ОстПогКоличество > 0)	Тогда 
//			ВремЗаказы.УстановитьЗначениеФильтра("Номенклатура",ТекНоменклатура, 1);
//			ВремЗаказы.ВыгрузитьИтоги(ТИЗаказы,1,1);
//			
//			ТИЗаказы.НоваяКолонка("ДатаОтгрузки");
//			
//			КолСтрок = ТИЗаказы.КоличествоСтрок();
//			Для Сч = 1 по КолСтрок Цикл
//				ТИЗаказы.ПолучитьСтрокуПоНомеру(КолСтрок - Сч +1);
//				ЗаказПоставщику = ТИЗаказы.ЗаказПоставщику;
//				
//				УжеРаспределено = ВремЗаказыЗаявки.СводныйОстаток(ТекНоменклатура,,ЗаказПоставщику,"Количество");
//				         
//				ТИЗаказы.КоличествоПриход = ТИЗаказы.КоличествоПриход - УжеРаспределено;
//
//				// если заказ поставщику будет получен позже, чем
//				// мы отгрузим покупателю - игнорируем такой заказ
//				Если (ЗаказПоставщику.Выбран() = 0) Тогда
//					ТИЗаказы.УдалитьСтроку();Продолжить;
//				ИначеЕсли  (ТИЗаказы.КоличествоПриход<=0) 
//				или  (ЗаказПоставщику.ДатаОтгрузки > ДатаОтгрузки)
//				Тогда
//					ТИЗаказы.УдалитьСтроку();Продолжить;
//				КонецЕсли;     
//				
//				ТИЗаказы.ДатаОтгрузки = ЗаказПоставщику.ДатаОтгрузки;
//				
//			КонецЦикла;
//			
//			ТИЗаказы.Сортировать("-ДатаОтгрузки"); // сначала погашаем заказы которые будут получены позднее
//			
//			ТИЗаказы.ВыбратьСтроки();
//			Пока (ТИЗаказы.ПолучитьСтроку()=1) 
//			и    (ОстПогКоличество<>0) 
//			Цикл
//				СписКоличество = Макс(0,Мин(ТИЗаказы.КоличествоПриход,ОстПогКоличество));
//				
//				// измерения
//				Регистр.ЗаказыЗаявки.ЗаказПоставщику   = ТИЗаказы.ЗаказПоставщику;
//				Регистр.ЗаказыЗаявки.ЗаявкаПокупателя  = ТекущийДокумент();  
//
//				// ресурсы
//				Регистр.ЗаказыЗаявки.Количество        = СписКоличество;
//
//				// выполняем движение
//				Регистр.ЗаказыЗаявки.ДвижениеПриходВыполнить();
//				
//				// уменьшаем остаток к погашению
//				ОстПогКоличество = ОстПогКоличество - СписКоличество;
//				
//			КонецЦикла; // по строкам таблицы итогов
//		КонецЕсли; // по заказам поставщикам
//		
//		Регистр.Заявки.ДоговорПокупателя = Договор;
//		Регистр.Заявки.ЗаявкаПокупателя  = ТекущийДокумент();
//
//		// ресурсы
//		Регистр.Заявки.КоличествоРасход = ТаблицаДокумента.Количество;
//		Регистр.Заявки.СтоимостьРасход 	= ТаблицаДокумента.Сумма;
//
//		// выполняем движение
//		Регистр.Заявки.ДвижениеПриходВыполнить();
//		
//		// выставляем резерв для заявок на поставку, которые резервируют товар из
//		// текущего остатка в последнюю очередь (вариант по умолчанию)
//		Если (    (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку)
//		      	и (СпособРезервирования = Перечисление.СпособыРезервирования.ЗаказыОстаток)
//			  )
//		и    (ОстПогКоличество <> 0)
//		и    (ТекНоменклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга)
//		и    (ТекНоменклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Работа)
//		Тогда                      
//			
//			// попытка зарезервировать на складе, если он выбран
//			Если Склад.Выбран()=1 Тогда
//				СделанРезерв     = СоздатьРезерв(ОстПогКоличество,ТекНоменклатура,Склад,ВремРезервыТМЦ,ВремОстаткиТМЦ);
//				ОстПогКоличество = ОстПогКоличество - СделанРезерв;
//				Если СтатусВозврата() = 0 Тогда Возврат; КонецЕсли;
//			КонецЕсли;                                       
//			
//			// а потом резерв в целом по фирме - из того количества, что не распределилось
//			СделанРезерв = СоздатьРезерв(ОстПогКоличество,ТекНоменклатура,"",ВремРезервыТМЦ,ВремОстаткиТМЦ);
//			ОстПогКоличество = ОстПогКоличество - СделанРезерв;
//		КонецЕсли;
//		
//	КонецЦикла; // по строкам таблицы документа
//	
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//	СписОбязРеквизитов = "Фирма,Валюта,Контрагент,Договор,ДатаОтгрузки";
//	
//	Если ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
//		СписОбязРеквизитов = СписОбязРеквизитов + ",Склад";
//	КонецЕсли;     
//	
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст,СписОбязРеквизитов)=0 Тогда
//		Возврат;
//	КонецЕсли;     
//	
//	Если (ДатаОтгрузки < ДатаДок) Тогда
//		глНеПроводить(Контекст, "Дата документа превышает указанную в заявке дату отгрузки!");
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	Сумма_Итог = ТабличнаяЧасть1.Итог("Сумма");
	СуммаНДС_Итог = ТабличнаяЧасть1.Итог("СуммаНДС");
	СуммаНП_Итог = ТабличнаяЧасть1.Итог("СуммаНП");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
