////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
// Текущий документ - для запросов.
Перем ТекущийДокумент;
// Валютные виды долга.
Перем ВидыДолгаВал;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ПровестиПоРегистру(Рег, Запрос, ФлагРуб, ФлагУпр)
//
// Параметры:
//  Рег     - "Регистр" - регистр, который переоценивается.
//  Запрос  - "Запрос" - запрос, выполненный по регистру.
//  ФлагРуб - 0 или 1 - переоценивать или нет бух. ресурс регистра.
//  ФлагУпр - 0 или 1 - переоценивать или нет упр. ресурс регистра.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Рассчитывает курсовые разницы по руб. и упр. ресурсам и выполняет движение по регистру.
//
Процедура ПровестиПоРегистру(Рег, Запрос, ФлагРуб, ФлагУпр, ФлагЗадолж = 0)
//	
//	Если Запрос.пВалюта.Выбран() = 0 Тогда
//        Возврат;
//	КонецЕсли;
//	
//	СуммаУпр = 0; СуммаРуб = 0;
//
//	Если ФлагЗадолж <> 0 Тогда
//		// Обнуляем ресурс, чтобы не создавать лишних движений по задолжностям
//		Рег.ОценкаРуб = 0;
//	    Если (ДатаДок >= глДатаПоПриказу147) И (Запрос.пВидДолга = глВД.АвансВал) Тогда
//			ОценкаРуб = 0;
//		Иначе
//			ОценкаРуб = глПересчет(Запрос.фСуммаВал, Запрос.пВалюта, ДатаДок, глРубли, ДатаДок) - Запрос.пЗадолж;
//		КонецЕсли;
//	КонецЕсли;
//	   
//		
//	// Курсовая разница в бух. валюте.
//	Если ФлагРуб <> 0 Тогда
//		Если (ФлагЗадолж = 0) ИЛИ (ДатаДок >= Дата('01.01.2010') ) Тогда
//			// Рассчитываем по страрому
//			СуммаРуб = глПересчет(Запрос.фСуммаВал, Запрос.пВалюта, ДатаДок, глРубли, ДатаДок);
//			СуммаРуб = Окр(СуммаРуб-Запрос.фСуммаРуб, 2);
//
//		Иначе // с 2010 года переоцениваем НУ
//			Если Запрос.пВидДолга = глВД.АвансВал Тогда
//				СуммаРуб = 0; // авансы не переоцениваем
//			Иначе                                       
//				// задолженность переоцениваем
//				СуммаРуб = глПересчет(Запрос.фСуммаВал, Запрос.пВалюта, ДатаДок, глРубли, ДатаДок);
//				СуммаРуб = Окр(СуммаРуб-Запрос.пСуммаРуб, 2);
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// Курсовая разница в упр. валюте.
//	Если ФлагУпр <> 0 Тогда
//		СуммаУпр = глПересчет(Запрос.фСуммаВал, Запрос.пВалюта, ДатаДок, глДоллары, ДатаДок);
//		СуммаУпр = Окр(СуммаУпр-Запрос.фСуммаУпр, 2);
//	КонецЕсли;
//    
//	СуммаРуб  = ОКР(СуммаРуб,  2);
//	СуммаУпр  = ОКР(СуммаУпр,  2);
//	ОценкаРуб = ОКР(ОценкаРуб, 2); 
//	
//	Если (СуммаРуб = 0) И (СуммаУпр = 0) И (ОценкаРуб = 0) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Направление движения определяется знаком разницы в бух. валюте.
//	Если      0 < СуммаРуб Тогда
//		Рег.СуммаРуб   = СуммаРуб;
//		Рег.СуммаУпр   = СуммаУпр;
//		Рег.ДвижениеПриходВыполнить();
//		
//	ИначеЕсли СуммаРуб < 0 Тогда
//		Рег.СуммаРуб   = -СуммаРуб;
//		Рег.СуммаУпр   = -СуммаУпр;
//		Рег.ДвижениеРасходВыполнить();
//	
//	// Если курсовая разница в бух. валюте отсутствует,
//	// направление движения определяется знаком разницы в упр. валюте.
//	ИначеЕсли 0 < СуммаУпр Тогда
//		Рег.СуммаРуб   = СуммаРуб;
//		Рег.СуммаУпр   = СуммаУпр;
//		Рег.ДвижениеПриходВыполнить();
//		
//	ИначеЕсли СуммаУпр < 0 Тогда
//		Рег.СуммаРуб   = -СуммаРуб;
//		Рег.СуммаУпр   = -СуммаУпр;
//		Рег.ДвижениеРасходВыполнить();
//	
//	КонецЕсли;
//	
//	// Для Поставщиков и Покупателей переоцениваем текущую задолженость,
//	Если ФлагЗадолж <> 0 Тогда
//		
//		Рег.СуммаРуб  = 0;
//		Рег.СуммаУпр  = 0; 
//		
//		Если ОценкаРуб > 0 Тогда
//	
//			Если ОтразитьОтложенныйНалоговыйАктивОбязательство = 1 Тогда
//				Отложено = ОценкаРуб * 0.24;
//
//				Рег.ОценкаРуб = ОценкаРуб - Отложено; 
//				Рег.ДвижениеПриходВыполнить();
//				
//				ПрежняяОперация = Рег.КодОперации;
//				Рег.КодОперации   = глКО.Отчисление;
//				Рег.ОценкаРуб = Отложено;
//				Рег.ДвижениеПриходВыполнить();
//				Рег.КодОперации = ПрежняяОперация;
//			
//			Иначе
//				Рег.ОценкаРуб = ОценкаРуб;
//				Рег.ДвижениеПриходВыполнить();
//			
//			КонецЕсли;
//			
//		ИначеЕсли ОценкаРуб < 0 Тогда 
//			
//			ОценкаРуб = - ОценкаРуб;
//			
//			Если ОтразитьОтложенныйНалоговыйАктивОбязательство = 1 Тогда
//				Отложено = ОценкаРуб * 0.24;
//				
//				Рег.ОценкаРуб = ОценкаРуб - Отложено; 
//				Рег.ДвижениеРасходВыполнить();
//				
//				ПрежняяОперация = Рег.КодОперации;
//				Рег.КодОперации = глКО.Отчисление;
//				Рег.ОценкаРуб = Отложено;
//				Рег.ДвижениеРасходВыполнить();
//				Рег.КодОперации = ПрежняяОперация;
//			
//			Иначе
//				Рег.ОценкаРуб = ОценкаРуб;
//				Рег.ДвижениеРасходВыполнить();
//			
//			КонецЕсли;
//			
//		КонецЕсли;
//	
//	КонецЕсли;
//	
КонецПроцедуры // ПровестиПоРегистру()

//******************************************************************************
// ПровестиПоКассе()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Расчет курсовых разниц по регистру "Касса".
//
Процедура ПровестиПоКассе()
//	
//	// Текст запроса.
//	Текст = "
//	|пФирма    = Регистр.Касса.Фирма;
//	|пКасса    = Регистр.Касса.Касса;
//	|пВалюта   = Регистр.Касса.Валюта;
//	|пСуммаВал = Регистр.Касса.СуммаВал;
//	|
//	|Функция фСуммаВал = КонОст(пСуммаВал);
//	|
//	|Условие(пФирма = Фирма);
//	|
//	|Группировка пКасса;
//	|Группировка пВалюта;
//	|
//	|Без итогов;
//	|";
//	
//	// Период запроса.
//	Если СравнитьТА() < 0 Тогда
//		Текст = "
//		|Период с ТекущийДокумент по ТекущийДокумент;
//		|"+Текст;
//	КонецЕсли;
//	
//	// Остаток в бух. валюте.
//	Если КассаРуб <> 0 Тогда
//		Текст = Текст+"
//		|пСуммаРуб = Регистр.Касса.СуммаРуб;
//		|Функция фСуммаРуб = КонОст(пСуммаРуб);
//		|";
//	КонецЕсли;
//	
//	// Остаток в упр. валюте.
//	Если КассаУпр <> 0 Тогда
//		Текст = Текст+"
//		|пСуммаУпр = Регистр.Касса.СуммаУпр;
//		|Функция фСуммаУпр = КонОст(пСуммаУпр);
//		|";
//	КонецЕсли;
//	
//	// Выполнение запроса.
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(Текст) = 0 Тогда
//        глНеПроводить(Контекст,"Не выполнен запрос по регистру!");
//		Возврат;
//	КонецЕсли;
//	
//	// Формирование движений.
//	Регистр.Касса.Фирма                   = Фирма;
//	Регистр.Касса.КодОперации             = глКО.КурсоваяРазница;
//	Регистр.Касса.ДвижениеДенежныхСредств = ДвижениеДенежныхСредств;
//	
//	// Обработка запроса.
//	Пока Запрос.Группировка() = 1 Цикл
//		Регистр.Касса.Касса               = Запрос.пКасса;
//		Регистр.Касса.Валюта              = Запрос.пВалюта;
//			
//		ПровестиПоРегистру(Регистр.Касса, Запрос, КассаРуб, КассаУпр);
//	КонецЦикла;
//	
КонецПроцедуры // ПровестиПоКассе()

//******************************************************************************
// ПровестиПоБанку()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Расчет курсовых разниц по регистру "Банк".
//
Процедура ПровестиПоБанку()
//	
//	// Текст запроса.
//	Текст = " 
//	|пФирма    = Регистр.Банк.Фирма;
//	|пСчет     = Регистр.Банк.БанковскийСчет;
//	|пВалюта   = Регистр.Банк.БанковскийСчет.ВалютаСчета;
//	|пСуммаВал = Регистр.Банк.СуммаВал;
//	|
//	|Функция фСуммаВал = КонОст(пСуммаВал);
//	|
//	|Условие(пФирма = Фирма);
//	|
//	|Группировка пСчет;
//	|
//	|Без итогов;
//	|";
//	
//	// Период запроса.
//	Если СравнитьТА() < 0 Тогда
//		Текст = "
//		|Период с ТекущийДокумент по ТекущийДокумент;
//		|"+Текст;
//	КонецЕсли;
//	
//	// Остаток в бух. валюте.
//	Если БанкРуб <> 0 Тогда
//		Текст = Текст+"
//		|пСуммаРуб = Регистр.Банк.СуммаРуб;
//		|Функция фСуммаРуб = КонОст(пСуммаРуб);
//		|";
//	КонецЕсли;
//	
//	// Остаток в упр. валюте.
//	Если БанкУпр <> 0 Тогда
//		Текст = Текст+"
//		|пСуммаУпр = Регистр.Банк.СуммаУпр;
//		|Функция фСуммаУпр = КонОст(пСуммаУпр);
//		|";
//	КонецЕсли;
//	
//	// Выполнение запроса.
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(Текст) = 0 Тогда
//        глНеПроводить(Контекст,"Не выполнен запрос по регистру!");
//		Возврат;
//	КонецЕсли;
//	
//	// Формирование движений.
//	Регистр.Банк.Фирма                   = Фирма;
//	Регистр.Банк.КодОперации             = глКО.КурсоваяРазница;
//	Регистр.Банк.ДвижениеДенежныхСредств = ДвижениеДенежныхСредств;
//	
//	// Обработка запроса.
//	Пока Запрос.Группировка() = 1 Цикл
//		Регистр.Банк.БанковскийСчет      = Запрос.пСчет;
//		
//		ПровестиПоРегистру(Регистр.Банк, Запрос, БанкРуб, БанкУпр);		
//	КонецЦикла;
//	
КонецПроцедуры // ПровестиПоБанку()

//******************************************************************************
// ПровестиПоПодотчетнымЛицам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Расчет курсовых разниц по регистру "ПодотчетныеЛица".
//
Процедура ПровестиПоПодотчетнымЛицам()
//	
//	// Текст запроса.
//	Текст = " 
//	|пФирма    = Регистр.ПодотчетныеЛица.Фирма;
//	|пФизЛицо  = Регистр.ПодотчетныеЛица.ФизЛицо;
//	|пВалюта   = Регистр.ПодотчетныеЛица.Валюта;
//	|пКредДок  = Регистр.ПодотчетныеЛица.КредДокумент;
//	|пСуммаВал = Регистр.ПодотчетныеЛица.СуммаВал;
//	|
//	|Функция фСуммаВал = КонОст(пСуммаВал);
//	|
//	|Условие(пФирма = Фирма);
//	|
//	|Группировка пФизЛицо;
//	|Группировка пВалюта;
//	|Группировка пКредДок;
//	|
//	|Без итогов;
//	|";
//	
//	// Период запроса.
//	Если СравнитьТА() < 0 Тогда
//		Текст = "
//		|Период с ТекущийДокумент по ТекущийДокумент;
//		|"+Текст;
//	КонецЕсли;
//	
//	// Остаток в бух. валюте.
//	Если ПодотчетныеЛицаРуб <> 0 Тогда
//		Текст = Текст+"
//		|пСуммаРуб = Регистр.ПодотчетныеЛица.СуммаРуб;
//		|Функция фСуммаРуб = КонОст(пСуммаРуб);
//		|";
//	КонецЕсли;
//	
//	// Остаток в упр. валюте.
//	Если ПодотчетныеЛицаУпр <> 0 Тогда
//		Текст = Текст+"
//		|пСуммаУпр = Регистр.ПодотчетныеЛица.СуммаУпр;
//		|Функция фСуммаУпр = КонОст(пСуммаУпр);
//		|";
//	КонецЕсли;
//	
//	// Выполнение запроса.
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(Текст) = 0 Тогда
//        глНеПроводить(Контекст,"Не выполнен запрос по регистру!");
//		Возврат;
//	КонецЕсли;
//	
//	// Формирование движений.
//	Регистр.ПодотчетныеЛица.Фирма            = Фирма;
//	Регистр.ПодотчетныеЛица.КодОперации      = глКО.КурсоваяРазница;
//	
//	// Обработка запроса.
//	Пока Запрос.Группировка() = 1 Цикл
//		Регистр.ПодотчетныеЛица.ФизЛицо      = Запрос.пФизЛицо;
//		Регистр.ПодотчетныеЛица.Валюта       = Запрос.пВалюта;
//		Регистр.ПодотчетныеЛица.КредДокумент = Запрос.пКредДок;
//		
//		ПровестиПоРегистру(Регистр.ПодотчетныеЛица, Запрос, ПодотчетныеЛицаРуб, ПодотчетныеЛицаУпр);		
//	КонецЦикла;
//	
КонецПроцедуры // ПровестиПоПодотчетнымЛицам()

//******************************************************************************
// ПровестиПоПоставщикам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Расчет курсовых разниц по регистру "Поставщики".
//
Процедура ПровестиПоПоставщикам()
//	
//	ВидДолгаАванс    = глВД.Аванс;
//	ВидДолгаАвансВал = глВД.АвансВал;
//	
//	// Текст запроса.
//	Текст = "
//	|пФирма    = Регистр.Поставщики.Фирма;
//	|пДоговор  = Регистр.Поставщики.Договор;
//	|пВалюта   = Регистр.Поставщики.Договор.ВалютаВзаиморасчетов;
//	|пФиксКурс = Регистр.Поставщики.Договор.ФиксироватьКурсЗадолжностей;
//	|пВидДолга = Регистр.Поставщики.ВидДолга;
//	|пКредДок  = Регистр.Поставщики.КредДокумент;
//	|пЗадолж   = Регистр.Поставщики.ОценкаРуб;
//	|пСуммаВал = Регистр.Поставщики.СуммаВал;
//	|пСуммаРуб = Регистр.Поставщики.СуммаРуб;
//	|пСуммаУпр = Регистр.Поставщики.СуммаУпр;
//	|
//	|Функция фСуммаВал = КонОст(пСуммаВал);
//	|Функция фСуммаРуб = КонОст(пСуммаРуб);
//	|Функция фСуммаУпр = КонОст(пСуммаУпр);
//	|
//	|Условие(пФирма = Фирма);
//	|Условие(пФиксКурс = 0);
//	|
//	|Группировка пДоговор;
//	|Группировка пВидДолга;
//	|Группировка пКредДок;
//	|
//	|Без итогов;
//	|";
//	
//	// Период запроса.
//	Если СравнитьТА() < 0 Тогда
//		Текст = "
//		|Период с ТекущийДокумент по ТекущийДокумент;
//		|"+Текст;
//	КонецЕсли;
//	
//	// Переоцениваемые виды долга.
//	Если ПоставщикиЗадолженности = 1 Тогда
//	
//	ИначеЕсли ПоставщикиРезидентыУпр = 0 Тогда
//		Текст = Текст+"
//		|Условие(пВидДолга в ВидыДолгаВал);
//		|";
//	ИначеЕсли (ПоставщикиРуб = 0) И (ПоставщикиУпр = 0) Тогда
//		Текст = Текст+"
//		|Условие(НЕ(пВидДолга в ВидыДолгаВал));
//		|";
//	КонецЕсли;
//
//	Если ДатаДок >= глДатаПоПриказу147  Тогда
//		Текст = Текст+"
//		|Условие(пВидДолга <> ВидДолгаАванс);
//		|";
//	КонецЕсли;
//	
//	Если ДатаДок >= '01.01.2010'  Тогда
//		Текст = Текст+"
//		|Условие(пВидДолга <> ВидДолгаАвансВал);
//		|";
//	КонецЕсли;
//	
//	// Выполнение запроса.
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(Текст) = 0 Тогда
//        глНеПроводить(Контекст,"Не выполнен запрос по регистру!");
//		Возврат;
//	КонецЕсли;
//	
//	// Формирование движений.
//	Регистр.Поставщики.Фирма            = Фирма;
//	Регистр.Поставщики.КодОперации      = глКО.КурсоваяРазница;
//	
//	// Обработка запроса.
//	Пока Запрос.Группировка() = 1 Цикл
//		Регистр.Поставщики.Договор      = Запрос.пДоговор;
//		Регистр.Поставщики.ВидДолга     = Запрос.пВидДолга;
//		Регистр.Поставщики.КредДокумент = Запрос.пКредДок;
//		 
//		Если ВидыДолгаВал.Принадлежит(Запрос.пВидДолга) = 1 Тогда
//			// Взаиморасчеты с нерезидентами.
//			ПровестиПоРегистру(Регистр.Поставщики, Запрос, ПоставщикиРуб, ПоставщикиУпр, ПоставщикиЗадолженности);
//		Иначе
//			Если Запрос.пВидДолга <> глВД.АвансВал Тогда
//				// Взаиморасчеты с резидентами.
//				ПровестиПоРегистру(Регистр.Поставщики, Запрос, ПоставщикиРуб, ПоставщикиРезидентыУпр, ПоставщикиЗадолженности);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
КонецПроцедуры // ПровестиПоПоставщикам()

//******************************************************************************
// ПровестиПоПокупателям()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Расчет курсовых разниц по регистру "Покупатели".
//
Процедура ПровестиПоПокупателям()
//	
//	ВидДолгаАванс    = глВД.Аванс;
//	
//	// Текст запроса.
//	Текст = "
//	|пФирма    = Регистр.Покупатели.Фирма;
//	|пДоговор  = Регистр.Покупатели.Договор;
//	|пВалюта   = Регистр.Покупатели.Договор.ВалютаВзаиморасчетов;
//	|пФиксКурс = Регистр.Покупатели.Договор.ФиксироватьКурсЗадолжностей;
//	|пСтавкаНП = Регистр.Покупатели.СтавкаНП;
//	|пВидДолга = Регистр.Покупатели.ВидДолга;
//	|пКредДок  = Регистр.Покупатели.КредДокумент;
//	|пЗадолж   = Регистр.Покупатели.ОценкаРуб;
//	|пСуммаВал = Регистр.Покупатели.СуммаВал;
//	|пСуммаРуб = Регистр.Покупатели.СуммаРуб;
//	|пСуммаУпр = Регистр.Покупатели.СуммаУпр;
//	|
//	|Функция фСуммаВал = КонОст(пСуммаВал);
//	|Функция фСуммаРуб = КонОст(пСуммаРуб);
//	|Функция фСуммаУпр = КонОст(пСуммаУпр);
//	|
//	|Условие(пФирма = Фирма);
//	|Условие(пФиксКурс = 0);
//	|
//	|Группировка пДоговор;
//	|Группировка пСтавкаНП;
//	|Группировка пВидДолга;
//	|Группировка пКредДок;
//	|
//	|Без итогов;
//	|";
//	
//	// Период запроса.
//	Если СравнитьТА() < 0 Тогда
//		Текст = "
//		|Период с ТекущийДокумент по ТекущийДокумент;
//		|"+Текст;
//	КонецЕсли;
//	
//	// Переоцениваемые виды долга.
//	Если ПокупателиЗадолженности = 1  Тогда
//	
//	ИначеЕсли ПокупателиРезидентыУпр = 0  Тогда
//		Текст = Текст+"
//		|Условие(пВидДолга в ВидыДолгаВал);
//		|";
//	ИначеЕсли (ПокупателиРуб = 0) И (ПокупателиУпр = 0) Тогда
//		Текст = Текст+"
//		|Условие(НЕ(пВидДолга в ВидыДолгаВал));
//		|";
//	КонецЕсли;
//
//	Если ДатаДок >= глДатаПоПриказу147  Тогда
//		Текст = Текст+"
//		|Условие(пВидДолга <> ВидДолгаАванс);
//		|";
//	КонецЕсли;
//	
//	// Выполнение запроса.
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(Текст) = 0 Тогда
//        глНеПроводить(Контекст,"Не выполнен запрос по регистру!");
//		Возврат;
//	КонецЕсли;
//	
//	// Формирование движений.
//	Регистр.Покупатели.Фирма             = Фирма;
//	Регистр.Покупатели.КодОперации       = глКО.КурсоваяРазница;
//	
//	// Обработка запроса.
//	Пока Запрос.Группировка() = 1 Цикл
//		Регистр.Покупатели.Договор       = Запрос.пДоговор;
//		Регистр.Покупатели.СтавкаНП      = Запрос.пСтавкаНП;
//		Регистр.Покупатели.ВидДолга      = Запрос.пВидДолга;
//		Регистр.Покупатели.КредДокумент  = Запрос.пКредДок;
//		
//		// СуммаНП не переоценивается
//		// Себестоимость не переоценивается
//			
//		Если ВидыДолгаВал.Принадлежит(Запрос.пВидДолга) = 1 Тогда
//			// Взаиморасчеты с нерезидентами.
//			ПровестиПоРегистру(Регистр.Покупатели, Запрос, ПокупателиРуб, ПокупателиУпр, ПокупателиЗадолженности);
//		Иначе
//			Если Запрос.пВидДолга <> глВД.АвансВал Тогда
//				// Взаиморасчеты с резидентами.
//				ПровестиПоРегистру(Регистр.Покупатели, Запрос, 0, ПокупателиРезидентыУпр, ПокупателиЗадолженности);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
КонецПроцедуры // ПровестиПоПокупателям()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//	
//	Если (КассаРуб <> 0) ИЛИ (КассаУпр <> 0) Тогда
//		ПровестиПоКассе();
//	КонецЕсли;
//	
//	Если (БанкРуб <> 0) ИЛИ (БанкУпр <> 0) Тогда
//		ПровестиПоБанку();
//	КонецЕсли;
//	
//	Если (ПодотчетныеЛицаРуб <> 0) ИЛИ (ПодотчетныеЛицаУпр <> 0) Тогда
//		ПровестиПоПодотчетнымЛицам();
//	КонецЕсли;
//	
//	Если (ПоставщикиРуб <> 0) ИЛИ (ПоставщикиУпр <> 0) ИЛИ (ПоставщикиРезидентыУпр <> 0) ИЛИ (ПоставщикиЗадолженности <> 0) Тогда
//		ПровестиПоПоставщикам();
//	КонецЕсли;
//	
//	Если (ПокупателиРуб <> 0) ИЛИ (ПокупателиУпр <> 0) ИЛИ (ПокупателиРезидентыУпр <> 0) ИЛИ (ПокупателиЗадолженности <> 0) Тогда
//		ПровестиПоПокупателям();
//	КонецЕсли;
//	
КонецПроцедуры // ПроведениеПоРегистрам()


//******************************************************************************
// СформироватьНачальнуюПереоценку()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура СформироватьНачальнуюПереоценку()
//		                                         
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//	
//	// По задолжностям покупателей/покупателям
//	
//	// Текст запроса.
//	Текст = "
//	|пФирма    = Регистр.Покупатели.Фирма;
//	|пДоговор  = Регистр.Покупатели.Договор;
//	|пВалюта   = Регистр.Покупатели.Договор.ВалютаВзаиморасчетов;
//	|пСтавкаНП = Регистр.Покупатели.СтавкаНП;
//	|пВидДолга = Регистр.Покупатели.ВидДолга;
//	|пКредДок  = Регистр.Покупатели.КредДокумент;
//	|пСуммаРуб = Регистр.Покупатели.СуммаРуб;
//	|пСуммаВал = Регистр.Покупатели.СуммаВал;
//	|
//	|Функция фСуммаВал = КонОст(пСуммаВал);
//	|Функция фСуммаРуб = КонОст(пСуммаРуб);
//	|
//	|Условие(пФирма = Фирма);
//	|
//	|Группировка пДоговор;
//	|Группировка пСтавкаНП;
//	|Группировка пВидДолга;
//	|Группировка пКредДок;
//	|
//	|Без итогов;
//	|";
//	
//	// Период запроса.
//	Если СравнитьТА() < 0 Тогда
//		Текст = "
//		|Период с ТекущийДокумент по ТекущийДокумент;
//		|"+Текст;
//	КонецЕсли;
//	
//	// Выполнение запроса.
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(Текст) = 0 Тогда
//        глНеПроводить(Контекст,"Не выполнен запрос по регистру!");
//		Возврат;
//	КонецЕсли;
//	
//	// Формирование движений.
//	Регистр.Покупатели.Фирма             = Фирма;
//	
//	// Обработка запроса.
//	Пока Запрос.Группировка() = 1 Цикл
//        
//		Если Запрос.фСуммаВал = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Рег = Регистр.Покупатели;
//		
//		Рег.Договор       = Запрос.пДоговор;
//		Рег.СтавкаНП      = Запрос.пСтавкаНП;
//		Рег.ВидДолга      = Запрос.пВидДолга;
//		Рег.КредДокумент  = Запрос.пКредДок;
//         
//		ОценкаРуб =  глПересчет(Запрос.фСуммаВал, Запрос.пВалюта, ДатаДок, глРубли, ДатаДок) - Запрос.фСуммаРуб; 
//		Рег.СуммаРуб  = 0;
//		Рег.СуммаУпр  = 0; 
//		
//		// отражаем текущую сумму взаиморасчетов в рублях
//		Рег.КодОперации   = глКО.ВводОстатков;
//		Рег.ОценкаРуб = Запрос.фСуммаРуб; 
//		Рег.ДвижениеПриходВыполнить();
//		
//		Если ОценкаРуб > 0 Тогда
//	
//			Если ОтразитьОтложенныйНалоговыйАктивОбязательство = 1 Тогда
//				Отложено = ОценкаРуб * 0.24;
//				Рег.КодОперации   = глКО.ПрочееВал;
//				Рег.ОценкаРуб = ОценкаРуб - Отложено; 
//				Рег.ДвижениеПриходВыполнить();
//				
//				Рег.КодОперации   = глКО.Прочее;
//				Рег.ОценкаРуб = Отложено;
//				Рег.ДвижениеПриходВыполнить();
//			
//			Иначе
//				Рег.КодОперации   = глКО.ПрочееВал;
//				Рег.ОценкаРуб = ОценкаРуб; 
//				Рег.ДвижениеПриходВыполнить();
//			
//			КонецЕсли;
//			
//		ИначеЕсли ОценкаРуб < 0 Тогда 
//			ОценкаРуб = - ОценкаРуб;
//			Если ОтразитьОтложенныйНалоговыйАктивОбязательство = 1 Тогда
//				Отложено = ОценкаРуб * 0.24;
//				Рег.КодОперации   = глКО.ПрочееВал;
//				Рег.ОценкаРуб = ОценкаРуб - Отложено; 
//				Рег.ДвижениеРасходВыполнить();
//				
//				Рег.КодОперации   = глКО.Прочее;
//				Рег.ОценкаРуб = Отложено;
//				Рег.ДвижениеРасходВыполнить();
//			
//			Иначе
//				Рег.КодОперации   = глКО.ПрочееВал;
//				Рег.ОценкаРуб = ОценкаРуб; 
//				Рег.ДвижениеРасходВыполнить();
//			
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	// По задолжностям поставщиков/поставщикам
//	
//	// Текст запроса.
//	Текст = "
//	|пФирма    = Регистр.Поставщики.Фирма;
//	|пДоговор  = Регистр.Поставщики.Договор;
//	|пВалюта   = Регистр.Поставщики.Договор.ВалютаВзаиморасчетов;
//	|пВидДолга = Регистр.Поставщики.ВидДолга;
//	|пКредДок  = Регистр.Поставщики.КредДокумент;
//	|пСуммаВал = Регистр.Поставщики.СуммаВал;
//	|пСуммаРуб = Регистр.Поставщики.СуммаРуб;
//	|
//	|Функция фСуммаВал = КонОст(пСуммаВал);
//	|Функция фСуммаРуб = КонОст(пСуммаРуб);
//	|
//	|Условие(пФирма = Фирма);
//	|
//	|Группировка пДоговор;
//	|Группировка пВидДолга;
//	|Группировка пКредДок;
//	|
//	|Без итогов;
//	|";
//	
//	// Период запроса.
//	Если СравнитьТА() < 0 Тогда
//		Текст = "
//		|Период с ТекущийДокумент по ТекущийДокумент;
//		|"+Текст;
//	КонецЕсли;
//	
//	// Выполнение запроса.
//	Запрос = СоздатьОбъект("Запрос");
//	Если Запрос.Выполнить(Текст) = 0 Тогда
//        глНеПроводить(Контекст,"Не выполнен запрос по регистру!");
//		Возврат;
//	КонецЕсли;
//	
//	// Формирование движений.
//	Регистр.Поставщики.Фирма = Фирма;
//	
//	// Обработка запроса.
//	Пока Запрос.Группировка() = 1 Цикл
//
//		Если Запрос.фСуммаВал = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//
//		// Формирование движений. 
//		Рег = Регистр.Поставщики; 
//		Рег.Договор      = Запрос.пДоговор;
//		Рег.ВидДолга     = Запрос.пВидДолга;
//		Рег.КредДокумент = Запрос.пКредДок;
//		
//		ОценкаРуб =  глПересчет(Запрос.фСуммаВал, Запрос.пВалюта, ДатаДок, глРубли, ДатаДок) - Запрос.фСуммаРуб; 
//		Рег.СуммаРуб  = 0;
//		Рег.СуммаУпр  = 0; 
//		
//		// отражаем текущую сумму взаиморасчетов в рублях
//		Рег.КодОперации   = глКО.ВводОстатков;
//		Рег.ОценкаРуб = Запрос.фСуммаРуб; 
//		Рег.ДвижениеПриходВыполнить();
//		
//		Если ОценкаРуб > 0 Тогда
//	
//			Если ОтразитьОтложенныйНалоговыйАктивОбязательство = 1 Тогда
//				Отложено = ОценкаРуб * 0.24;
//				Рег.КодОперации  = глКО.ПрочееВал;
//				Рег.ОценкаРуб = ОценкаРуб - Отложено; 
//				Рег.ДвижениеПриходВыполнить();
//				
//				Рег.КодОперации   = глКО.Прочее;
//				Рег.ОценкаРуб = Отложено;
//				Рег.ДвижениеПриходВыполнить();
//			
//			Иначе
//				Рег.КодОперации  = глКО.ПрочееВал;
//				Рег.ОценкаРуб = ОценкаРуб; 
//				Рег.ДвижениеПриходВыполнить();
//			
//			КонецЕсли;
//			
//		ИначеЕсли ОценкаРуб < 0 Тогда 
//			ОценкаРуб = - ОценкаРуб;
//			Если ОтразитьОтложенныйНалоговыйАктивОбязательство = 1 Тогда
//				Отложено = ОценкаРуб * 0.24;
//				Рег.КодОперации  = глКО.ПрочееВал;
//				Рег.ОценкаРуб = ОценкаРуб - Отложено; 
//				Рег.ДвижениеРасходВыполнить();
//				
//				Рег.КодОперации   = глКО.Прочее;
//				Рег.ОценкаРуб = Отложено;
//				Рег.ДвижениеРасходВыполнить();
//			
//			Иначе
//				Рег.КодОперации  = глКО.ПрочееВал;
//				Рег.ОценкаРуб = ОценкаРуб; 
//				Рег.ДвижениеРасходВыполнить();
//			
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
КонецПроцедуры // ОтразитьОтложенныйНалоговыйАктивОбязательство()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст,"Фирма")=0 Тогда
//		Возврат;
//	КонецЕсли;  
//	
//    Если НачальнаяПереоценкаЗадолженностей > 0 Тогда
//        СформироватьНачальнуюПереоценку();
//		
//	// Проведение по регистрам оперативного учета.	
//	ИначеЕсли (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
////
//// Текущий документ - для запросов.
//ТекущийДокумент = ТекущийДокумент();
//	
//// Валютные виды долга.
//ВидыДолгаВал = СоздатьОбъект("СписокЗначений");
//ВидыДолгаВал.ДобавитьЗначение(глВД.АвансВал);
//ВидыДолгаВал.ДобавитьЗначение(глВД.ДолгВал);
//ВидыДолгаВал.ДобавитьЗначение(глВД.ПрочееВал);
//
