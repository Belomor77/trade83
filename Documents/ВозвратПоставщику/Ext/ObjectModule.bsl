////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ВидДолгаПоСтатусу(СтатусПартии)
//
// Параметры:
//  СтатусПартии - значение перечисления статуса партии
//
// Возвращаемое значение:
//  Значение перечисления видов долга.
//
// Описание:
//  Возвращает вид долга, соответствующий статусу партии.
//
Функция ВидДолгаПоСтатусу(СтатусПартии)
//		
//	Если (СтатусПартии	= глСП.Т_Купленный) или   
//		 (СтатусПартии  = глСП.Т_ВРознице)  или
//		 (СтатусПартии	= глСП.Т_Тара) Тогда
//		Возврат глВД.ДолгЗаТовары;
//		
//	ИначеЕсли СтатусПартии	= глСП.Т_Принятый Тогда
//		Возврат глВД.ДолгЗаТоварыПринятые;
//		
//	ИначеЕсли Лев(СтатусПартии.Идентификатор(),2)	= "М_" Тогда
//		Возврат глВД.ДолгЗаМатериалы;
//		
//	Иначе
//		Сообщить("Неизвестный статус партии: "+СтатусПартии,"i");
//	КонецЕсли;	
Возврат "";//	
КонецФункции // ВидДолгаПоСтатусу()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ТаблСписПартий;      
	Перем ВремРегистры;
	Перем ВремОстаткиТМЦ, ВремРезервыТМЦ, ВремПартииНаличие, ВремПоставщики;
	Перем ФирмаДляОстатковТМЦ;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//	
//	ТаблицаДокумента=глПодготовитьТаблицуДокумента(Контекст);
//	
//    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
//	СписокПараметров=СоздатьОбъект("СписокЗначений");
//	
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Склад,		"Склад");
//	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
//	СписокПараметров.ДобавитьЗначение(ФирмаДляОстатковТМЦ,"ФирмаДляОстатковТМЦ"); 
//	СписокПараметров.ДобавитьЗначение(Контрагент,	"Контрагент");
//	СписокПараметров.ДобавитьЗначение(Договор,		"Договор");
//	СписокПараметров.ДобавитьЗначение(-1,			"ЗнакДвижения");
//	
//	СписокПараметров.ДобавитьЗначение(КодОперации,	"КодОперации");
//	               
//	ВремРегистры = СоздатьОбъект("Регистры");
//	ВремОстаткиТМЦ = ВремРегистры.ОстаткиТМЦ;
//	ВремРезервыТМЦ = ВремРегистры.РезервыТМЦ;
//	глФильтрОстатковТМЦ(Контекст,ТаблицаДокумента, СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ);
//	
//	ВремПартииНаличие = ВремРегистры.ПартииНаличие;
//	глФильтрПартийТМЦ(Контекст,ТаблицаДокумента, СписокПараметров, ВремПартииНаличие);
//	
//	Если (КодОперации = Перечисление.КодыОпераций.ВозвратПоставщику) или (КодОперации = Перечисление.КодыОпераций.ВозвратПоставщикуИзРозницы) Тогда
//		ВремПоставщики = ВремРегистры.Поставщики;
//		глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремПоставщики);
//	КонецЕсли;                        
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	Если глСписаниеОстатковТМЦ	(Контекст,ТаблицаДокумента,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ)=0 Тогда
//		Возврат;
//	КонецЕсли;     
//	
//	глСписаниеПартийТМЦ		(Контекст,ТаблицаДокумента,СписокПараметров,ВремПартииНаличие,ТаблСписПартий);
//	                                                                 
//	Если (КодОперации = Перечисление.КодыОпераций.ВозвратПоставщику) или (КодОперации = Перечисление.КодыОпераций.ВозвратПоставщикуИзРозницы) Тогда
//		
//	    ТаблСписПартий.Свернуть("СтатусПартии,СтавкаНДС","СуммаПрод,СуммаПродУпр,СуммаПродРуб,НДСПрод,НППрод,СуммаДокРуб");
//		ТаблСписПартий.НоваяКолонка("КредДокумент");
//		ТаблСписПартий.НоваяКолонка("ВидДолга");
//		ТаблСписПартий.НоваяКолонка("Сумма");
//		ТаблСписПартий.НоваяКолонка("СуммаУпр");
//		ТаблСписПартий.НоваяКолонка("СуммаРуб");
//		ТаблСписПартий.НоваяКолонка("СуммаНДС");
//		ТаблСписПартий.НоваяКолонка("СуммаНП");
//		
//		ТаблСписПартий.ВыбратьСтроки();
//		Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл
//			ТаблСписПартий.КредДокумент = ТекущийДокумент();
//			ТаблСписПартий.ВидДолга		= ВидДолгаПоСтатусу(ТаблСписПартий.СтатусПартии);
//			ТаблСписПартий.СуммаНДС		= ТаблСписПартий.НДСПрод;
//			ТаблСписПартий.СуммаНП		= ТаблСписПартий.НППрод;
//			ТаблСписПартий.Сумма		= ТаблСписПартий.СуммаПрод;
//			ТаблСписПартий.СуммаУпр		= ТаблСписПартий.СуммаПродУпр;
//
//			Если КодОперации <> Перечисление.КодыОпераций.ВозвратПоставщикуИзРозницы Тогда
//				ТаблСписПартий.СуммаРуб		= ТаблСписПартий.СуммаПродРуб;
//			Иначе
//				ТаблСписПартий.СуммаРуб		= ТаблСписПартий.СуммаДокРуб;
//			КонецЕсли;         
//			
//		КонецЦикла;                                                           
//		                                                            
//		СписокПараметров.Установить("ЗнакДвижения", 1); // идет увеличение долга поставщика
//		глДвижениеДолгов(Контекст,Договор,ТаблСписПартий,СписокПараметров,ВремПоставщики);
//		
//	КонецЕсли;	              
//	
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
//		"Фирма,Склад,Валюта,Контрагент,Договор")=0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	Сумма_Итог = ТабличнаяЧасть1.Итог("Сумма");
	СуммаНДС_Итог = ТабличнаяЧасть1.Итог("СуммаНДС");
	СуммаНП_Итог = ТабличнаяЧасть1.Итог("СуммаНП");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
