////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ДокПодч;             
Перем ТЗДвиженийПоОплате;

Перем НачалоПериода;
Перем КонецПериода;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ПроверкаСФДокумента(ДокДляПроверки, НайденнаяСФ)
//
// Параметры:
//  ДокДляПроверки 	- документ              
//	НайденнаяСФ 	- переменная, в которую возвращается найденная СФ
//
// Возвращаемое значение:
//  1 - СФ есть и включено автоматическое формирование, можно вносить запись, 0 - иначе
//
// Описание:
//  У документа производится поиск счета фактуры. Если она есть и в ней включено 
// 	автоматическое формирование записей книги покупок, то возвращаем 1.
//
Функция ПроверкаСФДокумента(ДокДляПроверки,НайденнаяСФ,ВидСФ="СчетФактураПолученный")  
//	
//	Если ДокДляПроверки.Вид() = "СчетФактураВыданный" Тогда
//		НайденнаяСФ = ДокДляПроверки;  
//		Возврат 0;
//	КонецЕсли;
//
//    ДокПодч.ВыбратьПодчиненныеДокументы(,ДатаДок,ДокДляПроверки);
//    Пока ДокПодч.ПолучитьДокумент()=1 Цикл
//       Если ДокПодч.Вид()=ВидСФ Тогда
//          Если (ДокПодч.Проведен()=1) ИЛИ (ДокПодч.ФлагСвертки=1) Тогда
//             Если ВидСФ = "СчетФактураПолученный" Тогда
//                Если ДокПодч.АвтоКнигаПокупок = 1 Тогда
//                   НайденнаяСФ = ДокПодч.ТекущийДокумент();
//                   Возврат 1;
//                Иначе
//	            Возврат 0;
//             КонецЕсли;
//          Иначе
//                Если ДокПодч.АвтоКнигаПродаж = 1 Тогда
//                   НайденнаяСФ = ДокПодч.ТекущийДокумент();
//                   Возврат 1;
//                Иначе
//                   Возврат 0;
//                КонецЕсли
//             КонецЕсли;
//          КонецЕсли;
//	   КонецЕсли;
//    КонецЦикла;               
//	
//	Если глЕстьРеквизитШапки("УчитыватьНДС", ДокДляПроверки.Вид()) = 1 Тогда
//		Если ДокДляПроверки.УчитыватьНДС = 0 Тогда
//			Возврат 1;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глСообщениеПроведения( "На документ "+ДокДляПроверки+" не зарегистрирован счет - фактура!", ДокДляПроверки,,ТекущийДокумент(),1);
//	Возврат 0;
Возврат "";//	
КонецФункции // ПроверкаСФДокумента()     


//******************************************************************************
// ПроведениеПоСторноАвансов(ВремКнигаПродаж)
//
// Параметры:
//  ВремКнигаПродаж
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПроведениеПоСторноАвансов(ВремКнигаПродаж)
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;
	Перем СписокНужныхКодов, СписокНужныхВидовДолга;
//	
//	// отбираем движения регистров, выбирая те из них, которые должны 
//	// быть включены в книгу продаж.
//	ДатаНачала = НачалоПериода;   
//	
//	Дата575 = глДатаИзмененияПорядкаВычетаНДССАвансов;
//	
//	// Если весь отчетный период лежит после даты вступления в силу 
//	// Постановления Правительства РФ № 575, то сторно авансов будет осуществляться
//	// через книгу покупок
//	Если ДатаДок < Дата575 Тогда
//		Возврат;
//	КонецЕсли;
//		
//	
//	// определение периода построения запросов
//	Если ДатаНачала > Дата575 Тогда
//		ПериодС = "Период с ДатаНачала ";
//	Иначе
//		ПериодС = "Период с Дата575 ";
//	КонецЕсли;
//	Если ИтогиАктуальны() = 1 Тогда                                  
//		ПериодПо = "";
//	Иначе                  
//		ТекДок = ТекущийДокумент();
//		ПериодПо = "по ТекДок";
//	КонецЕсли;         
//    
//	// движения по покупателям, включаемые в книгу продаж
//	СписокНужныхКодов = СоздатьОбъект("СписокЗначений");
//	СписокНужныхКодов.ДобавитьЗначение(глКО.СторнированАванс);  
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ОплатаОтПокупателя);  
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ВозвратОплатыПокупателю);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ВозвратОплатыПокупателюВал);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.Прочее);
//	
//	СписокНужныхВидовДолга = СоздатьОбъект("СписокЗначений");
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.Аванс);
//	
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|"+ ПериодС + ПериодПо+";
//	|ФирмаРег 		= Регистр.Покупатели.Фирма;
//	|ВидДолга 		= Регистр.Покупатели.ВидДолга;
//	|КредДокумент 	= Регистр.Покупатели.КредДокумент;
//	|СуммаРуб 		= Регистр.Покупатели.СуммаРуб;
//	|КодОперации 	= Регистр.Покупатели.КодОперации;
//	|Функция СуммаРубПриход = Приход(СуммаРуб);
//	|Функция СуммаРубРасход = Расход(СуммаРуб);
//	|Группировка 	КредДокумент;
//	|Группировка 	Документ;
//	|Группировка 	ВидДолга;
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие	(КодОперации 	в СписокНужныхКодов);
//	|Условие	(ВидДолга 		в СписокНужныхВидовДолга);
//	|"//}}ЗАПРОС
//	;
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;                                   
//	
//    НайденнаяСФ = "";            
//	ТИКнигаПродаж = СоздатьОбъект("ТаблицаЗначений");
//		
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл   
//		ОбщаяСуммаАванса = Запрос.СуммаРубРасход;
//	    Пока Запрос.Группировка("Документ") = 1 Цикл
//        	Пока Запрос.Группировка("ВидДолга") = 1 Цикл
//				ВремКнигаПродаж.УстановитьЗначениеФильтра("КредДокумент",Запрос.КредДокумент,1);
//				ВремКнигаПродаж.УстановитьЗначениеФильтра("ВидДолга",    Запрос.ВидДолга,    1);
//				
//				ВремКнигаПродаж.ВыгрузитьИтоги(ТИКнигаПродаж,1,1);        
//				ОстПогСуммаРуб = Запрос.СуммаРубПриход; // сумма сторнированного аванса
//				                              
//				Если ТИКнигаПродаж.КоличествоСтрок()<>0 Тогда
//					Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ,"СчетФактураВыданный") = 0 Тогда
//						Продолжить; 
//					ИначеЕсли (НайденнаяСФ.ДатаДок >= Запрос.Документ.ДатаДок) и (НайденнаяСФ.Итог("Сумма") < ОбщаяСуммаАванса) Тогда
//						Продолжить;						
//					КонецЕсли;
//				КонецЕсли;
//
//				ТИКнигаПродаж.ВыбратьСтроки();
//				Пока (ТИКнигаПродаж.ПолучитьСтроку() = 1)
//				и    (ОстПогСуммаРуб <> 0)
//				Цикл          
//					
//					// в этом случае итоги в регистре "КнигаПродаж" отрицательные
//					СписСуммаРуб = -Мин(0,Макс(ТИКнигаПродаж.СуммаРуб, -ОстПогСуммаРуб));
//					Если СписСуммаРуб <> 0 Тогда
//						КоэффСпис    = ?(ТИКнигаПродаж.СуммаРуб = 0,0,СписСуммаРуб/(ТИКнигаПродаж.СуммаРуб));
//						СписСуммаНДС = Окр(ТИКнигаПродаж.СуммаНДС * КоэффСпис,2,1);
//						СписСуммаНП  = Окр(ТИКнигаПродаж.СуммаНП  * КоэффСпис,2,1);
//						
//						Регистр.КнигаПокупок.КредДокумент   = ТИКнигаПродаж.КредДокумент;
//						Регистр.КнигаПокупок.ВидДолга		= ТИКнигаПродаж.ВидДолга;
//						Регистр.КнигаПокупок.СтавкаНДС		= ТИКнигаПродаж.СтавкаНДС;
//						
//						Регистр.КнигаПокупок.СуммаРуб		= СписСуммаРуб;
//						Регистр.КнигаПокупок.СуммаНДС		= СписСуммаНДС;
//						Регистр.КнигаПокупок.СуммаНП	    = СписСуммаНП;
//						
//						Регистр.КнигаПокупок.КодОперации    = глКО.Прочее;
//						Регистр.КнигаПокупок.ДокументОплаты	= Запрос.Документ;
//						
//					    Регистр.КнигаПокупок.ЗаписьДополнительногоЛиста = 0;
//						Регистр.КнигаПокупок.КорректируемыйПериод       = Дата(0);  
//						
//						Регистр.КнигаПокупок.ДвижениеРасходВыполнить();
//						Регистр.КнигаПокупок.ДвижениеПриходВыполнить();
//						
//						// Уберем итоги из книги продаж
//						Регистр.КнигаПродаж.КредДокумент    = ТИКнигаПродаж.КредДокумент;
//						Регистр.КнигаПродаж.ВидДолга		= ТИКнигаПродаж.ВидДолга;
//						Регистр.КнигаПродаж.СтавкаНДС		= ТИКнигаПродаж.СтавкаНДС;
//						
//						Регистр.КнигаПродаж.СуммаРуб		= СписСуммаРуб;
//						Регистр.КнигаПродаж.СуммаНДС		= СписСуммаНДС;
//						Регистр.КнигаПродаж.СуммаНП	        = СписСуммаНП;
//						
//					                                                                 
//						// Надо прописать ставку НП. Важно для розничной выручки
//						Если ТИКнигаПродаж.КредДокумент.Вид() = "ПКО" Тогда
//							СтавкаНП = ?(ТИКнигаПродаж.КредДокумент.ОблагаетсяНП = 0,
//							             ПолучитьПустоеЗначение("Справочник.СтавкиНП"),
//										 ТИКнигаПродаж.КредДокумент.СтавкаНП
//										);
//						    Регистр.КнигаПродаж.СтавкаНП 	= СтавкаНП;
//						КонецЕсли;
//						Регистр.КнигаПродаж.КодОперации     = глКО.Прочее;
//						Регистр.КнигаПродаж.ДокументОплаты	= Запрос.Документ;
//						                                             
//					    Регистр.КнигаПродаж.ЗаписьДополнительногоЛиста = 0;
//						Регистр.КнигаПродаж.КорректируемыйПериод       = Дата(0);  
//						
//						Регистр.КнигаПродаж.ДвижениеПриходВыполнить();
//						
//						ОстПогСуммаРуб = ОстПогСуммаРуб - СписСуммаРуб;
//					КонецЕсли; // есть что списывать
//				КонецЦикла; // по строкам таблицы итогов КП
//			КонецЦикла; // по виду долга
//		КонецЦикла; // по тек документу
//	КонецЦикла;// по кред. документу
//	
КонецПроцедуры // ПроведениеПоСторноАвансов()


//******************************************************************************
// ПроведениеПоПоступлению(ВремКнигаПокупок)
//
// Параметры:
//  ВремКнигаПокупок
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Здесь можно перечислить элементы диалога.
//
// Описание:
//  Осуществляет принятие к вычету счетов-фактур, выставленных поставщиками в текущем
// месяце
//
Процедура ПроведениеПоПоступлению()
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;
//	
//	// отбираем движения регистров, выбирая те из них, которые должны 
//	// быть включены в книгу продаж.
//	ДатаНачала = НачалоПериода;
//	
//	// определение периода построения запросов
//	Если ИтогиАктуальны() = 1 Тогда
//		ПериодПо = "";
//	Иначе       
//		ТекДок = ТекущийДокумент();
//		ПериодПо = "по ТекДок";
//	КонецЕсли;         
//    
//	СписокНеНужныхВидовДолга = СоздатьОбъект("СписокЗначений");
//	СписокНеНужныхВидовДолга.ДобавитьЗначение(глВД.Аванс);
//	
//	КодОперацииСуммоваяРазница = глКО.СуммоваяРазница;
//
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|Период с ДатаНачала "+ ПериодПо+"; 
//	|ФирмаРег               = Регистр.КнигаПокупок.КредДокумент.Фирма;
//	|ВидДолга               = Регистр.КнигаПокупок.ВидДолга;
//	|КредДокумент           = Регистр.КнигаПокупок.КредДокумент;
//	|ДокументОплаты         = Регистр.КнигаПокупок.ДокументОплаты;
//	|ТекДокумент            = Регистр.КнигаПокупок.ТекущийДокумент;
//	|СтавкаНДС              = Регистр.КнигаПокупок.СтавкаНДС;
//	|СуммаРуб               = Регистр.КнигаПокупок.СуммаРуб;
//	|СуммаНДС               = Регистр.КнигаПокупок.СуммаНДС;
//	|СуммаНП                = Регистр.КнигаПокупок.СуммаНП;
//	|КодОперации            = Регистр.КнигаПокупок.КодОперации;
//	|Функция СуммаРубРасход = Расход(СуммаРуб);
//	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
//	|Функция СуммаНДСКонОст = КонОст(СуммаНДС);
//	|Функция СуммаНПКонОст  = КонОст(СуммаНП);
//	|Функция СуммаРубОтг    = Расход(СуммаРуб) Когда (КодОперации <> КодОперацииСуммоваяРазница);
//	|Функция СуммаНДСОтг    = Расход(СуммаНДС) Когда (КодОперации <> КодОперацииСуммоваяРазница);
//	|Функция СуммаНПОтг     = Расход(СуммаНП)  Когда (КодОперации <> КодОперацииСуммоваяРазница);
//	|Функция СуммаРубСР     = Расход(СуммаРуб) Когда (КодОперации =  КодОперацииСуммоваяРазница);
//	|Функция СуммаНДССР     = Расход(СуммаНДС) Когда (КодОперации =  КодОперацииСуммоваяРазница);
//	|Функция СуммаНПСР      = Расход(СуммаНП)  Когда (КодОперации =  КодОперацииСуммоваяРазница);
//	|Группировка 	КредДокумент;
//	|Группировка 	ВидДолга;
//	|Группировка 	СтавкаНДС;
//	|Группировка 	ДокументОплаты;
//	|Условие (ФирмаРег 	= Фирма);
//	|Условие (Не(ВидДолга в СписокНеНужныхВидовДолга));
//	|Условие (КредДокумент.ДатаДок >= глНачало2006года);
//	|";
//	
//	Если ФормироватьТолькоПоДокументамПоступления = 1 Тогда
//		ТекстЗапроса = ТекстЗапроса + "Условие (ТекДокумент = КредДокумент);
//	|";
//	
//	КонецЕсли;
//	
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;          
//	
//    НайденнаяСФ = "";            
//		
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//		
//		Если Запрос.КредДокумент.Вид() <> "ВозвратПоставщику" Тогда
//			Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//		КонецЕсли;
//		
//    	Пока Запрос.Группировка("ВидДолга") = 1 Цикл           
//	    	Пока Запрос.Группировка("СтавкаНДС") = 1 Цикл           
//				                                                      
//				Пока Запрос.Группировка("ДокументОплаты")=1 Цикл
//					Если (Запрос.СуммаРубКонОст <> 0) И (ФормироватьТолькоПоДокументамПоступления = 0) 
//					 ИЛИ  (Запрос.СуммаРубОтг <> 0) И (ФормироватьТолькоПоДокументамПоступления = 1) Тогда     
//					
//						Регистр.КнигаПокупок.КредДокумент = Запрос.КредДокумент;
//						Регистр.КнигаПокупок.ВидДолга	  = Запрос.ВидДолга;
//						Регистр.КнигаПокупок.СтавкаНДС	  = Запрос.СтавкаНДС;
//						
//						Регистр.КнигаПокупок.КодОперации  = глКО.Прочее;
//
//						Если ПустоеЗначение(Запрос.ДокументОплаты)=1 Тогда
//							Регистр.КнигаПокупок.ДокументОплаты            = ТекущийДокумент();   
//						Иначе
//							Регистр.КнигаПокупок.ДокументОплаты            = Запрос.ДокументОплаты;   
//						КонецЕсли;                                             
//						
//						Если ФормироватьТолькоПоДокументамПоступления = 1 Тогда
//						
//							Регистр.КнигаПокупок.СуммаРуб	  =  - Запрос.СуммаРубСР;
//							Регистр.КнигаПокупок.СуммаНДС	  =  - Запрос.СуммаНДССР;
//							Регистр.КнигаПокупок.СуммаНП	  =  - Запрос.СуммаНПСР;
//							
//							// Доп. листы формируются начиная с мая 2006 года
//							Если (Регистр.КнигаПокупок.СуммаРуб < 0) И (ДатаДок >= НачМесяца(глДатаПостановления283))  Тогда
//							    Регистр.КнигаПокупок.ЗаписьДополнительногоЛиста = 1;
//								Регистр.КнигаПокупок.КорректируемыйПериод       = Запрос.КредДокумент.ДатаДок;  
//							Иначе
//							    Регистр.КнигаПокупок.ЗаписьДополнительногоЛиста = 0;
//								Регистр.КнигаПокупок.КорректируемыйПериод       = Дата(0);  
//							КонецЕсли;
//
//							Регистр.КнигаПокупок.ДвижениеРасходВыполнить();         
//							
//							Регистр.КнигаПокупок.СуммаРуб	  = Запрос.СуммаРубОтг;
//							Регистр.КнигаПокупок.СуммаНДС	  = Запрос.СуммаНДСОтг;
//							Регистр.КнигаПокупок.СуммаНП	  = Запрос.СуммаНПОтг;
//							
//							Регистр.КнигаПокупок.ДвижениеПриходВыполнить();         
//							
//						Иначе
//							Регистр.КнигаПокупок.СуммаРуб	  = - Запрос.СуммаРубКонОст;
//							Регистр.КнигаПокупок.СуммаНДС	  = - Запрос.СуммаНДСКонОст;
//							Регистр.КнигаПокупок.СуммаНП	  = - Запрос.СуммаНПКонОст;
//							
//							// Доп. листы формируются начиная с мая 2006 года
//							Если (Регистр.КнигаПокупок.СуммаРуб < 0) И (ДатаДок >= НачМесяца(глДатаПостановления283))  Тогда
//							    Регистр.КнигаПокупок.ЗаписьДополнительногоЛиста = 1;
//								Регистр.КнигаПокупок.КорректируемыйПериод       = Запрос.КредДокумент.ДатаДок;  
//							Иначе
//							    Регистр.КнигаПокупок.ЗаписьДополнительногоЛиста = 0;
//								Регистр.КнигаПокупок.КорректируемыйПериод       = Дата(0);  
//							КонецЕсли;
//
//							Регистр.КнигаПокупок.ДвижениеПриходВыполнить();         
//						КонецЕсли;
//						
//					КонецЕсли
//				КонецЦикла;
//				
//			КонецЦикла; // по ставке НДС
//		КонецЦикла; // по виду долга
//	КонецЦикла;// по кред. документу
//	
КонецПроцедуры // ПроведениеПоПоступлению()

//******************************************************************************
// ПроведениеПоВозвратамПереходногоПериода(ВремКнигаПокупок)
//
// Параметры:
//  ВремКнигаПокупок
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Здесь можно перечислить элементы диалога.
//
// Описание:
// Сторнирует суммы, принятые к вычету по счетам фактурам, выписанным до 2005 года
//
Процедура ПроведениеПоВозвратамПереходногоПериода()
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;
//	
//	// отбираем движения регистров, выбирая те из них, которые должны 
//	// быть включены в книгу продаж.
//	ДатаНачала = НачалоПериода;
//	
//	// определение периода построения запросов
//	Если ИтогиАктуальны() = 1 Тогда
//		ПериодПо = "";
//	Иначе       
//		ТекДок = ТекущийДокумент();
//		ПериодПо = "по ТекДок";
//	КонецЕсли;         
//    
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|Период с ДатаНачала "+ ПериодПо+"; 
//	|ФирмаРег               = Регистр.КнигаПокупок.КредДокумент.Фирма;
//	|ВидДолга               = Регистр.КнигаПокупок.ВидДолга;
//	|КредДокумент           = Регистр.КнигаПокупок.КредДокумент;
//	|СтавкаНДС              = Регистр.КнигаПокупок.СтавкаНДС;
//	|СуммаРуб               = Регистр.КнигаПокупок.СуммаРуб;
//	|СуммаНДС               = Регистр.КнигаПокупок.СуммаНДС;
//	|СуммаНП                = Регистр.КнигаПокупок.СуммаНП;
//	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
//	|Функция СуммаНДСКонОст = КонОст(СуммаНДС);
//	|Функция СуммаНПКонОст  = КонОст(СуммаНП);
//	|Группировка 	КредДокумент;
//	|Группировка 	ВидДолга;
//	|Группировка 	СтавкаНДС;
//	|Условие (ФирмаРег 	= Фирма);
//	|//Условие (CуммаРубКонОст 	> 0);
//	|Условие (КредДокумент.ДатаДок < глНачало2006года);
//	|";
//
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;  
//	
//    НайденнаяСФ = "";            
//		
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//		
//		Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//		
//    	Пока Запрос.Группировка("ВидДолга") = 1 Цикл           
//	    	Пока Запрос.Группировка("СтавкаНДС") = 1 Цикл           
//				                                                      
//				Если Запрос.СуммаРубКонОст > 0 Тогда     
//					
//					Регистр.КнигаПокупок.КредДокумент = Запрос.КредДокумент;
//					Регистр.КнигаПокупок.ВидДолга	  = Запрос.ВидДолга;
//					Регистр.КнигаПокупок.СтавкаНДС	  = Запрос.СтавкаНДС;
//							
//					Регистр.КнигаПокупок.СуммаРуб	  = - Запрос.СуммаРубКонОст;
//					Регистр.КнигаПокупок.СуммаНДС	  = - Запрос.СуммаНДСКонОст;
//					Регистр.КнигаПокупок.СуммаНП	  = - Запрос.СуммаНПКонОст;
//					Регистр.КнигаПокупок.КодОперации  = глКО.Прочее;     
//					
//					Регистр.КнигаПокупок.ДокументОплаты            = ТекущийДокумент();
//				    				    
//					Регистр.КнигаПокупок.ДвижениеПриходВыполнить();         
//					
//				КонецЕсли
//				
//			КонецЦикла; // по ставке НДС
//		КонецЦикла; // по виду долга
//	КонецЦикла;// по кред. документу
//	
КонецПроцедуры // ПроведениеПоВозвратамПереходногоПериода()

//******************************************************************************
// ПроведениеВРавныхДолях()
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Здесь можно перечислить элементы диалога.
//
// Описание:
//  Осуществляет принятие к вычету счетов-фактур поставщиков, не оплаченных до 01.01.2006
// равными долям в первом полугодии 2006 года.
//
Процедура ПроведениеВРавныхДолях()
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;   
//	
//	Запрос = СоздатьОбъект("Запрос");
//	                                                                         
//	ДатаНачала    = НачалоПериода; 
//	ДатаОкончания = Мин(КонецПериода, ПолучитьДатуТА());
//	НомерМесяца   = ДатаМесяц(ДатаДок);
//	
//	ТекстЗапроса = "
//	|Период с глНачало2006Года По ДатаОкончания;
//	|ФирмаРег          = Регистр.КнигаПокупок.КредДокумент.Фирма;
//	|КредДокумент      = Регистр.КнигаПокупок.КредДокумент;
//	|ДокументОплаты    = Регистр.КнигаПокупок.ДокументОплаты;
//	|ДатаОплаты        = Регистр.КнигаПокупок.ДокументОплаты.ДатаДок;
//	|СтавкаНДС         = Регистр.КнигаПокупок.СтавкаНДС;
//	|ВидДолга          = Регистр.КнигаПокупок.ВидДолга;
//	|СуммаРуб          = Регистр.КнигаПокупок.СуммаРуб;
//	|СуммаНДС          = Регистр.КнигаПокупок.СуммаНДС;
//	|СуммаНП           = Регистр.КнигаПокупок.СуммаНП;
//	|Группировка КредДокумент;
//	|Группировка СтавкаНДС Упорядочить по СтавкаНДС.Наименование;
//	|Группировка ВидДолга;
//	|Функция СуммаРубНачОст = НачОст(СуммаРуб);
//	|Функция СуммаНДСНачОст = НачОст(СуммаНДС);
//	|Функция СуммаНПНачОст  = НачОст(СуммаНП);
//	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
//	|Функция СуммаНДСКонОст = КонОст(СуммаНДС);
//	|Функция СуммаНПКонОст  = КонОст(СуммаНП);
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие (КредДокумент.ДатаДок < глНачало2006Года);";
//	
//	Запрос.Выполнить(ТекстЗапроса);   
//	
//    НайденнаяСФ = "";                
//	
//	ТЗПоКредДокументам = СоздатьОбъект("ТаблицаЗначений");
//	ТЗДвиженийПоОплате.Выгрузить(ТЗПоКредДокументам);
//	ТЗПоКредДокументам.Свернуть("КредДокумент", "СуммаРуб, СуммаНДС, СуммаНП");
//	
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//		Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//			Продолжить;
//		КонецЕсли;  
//		                                                     
//		СуммаРубВРавныхДоляхПоДокументу = - Запрос.СуммаРубНачОст / 6;
//	
//		СуммаРубВРавныхДоляхПоДокументуБезОплаты = СуммаРубВРавныхДоляхПоДокументу;
//		
//		НомСтроки = "";
//		Если ТЗПоКредДокументам.НайтиЗначение(Запрос.КредДокумент, НомСтроки, "КредДокумент") = 1 Тогда
//			
//			ТЗПоКредДокументам.ПолучитьСтрокуПоНомеру(НомСтроки);
//		
//			СуммаРубВРавныхДоляхПоДокументуБезОплаты = СуммаРубВРавныхДоляхПоДокументу - ТЗПоКредДокументам.СуммаРуб;
//			
//		КонецЕсли;
//		
//		СуммаРубВРавныхДоляхПоДокументуБезОплаты = Макс(СуммаРубВРавныхДоляхПоДокументуБезОплаты, 0);
//		
//	    Пока Запрос.Группировка("СтавкаНДС") = 1 Цикл
//	        Пока Запрос.Группировка("ВидДолга") = 1 Цикл  
//				
//	            СуммаРубПоОплате = 0;
//				СуммаНДСПоОплате = 0;
//				СуммаНППоОплате  = 0;
//				ТЗДвиженийПоОплате.Свернуть("КредДокумент, СтавкаНДС, ВидДолга", "СуммаРуб, СуммаНДС, СуммаНП");  
//				Для Сч = 1 по ТЗДвиженийПоОплате.КоличествоСтрок() Цикл         
//					ТЗДвиженийПоОплате.ПолучитьСтрокуПоНомеру(Сч);
//				    Если (ТЗДвиженийПоОплате.КредДокумент = Запрос.КредДокумент)  
//					   И (ТЗДвиженийПоОплате.СтавкаНДС = Запрос.СтавкаНДС) 
//					   И (ТЗДвиженийПоОплате.ВидДолга = Запрос.ВидДолга) Тогда
//				            СуммаРубПоОплате = ТЗДвиженийПоОплате.СуммаРуб;
//							СуммаНДСПоОплате = ТЗДвиженийПоОплате.СуммаНДС;
//							СуммаНППоОплате  = ТЗДвиженийПоОплате.СуммаНП;
//				    КонецЕсли;
//				КонецЦикла;
//				
//				СуммаРубКЗачету = Мин(Мин((-Запрос.СуммаРубКонОст), Макс(СуммаРубВРавныхДоляхПоДокументу - СуммаРубПоОплате, 0)), СуммаРубВРавныхДоляхПоДокументуБезОплаты);
//				
//				КоэффСписания = ?(Запрос.СуммаРубКонОст = 0, 0, (СуммаРубКЗачету / (-Запрос.СуммаРубКонОст)));
//				
//				СуммаНДСКЗачету = (-Запрос.СуммаНДСКонОст) * КоэффСписания;
//				СуммаНПКЗачету  = (-Запрос.СуммаНПКонОст)  * КоэффСписания;
//				                                                    
//				Если (СуммаРубКЗачету > 0) ИЛИ (СуммаНДСКЗачету > 0) Тогда  
//					
//					Регистр.КнигаПокупок.КредДокумент   = Запрос.КредДокумент;
//					Регистр.КнигаПокупок.ВидДолга		= Запрос.ВидДолга;
//					Регистр.КнигаПокупок.СтавкаНДС		= Запрос.СтавкаНДС;
//					
//					Регистр.КнигаПокупок.СуммаРуб		= СуммаРубКЗачету;
//					Регистр.КнигаПокупок.СуммаНДС		= СуммаНДСКЗачету;
//					Регистр.КнигаПокупок.СуммаНП	    = СуммаНПКЗачету;
//					Регистр.КнигаПокупок.КодОперации    = глКО.Прочее;
//
//					Регистр.КнигаПокупок.ЗаписьДополнительногоЛиста = 0;
//					Регистр.КнигаПокупок.КорректируемыйПериод       = Дата(0);  
//					
//					Регистр.КнигаПокупок.ДокументОплаты = ТекущийДокумент();
//					Регистр.КнигаПокупок.ДвижениеПриходВыполнить();         
//					
//					СуммаРубВРавныхДоляхПоДокументуБезОплаты = СуммаРубВРавныхДоляхПоДокументуБезОплаты - СуммаРубКЗачету;
//					СуммаНДСВРавныхДоляхПоДокументуБезОплаты = СуммаНДСВРавныхДоляхПоДокументуБезОплаты - СуммаНДСКЗачету;
//					СуммаНПВРавныхДоляхПоДокументуБезОплаты  = СуммаНПВРавныхДоляхПоДокументуБезОплаты  - СуммаНПКЗачету; 
//					
//					СуммаРубВРавныхДоляхПоДокументу = СуммаРубВРавныхДоляхПоДокументу - СуммаРубКЗачету;
//					СуммаНДСВРавныхДоляхПоДокументу = СуммаНДСВРавныхДоляхПоДокументу - СуммаНДСКЗачету;
//					СуммаНПВРавныхДоляхПоДокументу  = СуммаНПВРавныхДоляхПоДокументу  - СуммаНПКЗачету; 
//				КонецЕсли;
//				
//	        КонецЦикла;
//	    КонецЦикла;
//	КонецЦикла;
//	
КонецПроцедуры // ПроведениеВРавныхДолях
	
//******************************************************************************
// ПроведениеПоОплате(ВремКнигаПокупок)
//
// Параметры:
//  ВремКнигаПокупок
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоОплате(ВремКнигаПокупок)
	
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачала, ПериодПо, ТекДок;
	Перем СписокНужныхКодов, СписокНужныхВидовДолга;
//   	
//	// отбираем движения регистров (различных), выбирая те из них, которые должны 
//	// быть включены в книгу покупок.
//	// Регистры могут быть самые разные - Поставщики, Подотчетники, да и сама КнигаПокупок
//	
//	ДатаНачала = НачалоПериода;
//	
//	// определение периода построения запросов
//	Если ИтогиАктуальны() = 1 Тогда
//		ПериодПо = "";
//	Иначе       
//		ТекДок = ТекущийДокумент();
//		ПериодПо = "по ТекДок";
//	КонецЕсли;  
//		
//	// движения по покупателям, включаемые в книгу покупок
//	СписокНужныхКодов = СоздатьОбъект("СписокЗначений");
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ОплатаПоставщику);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ОплатаПоставщикуВал);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ЗачтенАвансПоставщику);	
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ЗачтенАвансПоставщикуВал);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.АвансовыйОтчет); // оплата поставщику подотчетником
//	СписокНужныхКодов.ДобавитьЗначение(глКО.АвансовыйОтчетВал); // оплата поставщику подотчетником
//	СписокНужныхКодов.ДобавитьЗначение(глКО.Прочее); // оплата прочими средствами
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ЗачтенВозвратПоставщику);
//	СписокНужныхКодов.ДобавитьЗначение(глКО.ВводОстатков);
//	
//	СписокНужныхВидовДолга = СоздатьОбъект("СписокЗначений");
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаТовары);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаУслуги);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаРаботы);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаМатериалы);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.Прочее);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаОС);
//	СписокНужныхВидовДолга.ДобавитьЗначение(глВД.ДолгЗаНМА);
//	
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|Период с ДатаНачала "+ ПериодПо+";
//	|ФирмаРег 	       = Регистр.Поставщики.Фирма;
//	|ВидДолга 	       = Регистр.Поставщики.ВидДолга;
//	|КредДокумент 	   = Регистр.Поставщики.КредДокумент;
//	|ДокументОплаты    = Регистр.Поставщики.ДокументОплаты;
//	|ТекДокумент 	   = Регистр.Поставщики.ТекущийДокумент;
//	|СуммаРуб 	       = Регистр.Поставщики.СуммаРуб;
//	|КодОперации       = Регистр.Поставщики.КодОперации;
//	|Функция СуммаРубПриход = Приход(СуммаРуб);
//	|Группировка 	КредДокумент;
//	|Группировка 	ДокументОплаты;
//	|Группировка 	ВидДолга;
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие	(КодОперации 	в СписокНужныхКодов);
//	|Условие	(ВидДолга 		в СписокНужныхВидовДолга);
//	|Условие	(КредДокумент.ДатаДок < глНачало2006Года);
//	|"//}}ЗАПРОС
//	;
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;                                   
//	
//    НайденнаяСФ = "";            
//	ТИКнигаПокупок = СоздатьОбъект("ТаблицаЗначений");                
//	
//	ТЗДвиженийПоОплате = СоздатьОбъект("ТаблицаЗначений");
//	ТЗДвиженийПоОплате.НоваяКолонка("КредДокумент");
//	ТЗДвиженийПоОплате.НоваяКолонка("ВидДолга");
//	ТЗДвиженийПоОплате.НоваяКолонка("СтавкаНДС");
//	ТЗДвиженийПоОплате.НоваяКолонка("СуммаРуб");
//	ТЗДвиженийПоОплате.НоваяКолонка("СуммаНДС");
//	ТЗДвиженийПоОплате.НоваяКолонка("СуммаНП");
//
//	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
//		Если ПроверкаСФДокумента(Запрос.КредДокумент,НайденнаяСФ) = 0 Тогда
//			Продолжить;
//		КонецЕсли;
//	    Пока Запрос.Группировка("ДокументОплаты") = 1 Цикл
//        	Пока Запрос.Группировка("ВидДолга") = 1 Цикл
//				ВремКнигаПокупок.УстановитьЗначениеФильтра("КредДокумент",Запрос.КредДокумент,1);
//				ВремКнигаПокупок.УстановитьЗначениеФильтра("ВидДолга",    Запрос.ВидДолга,    1);
//				
//				ВремКнигаПокупок.ВыгрузитьИтоги(ТИКнигаПокупок,1,1);      
//				ОстПогСуммаРуб = Запрос.СуммаРубПриход; // сумма оплаты  
//				
//				ТИКнигаПокупок.ВыбратьСтроки();
//				Пока (ТИКнигаПокупок.ПолучитьСтроку() = 1)
//				и    (ОстПогСуммаРуб <> 0)
//				Цикл
//					
//					Если ОстПогСуммаРуб < 0 Тогда
//						СписСуммаРуб = Мин(0,Макс(-ТИКнигаПокупок.СуммаРуб,ОстПогСуммаРуб));
//					Иначе    
//						СписСуммаРуб = Макс(0,Мин(-ТИКнигаПокупок.СуммаРуб,ОстПогСуммаРуб));
//					КонецЕсли;
//					Если СписСуммаРуб <> 0 Тогда
//						КоэффСпис    = ?(ТИКнигаПокупок.СуммаРуб = 0,0,СписСуммаРуб/(-ТИКнигаПокупок.СуммаРуб));
//						СписСуммаНДС = Окр(-ТИКнигаПокупок.СуммаНДС * КоэффСпис,2,1);
//						СписСуммаНП  = Окр(-ТИКнигаПокупок.СуммаНП  * КоэффСпис,2,1);
//						
//						Регистр.КнигаПокупок.КредДокумент   = ТИКнигаПокупок.КредДокумент;
//						Регистр.КнигаПокупок.ВидДолга		= ТИКнигаПокупок.ВидДолга;
//						Регистр.КнигаПокупок.СтавкаНДС		= ТИКнигаПокупок.СтавкаНДС;
//						
//						Регистр.КнигаПокупок.СуммаРуб		= СписСуммаРуб;
//						Регистр.КнигаПокупок.СуммаНДС		= СписСуммаНДС;
//						Регистр.КнигаПокупок.СуммаНП	    = СписСуммаНП;
//						
//						Регистр.КнигаПокупок.КодОперации    = глКО.Прочее;
//						
//						// Для того чтобы док-нт Сторно попал в книгу, сделаем его документом оплаты
//						Если Запрос.ТекДокумент.Вид() = "Сторно" Тогда
//							Регистр.КнигаПокупок.ДокументОплаты	= Запрос.ТекДокумент;
//						Иначе    
//							Регистр.КнигаПокупок.ДокументОплаты	= Запрос.ДокументОплаты;
//						КонецЕсли;
//						
//					    Регистр.КнигаПокупок.ЗаписьДополнительногоЛиста = 0;
//						Регистр.КнигаПокупок.КорректируемыйПериод       = Дата(0);  
//						
//						Регистр.КнигаПокупок.ДвижениеПриходВыполнить();
//						
//						ТЗДвиженийПоОплате.НоваяСтрока();
//						ТЗДвиженийПоОплате.КредДокумент = ТИКнигаПокупок.КредДокумент;
//						ТЗДвиженийПоОплате.ВидДолга		= ТИКнигаПокупок.ВидДолга;
//						ТЗДвиженийПоОплате.СтавкаНДС	= ТИКнигаПокупок.СтавкаНДС;
//						
//						ТЗДвиженийПоОплате.СуммаРуб		= СписСуммаРуб;
//						ТЗДвиженийПоОплате.СуммаНДС		= СписСуммаНДС;
//						ТЗДвиженийПоОплате.СуммаНП	    = СписСуммаНП;
//
//						ОстПогСуммаРуб = ОстПогСуммаРуб - СписСуммаРуб; 
//						
//					КонецЕсли; // есть что списывать
//				КонецЦикла; // по строкам таблицы итогов КП
//			КонецЦикла; // по виду долга
//		КонецЦикла; // по тек документу
//	КонецЦикла;// по кред. документу
//
КонецПроцедуры // ПроведениеПоРегистрам()

//******************************************************************************
// ПроведениеПоПодотчетнымЛицам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//                  
Процедура ПроведениеПоПодотчетнымЛицам(ВремКнигаПокупок)
//	
//	ДатаНачала = НачалоПериода;
//	
//	// определение периода построения запросов
//	Если ИтогиАктуальны() = 1 Тогда
//		ПериодПо = "";
//	Иначе       
//		ТекДок = ТекущийДокумент();
//		ПериодПо = "по ТекДок";
//	КонецЕсли;  
//	
//	// движения по подотчетным лицам, включаемые в книгу покупок
//	СписокНужныхКодов = СоздатьОбъект("СписокЗначений");
//	СписокНужныхКодов.ДобавитьЗначение(глКО.АвансовыйОтчет); 
//	СписокНужныхКодов.ДобавитьЗначение(глКО.АвансовыйОтчетВал); 
//	// зачитываем сразу в момент получения авансового отчета о закупленных ТМЦ
//	
//	//Создание объекта типа Запрос
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(Сформировать)
//	|Период с ДатаНачала "+ ПериодПо+";
//	|ФирмаРег 		= Регистр.ПодотчетныеЛица.Фирма;
//	|СуммаРуб 		= Регистр.ПодотчетныеЛица.СуммаРуб;
//	|КодОперации 	= Регистр.ПодотчетныеЛица.КодОперации;
//	|Функция СуммаРубРасход = Расход(СуммаРуб);
//	|Группировка 	Документ;
//	|Условие	(ФирмаРег 	= Фирма);
//	|Условие	(КодОперации 	в СписокНужныхКодов);
//	|"//}}ЗАПРОС
//	;
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;                                   
//	
//    НайденнаяСФ = "";            
//	ТИКнигаПокупок = СоздатьОбъект("ТаблицаЗначений");
//		
//	Пока Запрос.Группировка("Документ") = 1 Цикл
//		ВремКнигаПокупок.УстановитьЗначениеФильтра("КредДокумент",Запрос.Документ,1);  
//		ВремКнигаПокупок.УстановитьЗначениеФильтра("ВидДолга",                   ,0); // нет фильтра
//		ВремКнигаПокупок.ВыгрузитьИтоги(ТИКнигаПокупок,1,1);      
//		
//		// если есть остаток по книге покупок - проверим выписку СФ
//		Если ТИКнигаПокупок.КоличествоСтрок() > 0 Тогда
//    		Если ПроверкаСФДокумента(Запрос.Документ,НайденнаяСФ) = 0 Тогда
//	    		Продолжить;
//		    КонецЕсли;
//		КонецЕсли;
//		     
//		ТИКнигаПокупок.ВыбратьСтроки();
//		ОстПогСуммаРуб = Запрос.СуммаРубРасход; // сумма авансового отчета
//
//		Пока (ТИКнигаПокупок.ПолучитьСтроку() = 1)
//		и    (ОстПогСуммаРуб <> 0)
//		Цикл
//			
//			СписСуммаРуб = Макс(0,Мин(-ТИКнигаПокупок.СуммаРуб,ОстПогСуммаРуб));
//			Если СписСуммаРуб <> 0 Тогда
//				КоэффСпис    = ?(ТИКнигаПокупок.СуммаРуб = 0,0,СписСуммаРуб/(-ТИКнигаПокупок.СуммаРуб));
//				СписСуммаНДС = Окр(-ТИКнигаПокупок.СуммаНДС * КоэффСпис,2,1);
//				СписСуммаНП  = Окр(-ТИКнигаПокупок.СуммаНП  * КоэффСпис,2,1);
//				
//				Регистр.КнигаПокупок.КредДокумент   = ТИКнигаПокупок.КредДокумент;
//				Регистр.КнигаПокупок.ВидДолга		= ТИКнигаПокупок.ВидДолга;
//				Регистр.КнигаПокупок.СтавкаНДС		= ТИКнигаПокупок.СтавкаНДС;
//				
//				Регистр.КнигаПокупок.СуммаРуб		= СписСуммаРуб;
//				Регистр.КнигаПокупок.СуммаНДС		= СписСуммаНДС;
//				Регистр.КнигаПокупок.СуммаНП	    = СписСуммаНП;
//				
//				Регистр.КнигаПокупок.КодОперации    = глКО.Прочее;
//				Регистр.КнигаПокупок.ДокументОплаты	= Запрос.Документ;
//				
//			    Регистр.КнигаПокупок.ЗаписьДополнительногоЛиста = 0;
//				Регистр.КнигаПокупок.КорректируемыйПериод       = Дата(0);  
//				
//				Регистр.КнигаПокупок.ДвижениеПриходВыполнить();
//				
//				ОстПогСуммаРуб = ОстПогСуммаРуб - СписСуммаРуб;
//			КонецЕсли; // есть что списывать
//		КонецЦикла; // по строкам таблицы итогов КП
//	КонецЦикла; // по тек документу   
//
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст,"Фирма")=0 Тогда
//		Возврат;
//	КонецЕсли;  
//	
//
//	ПоквартальныйУчет = Фирма.ЮрЛицо.УчитыватьНДСПоквартально.Получить(ДатаДок);
//	
//	Если ПоквартальныйУчет = 0 Тогда
//		НачалоПериода = НачМесяца(ДатаДок);
//		КонецПериода  = КонМесяца(ДатаДок);
//		
//	Иначе
//		НачалоПериода = НачКвартала(ДатаДок);
//		КонецПериода  = КонКвартала(ДатаДок);
//		
//	КонецЕсли;
//	
//	// проверим, не был ли уже проведен документ за этот месяц/квартал  по этой же фирме
//	ДокКП = СоздатьОбъект("Документ.КнигаПокупок");
//	ДокКП.ВыбратьДокументы(НачалоПериода,КонецПериода);
//	Пока ДокКП.ПолучитьДокумент()=1 Цикл
//	    Если (ДокКП.ТекущийДокумент()<>ТекущийДокумент()) и 
//			 (ДокКП.Проведен()=1) и
//			 (ДокКП.Фирма = Фирма) Тогда    
//			 	
//			Если ПоквартальныйУчет = 0 Тогда
//		        глНеПроводить(Контекст,"За " + Формат(ДатаДок, "Д ММММГГГГ")+
//				"по фирме """+Фирма.Наименование+
//				""" формирование книги покупок уже проведено ("+ДокКП.ТекущийДокумент()+")!");
//			Иначе
//		        глНеПроводить(Контекст,"За " + Формат(НачалоПериода, "Д ММММГГГГ") + " - " + Формат(КонецПериода, "Д ММММГГГГ") + 
//				" по фирме """+Фирма.Наименование+
//				""" формирование книги покупок уже проведено ("+ДокКП.ТекущийДокумент()+")!");
//			
//			КонецЕсли;
//			
//			Возврат;
//			
//	    КонецЕсли;
//	КонецЦикла;       	                     
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		
//		// Удаление движений по регистрам.
//		Для Номер = 1 По Метаданные.Регистр() Цикл
//			ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//		КонецЦикла;
//		
//		ВремРегистры = СоздатьОбъект("Регистры");
//		ВремКнигаПокупок = ВремРегистры.КнигаПокупок;
//		ВремКнигаПродаж  = ВремРегистры.КнигаПродаж;
//		
//		// при необходимости делаем временный расчет итогов
//		Если ИтогиАктуальны() = 0 Тогда      
//			Если ДатаДок = ПолучитьДатуТА() Тогда
//				ДатаРасчета = ПолучитьПозициюТА();
//			Иначе
//				ДатаРасчета = ДатаДок;
//			КонецЕсли;
//			ВремКнигаПокупок.ВременныйРасчет(1);
//			ВремКнигаПродаж.ВременныйРасчет(1);
//			ВремРегистры.Актуальность(1);
//			ВремРегистры.РассчитатьРегистрыПо(ДатаРасчета);
//		КонецЕсли;                    
//		
//		ПроведениеПоСторноАвансов(ВремКнигаПродаж);   
//		
//		Если ДатаДок < глНачало2006Года Тогда
//			ПроведениеПоОплате(ВремКнигаПокупок);   
//			ПроведениеПоПодотчетнымЛицам(ВремКнигаПокупок);
//		ИначеЕсли ЮрЛицо.МетодОпределенияВыручки.Получить(глНачало2006Года-1) = Перечисление.МетодыОпределенияВыручки.ПоОплате Тогда
//			ПроведениеПоПоступлению();
//			ПроведениеПоОплате(ВремКнигаПокупок);          
//		Иначе
//			ПроведениеПоПоступлению();   
//			Если ДатаДок < '01.07.2006' Тогда
//				ПроведениеПоОплате(ВремКнигаПокупок);   
//				ПроведениеВРавныхДолях();                
//				ПроведениеПоВозвратамПереходногоПериода();
//			КонецЕсли;                     
//		КонецЕсли;
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
////
//ДокПодч = СоздатьОбъект("Документ");   
