//******************************************************************************
// СписатьДолг(ОстПогСуммаВал, ОстПогСуммаНП, КоэффПогашения, ТаблИтогов, ТаблДолгов, ТаблДокумента)
//
// Параметры: 
//  ОстПогСуммаВал - остаток суммы погашения взаиморасчетов в валюте взаиморасчетов, 
//  ОстПогСуммаНП  - остаток суммы погашения НП в рублях,            
//  КоэффПогашения - Коэффициент, определяет какую часть долга надо списать
//  ТаблИтогов     - ТЗ ипогашаемых итогов регшистра,
//  ТаблДолгов     - ТЗ списываемых долгов для их дальнейшего начисления
//  ТаблДокумента  - ТЗ строк документа, свернутая по КредДок и СтавкаНП
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Гасит старые долги по одной строке ТаблИтогов
//
Процедура СписатьДолг(ОстПогСуммаВал, ОстПогСуммаНП, КоэффПогашения, ТаблИтогов, ТаблДолгов, ТаблДокумента)
//	
//   	Если ТаблИтогов.СуммаВал >= ОстПогСуммаВал Тогда 
//		// остаток долга больше, чем нам надо списать
//		ПогаситьВал = ОстПогСуммаВал;
//	Иначе
//		ПогаситьВал = ТаблИтогов.СуммаВал;
//	КонецЕсли;
//	
//	КоррСуммаНП = ОстПогСуммаНП; 
//	Если КодОперации = глКО.КорректировкаОтгрузкиСторнированиеНП Тогда
//		ПогаситьНП  = Окр(ТаблИтогов.СуммаНП * КоэффПогашения,2,1);;
//	Иначе // надо не гасить, а начислять
//		ПогаситьНП  = 0;
//	КонецЕсли;
//		
//	ПогаситьУпр           = Окр(ТаблИтогов.СуммаУпр      * КоэффПогашения,2,1);
//	ПогаситьРуб           = Окр(ТаблИтогов.СуммаРуб      * КоэффПогашения,2,1);
//	ПогаситьСебестоимость = Окр(ТаблИтогов.Себестоимость * КоэффПогашения,2,1);
//	
//	Регистр.Покупатели.Фирма            = ТаблИтогов.Фирма;
//	Регистр.Покупатели.Договор          = ТаблИтогов.Договор;
//	Регистр.Покупатели.СтавкаНП         = ТаблИтогов.СтавкаНП;
//	Регистр.Покупатели.ВидДолга	        = ТаблИтогов.ВидДолга;
//	Регистр.Покупатели.КредДокумент     = ТаблИтогов.КредДокумент;
//	
//	// реквизиты
//	Регистр.Покупатели.ДоговорКомитента	= "";
//	Регистр.Покупатели.ДокументОплаты   = "";
//	Регистр.Покупатели.КодОперации      = КодОперации;
//	
//	// ресурсы  
//	Регистр.Покупатели.СуммаВал			= (-1) * ПогаситьВал;
//	Регистр.Покупатели.СуммаУпр			= (-1) * ПогаситьУпр; 
//	Регистр.Покупатели.СуммаРуб			= (-1) * ПогаситьРуб; 
//	Регистр.Покупатели.Себестоимость	= (-1) * ПогаситьСебестоимость; 
//	Регистр.Покупатели.СуммаНП			= (-1) * ПогаситьНП;
//	
//	Регистр.Покупатели.ДвижениеПриходВыполнить(); 
//	
//	ОстПогСуммаВал = ОстПогСуммаВал - ПогаситьВал; 
//	ОстПогСуммаНП  = ОстПогСуммаНП  - ПогаситьНП; // если надо начислять, то отнимем 0
//
//	// Теперь распределим списываемый долг по книге продаж
//	// и разобьем начисляемый долг по ставкам НДС
//	ТаблДвижений = СоздатьОбъект("ТаблицаЗначений");
//	ТаблДвижений.НоваяКолонка ("СтавкаНДС");
//	ТаблДвижений.НоваяКолонка ("СтавкаНП");
//	ТаблДвижений.НоваяКолонка ("СуммаРуб");
//	ТаблДвижений.НоваяКолонка ("СуммаНДС");
//	ТаблДвижений.НоваяКолонка ("СуммаНП");
//	ТаблДвижений.НоваяКолонка ("КодОперации");
//	ТаблДвижений.НоваяКолонка ("ДокументОплаты");
//			                            
//	ОстПогКПСуммаВал      = ПогаситьВал;
//	ОстПогКПСуммаУпр      = ПогаситьУпр;
//	ОстПогКПСуммаРуб      = ПогаситьРуб;
//	ОстПогКПСебестоимость = ПогаситьСебестоимость;
//	ОстКоррСуммаНП        = КоррСуммаНП;          
//	
//	ВремКнига = СоздатьОбъект("Регистр.КнигаПродаж");
//	ВремКнига.ВыбратьДвиженияДокумента(ТаблИтогов.КредДокумент);
//	Пока ВремКнига.ПолучитьДвижение() = 1 Цикл
//		Если (ВремКнига.Приход   = 1)
//		   и (ВремКнига.ВидДолга = ТаблИтогов.ВидДолга)
//		   и (ВремКнига.СтавкаНП = ТаблИтогов.СтавкаНП) Тогда
//			ТаблДвижений.НоваяСтрока();
//			ТаблДвижений.СтавкаНДС      = ВремКнига.СтавкаНДС;
//			ТаблДвижений.СтавкаНП       = ВремКнига.СтавкаНП;
//			ТаблДвижений.СуммаРуб       = Окр(ВремКнига.СуммаРуб * КоэффПогашения,2,1);
//			ТаблДвижений.СуммаНДС       = Окр(ВремКнига.СуммаНДС * КоэффПогашения,2,1);
//			ТаблДвижений.СуммаНП        = Окр(ВремКнига.СуммаНП  * КоэффПогашения,2,1);
//			ТаблДвижений.КодОперации    = ВремКнига.КодОперации;
//			ТаблДвижений.ДокументОплаты = ВремКнига.ДокументОплаты;
//		КонецЕсли;
//	КонецЦикла;     
//	
//	ИтогКП                = ТаблДвижений.Итог("СуммаРуб");
//	
//	ТаблДвижений.ВыбратьСтроки();
//	Пока ТаблДвижений.ПолучитьСтроку() = 1 Цикл              
//		                   
//		ПогаситьКПРуб 		= Мин(ОстПогКПСуммаРуб, ТаблДвижений.СуммаРуб);
//		КоэффПогашенияКП	= ПогаситьКПРуб / ТаблДвижений.СуммаРуб;
//		
//		Регистр.КнигаПродаж.ВидДолга	   = ТаблИтогов.ВидДолга;
//		Регистр.КнигаПродаж.КредДокумент   = ТаблИтогов.КредДокумент;
//		Регистр.КнигаПродаж.СтавкаНДС	   = ТаблДвижений.СтавкаНДС;
//		// ресурсы    
//		Регистр.КнигаПродаж.СуммаРуб       = ПогаситьКПРуб * (-1);	
//		Регистр.КнигаПродаж.СуммаНДС       = ТаблДвижений.СуммаНДС * КоэффПогашенияКП * (-1);
//		Регистр.КнигаПродаж.СуммаНП        = ТаблДвижений.СуммаНП * КоэффПогашенияКП * (-1);
//				      
//		// реквизиты                                                 
//		Регистр.КнигаПродаж.СтавкаНП  	   = ТаблДвижений.СтавкаНП;
//		Регистр.КнигаПродаж.КодОперации    = ТаблДвижений.КодОперации;
//		Регистр.КнигаПродаж.ДокументОплаты = ТаблДвижений.ДокументОплаты;
//		Регистр.КнигаПродаж.ДвижениеПриходВыполнить();
//		
//		// Запомним какие долги списали, чтобы потом их начислить...
//		КоэффКП = ?(ИтогКП = 0 ,0, ТаблДвижений.СуммаРуб /ИтогКП );
//		ТаблДолгов.НоваяСтрока();
//		ТаблДолгов.КредДокумент     = ТаблИтогов.КредДокумент;
//		ТаблДолгов.ВидДолга         = ТаблИтогов.ВидДолга;
//		ТаблДолгов.СтавкаНДС        = ТаблДвижений.СтавкаНДС;
//		ТаблДолгов.СтавкаНП         = ?(КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП, 
//		                                ТаблДокумента.СтавкаНП, 
//										ПолучитьПустоеЗначение("Справочники.СтавкиНП"));
//		ТаблДолгов.ДоговорКомитента = "";
//		ТаблДолгов.ОблагаетсяНП     = ?(КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП, 1, 0);        
//		
//		ТаблДолгов.СуммаНДС         = ТаблДвижений.СуммаНДС * КоэффПогашенияКП;
//		
//		// На последнюю строку относим весь остаток
//		Если ТаблДвижений.НомерСтроки = ТаблДвижений.КоличествоСтрок() Тогда
//			ТаблДолгов.Сумма         = ОстПогКПСуммаВал;
//			ТаблДолгов.СуммаУпр      = ОстПогКПСуммаУпр;
//			ТаблДолгов.СуммаРуб      = ОстПогКПСуммаРуб;
//			ТаблДолгов.КоррСуммаНП   = ОстКоррСуммаНП;
//			ТаблДолгов.СуммаНП       = ?(КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП, ТаблДолгов.КоррСуммаНП, 0);        
//			ТаблДолгов.Себестоимость = ОстПогКПСебестоимость;
//		Иначе    
//			ТаблДолгов.Сумма         = Окр(КоэффКП * ПогаситьВал,2,1);
//			ТаблДолгов.СуммаУпр      = Окр(КоэффКП * ОстПогКПСуммаУпр,2,1);
//			ТаблДолгов.СуммаРуб      = Окр(КоэффКП * ОстПогКПСуммаРуб,2,1);;
//			ТаблДолгов.КоррСуммаНП   = Окр(КоэффКП * ОстКоррСуммаНП,2,1);
//			ТаблДолгов.СуммаНП       = ?(КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП, ТаблДолгов.КоррСуммаНП, 0);        
//			ТаблДолгов.Себестоимость = Окр(КоэффКП * ОстПогКПСебестоимость,2,1);
//		КонецЕсли;                                          
//		
//		ОстПогКПСуммаВал      = ОстПогКПСуммаВал      - ТаблДолгов.Сумма;
//		ОстПогКПСуммаУпр      = ОстПогКПСуммаУпр      - ТаблДолгов.СуммаУпр;
//		ОстПогКПСуммаРуб      = ОстПогКПСуммаРуб      - ТаблДолгов.СуммаРуб;
//		ОстПогКПСебестоимость = ОстПогКПСебестоимость - ТаблДолгов.Себестоимость;
//		ОстКоррСуммаНП        = ОстКоррСуммаНП        - ТаблДолгов.КоррСуммаНП;          
//		
//	КонецЦикла;  
//	
//	// Что-то могло остаться (не было движений по книге продаж)
//	Если ОстПогКПСуммаВал <> 0 Тогда
//	    
//		ТаблДолгов.НоваяСтрока();
//		ТаблДолгов.КредДокумент     = ТаблИтогов.КредДокумент;
//		ТаблДолгов.ВидДолга         = ТаблИтогов.ВидДолга;
//		ТаблДолгов.СтавкаНДС        = ПолучитьПустоеЗначение("Перечисление.СтавкиНДС");
//
//
//		ТаблДолгов.СтавкаНП         = ?(КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП, 
//		                                ТаблДокумента.СтавкаНП, 
//										ПолучитьПустоеЗначение("Справочники.СтавкиНП"));
//		ТаблДолгов.ДоговорКомитента = "";
//		ТаблДолгов.ОблагаетсяНП     = ?(КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП, 1, 0);        
//		ТаблДолгов.СуммаНДС         = 0;
//		ТаблДолгов.Сумма            = ОстПогКПСуммаВал;
//		ТаблДолгов.СуммаУпр         = ОстПогКПСуммаУпр;
//		ТаблДолгов.СуммаРуб         = ОстПогКПСуммаРуб;
//		ТаблДолгов.СуммаНП          = ?(КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП, ОстКоррСуммаНП, 0);        
//		ТаблДолгов.КоррСуммаНП      = ОстКоррСуммаНП;
//		ТаблДолгов.Себестоимость    = ОстПогКПСебестоимость;
//		
//	КонецЕсли;
КонецПроцедуры // СписатьДолг()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()

	Перем ТаблицаДолгов, ТаблИтогов, ТаблДокумента;
	Перем ВремРегистры;
	Перем ВремПокупатели;
//	
//	СписокПараметров=СоздатьОбъект("СписокЗначений");
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Фирма,			"Фирма");
//	СписокПараметров.ДобавитьЗначение(1, 				"ЗнакДвижения"); // увеличение долга клиента
//	СписокПараметров.ДобавитьЗначение(КодОперации,		"КодОперации");
//
//	// Определим, нужен ли расчет регистов
//	ВремРегистры   = СоздатьОбъект("Регистры");
//	ВремПокупатели = ВремРегистры.Покупатели; 
//	ВремКнигаПродаж = ВремРегистры.КнигаПродаж;
//	
//	глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремПокупатели);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	КурсДоллара	= глКурсДляВалюты(глДоллары,ДатаДок);
//	КратДоллара = глКратностьДляВалюты(глДоллары,ДатаДок);
//	КурсРубля	= глКурсДляВалюты(глРубли,ДатаДок);
//	КратРубля   = глКратностьДляВалюты(глРубли,ДатаДок);
//    ВалютаВзаим	= Договор.ВалютаВзаиморасчетов;
//	
//	ТаблДолгов = СоздатьОбъект("ТаблицаЗначений"); // По ней потом долги по новой ставке НП будем начислять
//
//	ТаблДолгов.НоваяКолонка("КредДокумент");
//	ТаблДолгов.НоваяКолонка("ВидДолга");
//	ТаблДолгов.НоваяКолонка("СтавкаНДС");
//	ТаблДолгов.НоваяКолонка("СтавкаНП");
//	ТаблДолгов.НоваяКолонка("Сумма");
//	ТаблДолгов.НоваяКолонка("СуммаУпр");
//	ТаблДолгов.НоваяКолонка("СуммаРуб");
//	ТаблДолгов.НоваяКолонка("СуммаНДС");
//	ТаблДолгов.НоваяКолонка("СуммаНП");
//	ТаблДолгов.НоваяКолонка("КоррСуммаНП"); // сумма НП, на которую надо скорректировать долг
//	ТаблДолгов.НоваяКолонка("Себестоимость");
//	ТаблДолгов.НоваяКолонка("ОблагаетсяНП");        
//	ТаблДолгов.НоваяКолонка("ДоговорКомитента");
//	
//	ВыгрузитьТабличнуюЧасть(ТаблДокумента);       
//	ТаблДокумента.Свернуть("КредДокумент,ВидДолга,СтавкаНП", "СуммаВал,СуммаНП");
//	
//	// Пройдем по строкам документа
//	ТаблДокумента.ВыбратьСтроки();
//	Пока ТаблДокумента.ПолучитьСтроку() = 1 Цикл
//		
//		Если ПустоеЗначение(ТаблДокумента.КредДокумент) = 1 Тогда                                                  
//			
//			// В какой строке уже не знаем...
//			глНеПроводить(Контекст, "В одной из строк спецификации не выбран документ реализации."); 
//			Возврат;      
//
//		КонецЕсли;        
//		
//		Если ПустоеЗначение(ТаблДокумента.ВидДолга) = 1 Тогда                                                  
//			
//			// В какой строке уже не знаем...
//			глНеПроводить(Контекст, "В одной из строк спецификации не выбран вид долга."); 
//			Возврат;
//		КонецЕсли;        
//		
//		// Если начисляем НП, то движения были по пустой ставке
//		ВремСтавкаНП = ?(КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП, 
//		                 ПолучитьПустоеЗначение("Справочники.СтавкиНП"), 
//						 ТаблДокумента.СтавкаНП);
//		
//		ВремПокупатели.УстановитьЗначениеФильтра("КредДокумент", ТаблДокумента.КредДокумент,1); 
//		ВремПокупатели.УстановитьЗначениеФильтра("ВидДолга"    , ТаблДокумента.ВидДолга,1); 
//		ВремПокупатели.УстановитьЗначениеФильтра("СтавкаНП"    , ВремСтавкаНП,1); 
//		
//		ВремПокупатели.ВыгрузитьИтоги(ТаблИтогов,1,1);
//		                                     
//		ОстПогСуммаВал = ТаблДокумента.СуммаВал; // Это надо погасить
//		ОстПогСуммаНП  = ТаблДокумента.СуммаНП;  // Это надо погасить или начислить
//		
//		// Новый долг не должен превышать старый
//		Если (ОстПогСуммаВал > ТаблИтогов.Итог("СуммаВал")) Тогда
//			глНеПроводить(Контекст, "Для документа """ + глПредставлениеДокумента(ТаблДокумента.КредДокумент) + 
//           """ по ставке НП """ + СокрЛП(ТаблДокумента.СтавкаНП) + """ указано к погашению по взаиморасчетам на "+
//		   глФРМ(ОстПогСуммаВал-ТаблИтогов.Итог("СуммаВал"))+" "+СокрЛП(ВалютаВзаим)+
//			" больше, чем было отгружено!");
//			Возврат;
//		КонецЕсли;
//		Если ((ОстПогСуммаНП > ТаблИтогов.Итог("СуммаНП")))
//		   и (КодОперации = глКо.КорректировкаОтгрузкиСторнированиеНП )Тогда
//			глНеПроводить(Контекст, "Для документа """ + глПредставлениеДокумента(ТаблДокумента.КредДокумент) + 
//            """ по ставке НП """ + СокрЛП(ТаблДокумента.СтавкаНП) + """ указано к погашению по налогу с продаж на "+ 
//			глФРМ(ОстПогСуммаНП - ТаблИтогов.Итог("СуммаНП"))+" "+СокрЛП(глРубли)+
//		    " больше, чем было отгружено!");
//			Возврат;
//			
//		КонецЕсли;
//		
//		// Фирма и договор должны совпадать для данного документа и для КредДок
//		Если (Фирма <> ТаблДокумента.КредДокумент.Фирма) Тогда
//			глНеПроводить(Контекст, "Кредитный документ """ + глПредставлениеДокумента(ТаблДокумента.КредДокумент) + 
//           """ был выписан по другой фирме (" + СокрЛП(ТаблДокумента.КредДокумент.Фирма) + ").");
//			Возврат;
//		КонецЕсли;
//		Если (Договор <> ТаблДокумента.КредДокумент.Договор) Тогда
//			глНеПроводить(Контекст, "Кредитный документ """ + глПредставлениеДокумента(ТаблДокумента.КредДокумент) + 
//           """ был выписан по другому договору (" + СокрЛП(ТаблДокумента.КредДокумент.Договор) + ").");
//			Возврат;
//		КонецЕсли;                                                             
//		
//		// Спишем старые долги, перебирая итоги по видам долга
//		ТаблИтогов.ВыбратьСтроки();
//		Пока (ТаблИтогов.ПолучитьСтроку() = 1) 
//		   и (ОстПогСуммаВал <> 0) Цикл
//		   	
//			//Определим, какую часть долга надо списать
//		   	Если ТаблИтогов.СуммаВал >= ОстПогСуммаВал Тогда 
//				// остаток долга больше, чем нам надо списать
//				КоэффПогашения	= ОстПогСуммаВал/ТаблИтогов.СуммаВал; 
//			Иначе
//				КоэффПогашения	= 1;
//			КонецЕсли;
//	                          
//			СписатьДолг(ОстПогСуммаВал, ОстПогСуммаНП, КоэффПогашения, ТаблИтогов, ТаблДолгов, ТаблДокумента);
//			
//		КонецЦикла;
//        
//		// Должны полностью списать сумму взаиморасчетов и сумму НП, 
//		// если этого не произошло, то в документе указаны некорректные данные
//		Если (ОстПогСуммаВал > 0) Тогда
//			глНеПроводить(Контекст, "Для документа """ + глПредставлениеДокумента(ТаблДокумента.КредДокумент) + 
//           """ по ставке НП """ + СокрЛП(ТаблДокумента.СтавкаНП) + """ указано к погашению
//			| по взаиморасчетам на "+глФРМ(ОстПогСуммаВал)+" "+СокрЛП(ВалютаВзаим)+" больше, чем 
//			| было отгружено!");
//			Возврат;
//		КонецЕсли;
//		Если ((ОстПогСуммаНП > 0))
//		   и (КодОперации = глКо.КорректировкаОтгрузкиСторнированиеНП )Тогда
//			глНеПроводить(Контекст, "Для документа """ + глПредставлениеДокумента(ТаблДокумента.КредДокумент) + 
//           """ по ставке НП """ + СокрЛП(ТаблДокумента.СтавкаНП) + """ указано к погашению
//			| по налогу с продаж на "+глФРМ(ОстПогСуммаНП)+" "+СокрЛП(глРубли)+" больше, чем 
//			| было отгружено!");
//			Возврат;
//			
//		КонецЕсли;
//	    
//		// Теперь начислим (отнимем) сумму НП, которую мы заполнили при списании долга.
//		Знак = ?(КодОперации = глКо.КорректировкаОтгрузкиСторнированиеНП, -1,1);
//		ТаблДолгов.Свернуть("КредДокумент,ВидДолга,СтавкаНДС,СтавкаНП,ОблагаетсяНП,ДоговорКомитента", 
//		                    "Сумма,СуммаУпр,СуммаРуб, СуммаНДС,СуммаНП,КоррСуммаНП,Себестоимость");
//							
//        ТаблДолгов.ВыбратьСтроки();
//		Пока ТаблДолгов.ПолучитьСтроку() = 1 Цикл
//		    ТаблДолгов.СуммаРуб = ТаблДолгов.СуммаРуб + Знак * ТаблДолгов.КоррСуммаНП;
//		    ТаблДолгов.Сумма    = глПересчет(ТаблДолгов.СуммаРуб, глРубли, ДатаДок,ВалютаВзаим, ТаблДолгов.КредДокумент.ДатаДок);
//		    ТаблДолгов.СуммаУпр = глПересчет(ТаблДолгов.СуммаРуб, глРубли, ДатаДок,глДоллары, ТаблДолгов.КредДокумент.ДатаДок);
//			
//		КонецЦикла;
//							
//		
//		// Проведем как-бы реализацию заново 
//		ВремПокупатели.УстановитьЗначениеФильтра("КредДокумент", ТаблДокумента.КредДокумент,0); 
//		ВремПокупатели.УстановитьЗначениеФильтра("ВидДолга"    , ТаблДокумента.ВидДолга,0); 
//		ВремПокупатели.УстановитьЗначениеФильтра("СтавкаНП"    , ВремСтавкаНП,0); 
//
//		глДвижениеДолгов(Контекст,Договор,ТаблДолгов,СписокПараметров,ВремПокупатели,,ВремКнигаПродаж);    
//		
//		// Готовы к погашению другого документа (или ставки НП)
//		ТаблДолгов.УдалитьСтроки();
//
//	КонецЦикла;
//	
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
//		"Фирма,Контрагент,Договор")=0 Тогда
//		Возврат;
//	КонецЕсли;
//	              
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()


Процедура ПередЗаписью(Отказ, Режим)
	СуммаВал_Итог = ТабличнаяЧасть1.Итог("СуммаВал");
	СуммаНП_Итог = ТабличнаяЧасть1.Итог("СуммаНП");
КонецПроцедуры
//
