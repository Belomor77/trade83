////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//                             

//******************************************************************************
// СкорректироватьДвиженияПартийПоАвансам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Определяет сумму документа по взаиморасчетам с учетом авансов
//  и корректирует суммы в регистре партий пропорционально
//  сумме документа по табличной части
//
Процедура СкорректироватьДвиженияПартийПоАвансам()
//
//	ОбщаяСуммаДокумента = Итог("ТаможеннаяСтоимость");
//    ОбщаяСуммаПоУчету = 0;
//	
//	РегистрВзаиморасчетов = СоздатьОбъект("Регистр.Поставщики");
//	Если РегистрВзаиморасчетов.ВыбратьДвиженияДокумента(ТекущийДокумент()) = 1 Тогда
//		Пока РегистрВзаиморасчетов.ПолучитьДвижение() = 1 Цикл
//			Если РегистрВзаиморасчетов.КодОперации <> глКО.ТаможенныеПлатежи Тогда
//				Если РегистрВзаиморасчетов.Приход = 1 Тогда
//    	        	 ОбщаяСуммаПоУчету = ОбщаяСуммаПоУчету - РегистрВзаиморасчетов.ОценкаРуб;
//				Иначе
//    	        	 ОбщаяСуммаПоУчету = ОбщаяСуммаПоУчету + РегистрВзаиморасчетов.ОценкаРуб;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//
//	Если ОбщаяСуммаПоУчету <> 0 Тогда
//		// если документ не отражается по книгам покупок/продаж, корректировать не надо
//		ТаблицаКорректировкиПартий = глСоздатьТаблицуКорректировкиПартий();
//		
//		глЗаполнитьТаблицуПоДвижениямРегистраПартий(ТаблицаКорректировкиПартий, Контекст);
//		глСкорректироватьСуммыПартий(ТаблицаКорректировкиПартий, ОбщаяСуммаДокумента, ОбщаяСуммаПоУчету, '31.12.2009');
//	
//		глЗаписатьДвиженияРегистраПартийПоТаблице(ТаблицаКорректировкиПартий, Контекст);
//	
//	КонецЕсли;
//
КонецПроцедуры // СкорректироватьДвиженияПартийПоАвансам()


//******************************************************************************
// РаспределитьПостоянныеРазницы()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Определяет величину постоянных разниц, возникающую из за разного
//  порядка оценки авансов в БУ и НУ и распределяет её соответственно номенклатурным
//  позициям, указанных в табличной части
//
Процедура РаспределитьПостоянныеРазницы()
//	
//	// Определяем постоянную разницу
//    СуммаНПР = 0;
//	ОбщаяСуммаДокумента = глОбщаяСуммаДокумента(Контекст);
//	
//	РегистрВзаиморасчетов = СоздатьОбъект("Регистр.Поставщики");
//	Если РегистрВзаиморасчетов.ВыбратьДвиженияДокумента(ТекущийДокумент()) = 1 Тогда
//		Пока РегистрВзаиморасчетов.ПолучитьДвижение() = 1 Цикл
//			Если РегистрВзаиморасчетов.КодОперации = глКО.ЗачтенАвансПоставщикуВал Тогда
//				СуммаНПР = СуммаНПР + (РегистрВзаиморасчетов.ОценкаРуб - РегистрВзаиморасчетов.СуммаРуб);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//    
//	Если ВыбратьСтроки() = 1 Тогда
//		Пока ПолучитьСтроку() = 1 Цикл
//			Если ОбщаяСуммаДокумента = 0 Тогда
//				СуммаПроводки = 0;
//			Иначе
//				СуммаПроводки = СуммаНПР * Сумма / ОбщаяСуммаДокумента;
//			КонецЕсли;
//			
//			Регистр.ПартииНаличие.Фирма         = Фирма;
//			Регистр.ПартииНаличие.МОЛ           = Склад.МОЛ;
//			Регистр.ПартииНаличие.Номенклатура  = Номенклатура;
//			Регистр.ПартииНаличие.СтатусПартии  = глПолучитьСтатусПартииПрихода(ВидТМЦ,Номенклатура,глКО.ПостоянныеРазницы);
//			Регистр.ПартииНаличие.Партия        = "";
//			Регистр.ПартииНаличие.ДатаПартии    = "";
//			Регистр.ПартииНаличие.ЦенаПрод      = 0;
//			Регистр.ПартииНаличие.Количество    = 0;
//			Регистр.ПартииНаличие.СуммаУпр      = 0;
//			Регистр.ПартииНаличие.СуммаРуб      = 0;
//			Регистр.ПартииНаличие.СуммаБезНДС   = СуммаПроводки;
//			Регистр.ПартииНаличие.СуммаПлат     = 0;
//			Регистр.ПартииНаличие.КодОперации   = глКО.ПостоянныеРазницы;
//			Регистр.ПартииНаличие.ПродСтоимость = 0;
//			Регистр.ПартииНаличие.Выручка       = 0;
//		
//			Регистр.ПартииНаличие.ДвижениеПриходВыполнить();
//			Регистр.ПартииНаличие.ДвижениеРасходВыполнить();
//			
//		КонецЦикла;
//	КонецЕсли;
//			
//	
КонецПроцедуры // РаспределитьПостоянныеРазницы()


//******************************************************************************
// ФильтрЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
//
// Параметры:
//  ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтров для отбора итогов регистров Заказы, ЗаказыЗаявки.
//
Процедура ФильтрЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
//	          
//    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
//	ВремЗаказы.УстановитьЗначениеФильтра("Фирма",	            ФирмаДляОстатковТМЦ , 2);
//	ВремЗаказы.УстановитьЗначениеФильтра("ДоговорПоставщика",	Договор             , 1);
//	
//	ВидОсн = ДокОснование.Вид();
//	Если (ДокОснование.Выбран()=1) и (ВидОсн = "ЗаказПоставщику") Тогда
//		// если выбран заказ, то гасим только его !!!
//		ВремЗаказы.УстановитьЗначениеФильтра("ЗаказПоставщику",	ДокОснование,1);
//	КонецЕсли;
//	
//	Если ИтогиАктуальны()=0 Тогда
//		СписокТМЦ = СоздатьОбъект("СписокЗначений");
//		ТаблицаТМЦ.Выгрузить(СписокТМЦ,,,"Номенклатура");
//		
//		ВремЗаказы.      УстановитьЗначениеФильтра("Номенклатура", СписокТМЦ, 2);
//        ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура", СписокТМЦ, 2);
//
//		ВремЗаказы.      ВременныйРасчет();      
//		ВремЗаказыЗаявки.ВременныйРасчет();
//	КонецЕсли;
//	
КонецПроцедуры // ФильтрЗаказов()

//******************************************************************************
// ДвижениеЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
//
// Параметры:
//  ТаблицаТМЦ - подготовленная таблица документа.
//  ВремЗаказы       - объект "Регистр.Заказы",       должным образом рассчитанный и отфильтрованный
//  ВремЗаказыЗаявки - объект "Регистр.ЗаказыЗаявки", должным образом рассчитанный и отфильтрованный
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит списание по регистру "Заказы"
//
Процедура ДвижениеЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
	Перем ТИЗаказы, ТИЗЗ;  
//	
//	// общие для всех движений измерения
//	Регистр.Заказы.    Фирма			= Фирма;
//	Регистр.РезервыТМЦ.Фирма			= Фирма;
//	                                       
//	ТаблицаТМЦ.ВыбратьСтроки();
//	Пока ТаблицаТМЦ.ПолучитьСтроку()=1 Цикл  
//		
//		ТекНоменк = ТаблицаТМЦ.Номенклатура;
//		
//	    // общие для всех движений измерения
//    	Регистр.Заказы.      Номенклатура 	= ТекНоменк;
//		Регистр.РезервыТМЦ.  Номенклатура 	= ТекНоменк;
//        Регистр.ЗаказыЗаявки.Номенклатура 	= ТекНоменк;
//                
//		ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
//		ВремЗаказы.      УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
//		
//		ВремЗаказы.ВыгрузитьИтоги(ТИЗаказы,1,1);
//		
//		ПогаситьКолВо = ТаблицаТМЦ.Количество;
//		
//		ТИЗаказы.ВыбратьСтроки();
//		Пока (ТИЗаказы.ПолучитьСтроку()=1) 
//		и    (ПогаситьКолВо>0) 
//		Цикл
//			ОстЗакКПриход = ТИЗаказы.КоличествоПриход;
//			ОстЗакСПриход = ТИЗаказы.СтоимостьПриход;
//			
//			ПогЗакКПриход = Макс(Мин(ОстЗакКПриход, ПогаситьКолВо),0);
//			ПогЗакСПриход = ?(ОстЗакКПриход = 0, 0, ОстЗакСПриход * ПогЗакКПриход / ОстЗакКПриход);
//			
//			Если ПогЗакКПриход <> 0 Тогда
//				
//				Регистр.Заказы.ДоговорПоставщика= ТИЗаказы.ДоговорПоставщика;
//				Регистр.Заказы.ЗаказПоставщику	= ТИЗаказы.ЗаказПоставщику;
//				
//				Регистр.Заказы.КоличествоПриход	= ПогЗакКПриход;
//				Регистр.Заказы.СтоимостьПриход	= ПогЗакСПриход;
//				
//				Регистр.Заказы.ДвижениеРасходВыполнить();      
//				
//				ПогаситьКолВо = ПогаситьКолВо - ПогЗакКПриход; 
//				
//				// посмотрим, а не числилась ли привязка к заказу поставщика по заявке?
//				ВремЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаказПоставщику",ТИЗаказы.ЗаказПоставщику,1);
//				ВремЗаказыЗаявки.ВыгрузитьИтоги(ТИЗЗ,1,1);
//				ОстПогКПоЗаказу = ПогЗакКПриход;
//				                             
//				ТИЗЗ.ВыбратьСтроки();
//				Пока (ТИЗЗ.ПолучитьСтроку()=1)
//				и    (ОстПогКПоЗаказу <> 0)
//				Цикл                                       
//					ОстПоЗаявке  = ТИЗЗ.Количество;
//					ПогКПоЗаявке = Макс(Мин(ОстПогКПоЗаказу, ОстПоЗаявке),0);
//					Если ПогКПоЗаявке <> 0 Тогда
//						// измерения
//						Регистр.ЗаказыЗаявки.ЗаявкаПокупателя = ТИЗЗ.ЗаявкаПокупателя;
//						Регистр.ЗаказыЗаявки.ЗаказПоставщику  = ТИЗЗ.ЗаказПоставщику;
//						// ресурсы
//						Регистр.ЗаказыЗаявки.Количество       = ПогКПоЗаявке;
//						// выполним движение
//						Регистр.ЗаказыЗаявки.ДвижениеРасходВыполнить();
//						
//						// и сразу зарезервируем за покупателем эти ТМЦ 
//						// измерения
//						Регистр.РезервыТМЦ.Номенклатура      = ТекНоменк;
//						// если приходуем на другой склад - резерв выставляем в целом по фирме
//						Регистр.РезервыТМЦ.Склад		     = ?(ТИЗЗ.ЗаявкаПокупателя.Склад = Склад,Склад,"");
//						Регистр.РезервыТМЦ.ДоговорПокупателя = ТИЗЗ.ЗаявкаПокупателя.Договор;
//						Регистр.РезервыТМЦ.ЗаявкаПокупателя  = ТИЗЗ.ЗаявкаПокупателя;
//						// ресурс
//						Регистр.РезервыТМЦ.Количество	     = ПогКПоЗаявке;
//						// выполняем движение
//						Регистр.РезервыТМЦ.ДвижениеПриходВыполнить();
//						
//						ОстПогКПоЗаказу = ОстПогКПоЗаказу - ПогКПоЗаявке;
//					КонецЕсли;
//				КонецЦикла;
//				
//			КонецЕсли; // если надо погасить заказ
//
//		КонецЦикла; // по выбранным итогам
//		
//	КонецЦикла; // по строкам документа
//	
КонецПроцедуры // ДвижениеЗаказов()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ТаблицаДокумента;
	Перем ВремРегистры;
	Перем ВремПоставщики, ВремЗаказы, ВремЗаказыЗаявки;
//	            
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	// проведение документа
//	ТаблицаДокумента=глПодготовитьТаблицуДокумента(Контекст);
//	
//	СписокПараметров=СоздатьОбъект("СписокЗначений");
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Склад,		"Склад");
//	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
//	СписокПараметров.ДобавитьЗначение(Контрагент,	"Контрагент");
//	СписокПараметров.ДобавитьЗначение(Договор,		"Договор");
//	СписокПараметров.ДобавитьЗначение(глКО.Закупка,	"КодОперации");
//		
//	ВремРегистры = СоздатьОбъект("Регистры"); 
//	ВремЗаказы	     = ВремРегистры.Заказы;
//	ВремЗаказыЗаявки = ВремРегистры.ЗаказыЗаявки;
//	
//	ФильтрЗаказов(ТаблицаДокумента, ВремЗаказы, ВремЗаказыЗаявки);
//	
//	ВремПоставщики = ВремРегистры.Поставщики;
//	глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремПоставщики);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	                    
//	ДвижениеЗаказов(ТаблицаДокумента, ВремЗаказы, ВремЗаказыЗаявки);
//	глПриходОстатковТМЦ		(Контекст,ТаблицаДокумента,СписокПараметров);
//	глОприходованиеПартийТМЦ(Контекст,ТаблицаДокумента,СписокПараметров);
//	 
//	// отразим таможенные сборы и пошлины и НДС
//	ОстатокСбораРуб 	= ТаможенныйСборРуб + ТаможенныйСборВал_Р;
//	КоэффСбора			= ?(ТаблицаДокумента.Итог("СуммаРуб") = 0, 0, ОстатокСбораРуб / ТаблицаДокумента.Итог("СуммаРуб"));
//	    
//	МОЛ					= Склад.МОЛ;
//	                                    
//	КурсДоллара			= ?(Валюта = глДоллары,	Курс,глКурсДляВалюты(глДоллары,	ДатаДок));
//	КурсРубля			= ?(Валюта = глРубли,	Курс,глКурсДляВалюты(глРубли,	ДатаДок));
//	КратДоллара			= ?(Валюта = глДоллары,	Кратность,глКратностьДляВалюты(глДоллары,ДатаДок));
//	КратРубля			= ?(Валюта = глРубли,	Кратность,глКратностьДляВалюты(глРубли,	 ДатаДок));
//        
//	РегПартии 			= Регистр.ПартииНаличие;
//	УчПолитика 			= Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок);
//	
//	ТаблицаДокумента.ВыбратьСтроки();
//	Пока ТаблицаДокумента.ПолучитьСтроку() = 1 Цикл
//		
//		//измерения
//		РегПартии.Фирма				= Фирма;
//		РегПартии.МОЛ				= МОЛ;
//		РегПартии.Номенклатура		= ТаблицаДокумента.Номенклатура;
//		РегПартии.СтатусПартии		= глПолучитьСтатусПартииПрихода(ТаблицаДокумента.ВидТМЦ,ТаблицаДокумента.Номенклатура,глКО.Закупка);
//		Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
//		 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO)
//		 или (РегПартии.СтатусПартии = глСП.Т_Принятый) Тогда
//			 	
//			РегПартии.Партия		= ТаблицаДокумента.Партия;
//			РегПартии.ДатаПартии	= ДатаДок;
//			
//		Иначе     
//			РегПартии.Партия		= "";                
//			РегПартии.ДатаПартии	= "";
//		КонецЕсли;
//		    
//		//ресурсы                                                   
//		Если ТаблицаДокумента.НомерСтроки = ТаблицаДокумента.КоличествоСтрок() Тогда
//			ТекСуммаСбора 	= ОстатокСбораРуб;
//		Иначе
//			ТекСуммаСбора 	= Окр(ТаблицаДокумента.СуммаРуб * КоэффСбора,2,1);
//			ОстатокСбораРуб = ОстатокСбораРуб - ТекСуммаСбора;
//		КонецЕсли;
//		
//		РегПартии.Количество		= 0;
//		РегПартии.СуммаРуб			= ТаблицаДокумента.СуммаПошлиныРуб+
//										ТаблицаДокумента.СуммаНДСРуб+
//										ТекСуммаСбора;
//		РегПартии.СуммаБезНДС		= ТаблицаДокумента.СуммаПошлиныРуб+
//										ТекСуммаСбора;
//		РегПартии.СуммаПлат		= ТаблицаДокумента.СуммаПошлиныРуб+
//										ТекСуммаСбора;
//		РегПартии.СуммаУпр			= глПересчет(РегПартии.СуммаРуб,глРубли,КурсРубля,глДоллары,КурсДоллара,КратРубля,КратДоллара);
//		
//		//реквизиты      
//		РегПартии.КодОперации 		= глКО.ТаможенныеПлатежи;     
//		
//		РегПартии.ПривязыватьСтроку(ТаблицаДокумента.НомерСтрокиДокумента);
//		РегПартии.ДвижениеПриходВыполнить();
//		РегПартии.СуммаПлат		= 0;
//		
//	КонецЦикла; // по строкам таблицы документа
//	                
//	// взаиморасчеты с поставщиком (нерезидентом)
//	ТаблДолгов=СоздатьОбъект("ТаблицаЗначений");
//	ТаблицаДокумента.Выгрузить(ТаблДолгов);
//	ТаблДолгов.Свернуть("ВидТМЦ,СтавкаНДС","Сумма,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП");
//	ТаблДолгов.НоваяКолонка("ВидДолга");
//	ТаблДолгов.НоваяКолонка("КредДокумент");
//		
//	ТаблДолгов.ВыбратьСтроки();
//	Пока ТаблДолгов.ПолучитьСтроку()=1 Цикл
//		ТаблДолгов.ВидДолга		= глВД.ДолгВал;
//		ТаблДолгов.КредДокумент = ТекущийДокумент();
//	КонецЦикла;      
//		
//	СписокПараметров.Установить("ЗнакДвижения", -1); // уменьшение долга контрагента
//	глДвижениеДолгов(Контекст, Договор, ТаблДолгов,СписокПараметров,ВремПоставщики);
//	
//	// взаиморасчеты с таможней
//	ВремРегистры = СоздатьОбъект("Регистры");
//	
//	ВремПоставщики = ВремРегистры.Поставщики;
//	глФильтрДолгов(Контекст, ДоговорТаможниРуб, СписокПараметров, ВремПоставщики);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	// таможне мы должны уплатить: пошлину, НДС
//	
//	РегКнига   = Регистр.КнигаПокупок;
//	ТаблДок = СоздатьОбъект("ТаблицаЗначений");
//	ВыгрузитьТабличнуюЧасть(ТаблДок,"СтавкаНДС,ТаможеннаяСтоимость,СуммаНДСРуб,СуммаПошлиныРуб,СуммаНДСВал,СуммаПошлиныВал");
//	ТаблДок.Свернуть("СтавкаНДС","ТаможеннаяСтоимость,СуммаНДСРуб,СуммаПошлиныРуб,СуммаНДСВал,СуммаПошлиныВал");  
//	ТаблДолгов = СоздатьОбъект("ТаблицаЗначений");
//	ТаблДолгов.НоваяКолонка("ВидДолга");
//	ТаблДолгов.НоваяКолонка("КредДокумент");
//	ТаблДолгов.НоваяКолонка("Сумма");
//	ТаблДолгов.НоваяКолонка("СуммаУпр");
//	ТаблДолгов.НоваяКолонка("СуммаРуб");
//	ТаблДолгов.НоваяКолонка("СтавкаНДС");
//	ТаблДолгов.НоваяКолонка("СуммаНДС");
//	ТаблДолгов.НоваяКолонка("СуммаНП");  
//	
//	ВалТаможни = ДоговорТаможниВал.ВалютаВзаиморасчетов;
//	
//	ТаблДок.ВыбратьСтроки();
//	Пока ТаблДок.ПолучитьСтроку() = 1 Цикл
//		ТаблДолгов.НоваяСтрока();
//		ТаблДолгов.ВидДолга 	= ?(ПошлинаВВалюте = 1, глВД.ПрочееВал, глВД.Прочее);
//		ТаблДолгов.КредДокумент = ТекущийДокумент();        
//		ТаблДолгов.Сумма		= ?(ПошлинаВВалюте = 1, ТаблДок.СуммаПошлиныВал, ТаблДок.СуммаПошлиныРуб); 
//		ВалСуммы = ?(ПошлинаВВалюте = 1, ВалТаможни, глРубли);
//		КурсСуммы = ?(ПошлинаВВалюте = 1, ДатаДок, КурсРубля);
//		КратСуммы = ?(ПошлинаВВалюте = 1,       1, КратРубля);
//		ТаблДолгов.СуммаУпр		= глПересчет(ТаблДолгов.Сумма,ВалСуммы,КурсСуммы,глДоллары,КурсДоллара,КратСуммы,КратДоллара);
//		ТаблДолгов.СуммаРуб		= ТаблДок.СуммаПошлиныРуб;
//		ТаблДолгов.СуммаНДС		= ТаблДок.СуммаНДСРуб;
//		ТаблДолгов.СуммаНП		= 0;
//
//		ТаблДолгов.НоваяСтрока();
//		ТаблДолгов.ВидДолга 	= ?(НДСВВалюте = 1, глВД.ПрочееВал, глВД.Прочее);
//		ТаблДолгов.КредДокумент = ТекущийДокумент();        
//		ТаблДолгов.Сумма		= ?(НДСВВалюте = 1, ТаблДок.СуммаНДСВал, ТаблДок.СуммаНДСРуб); 
//		ВалСуммы = ?(НДСВВалюте = 1, ВалТаможни, глРубли);
//		КурсСуммы = ?(ПошлинаВВалюте = 1, ДатаДок, КурсРубля);
//		КратСуммы = ?(ПошлинаВВалюте = 1,       1, КратРубля);
//		ТаблДолгов.СуммаУпр		= глПересчет(ТаблДолгов.Сумма,ВалСуммы,КурсСуммы,глДоллары,КурсДоллара,КратСуммы,КратДоллара);
//		ТаблДолгов.СуммаРуб		= ТаблДок.СуммаНДСРуб;
//		ТаблДолгов.СуммаНДС		= ТаблДок.СуммаНДСРуб;
//		ТаблДолгов.СуммаНП		= 0;
//		                            
//		// в книгу покупок - сумма пошлины+там стоимость (база НДС)
//		РегКнига.КредДокумент	= ТекущийДокумент(); 
//		
//		Если НДСВВалюте = 1 Тогда
//			РегКнига.ВидДолга		= глВД.ПрочееВал;
//		Иначе
//			РегКнига.ВидДолга		= глВД.Прочее;  
//		КонецЕсли;    
//		
//		РегКнига.СтавкаНДС		= ТаблДок.СтавкаНДС;   
//		
//		РегКнига.СуммаРуб       = ТаблДок.СуммаПошлиныРуб 
//		                        + ТаблДок.ТаможеннаяСтоимость
//								+ ТаблДок.СуммаНДСРуб;       
//		РегКнига.СуммаНДС       = ТаблДок.СуммаНДСРуб;
//		РегКнига.СуммаНП        = 0;
//		
//		РегКнига.КодОперации	= глКО.ТаможенныеПлатежи;
//		
//		РегКнига.ДвижениеРасходВыполнить();
//	КонецЦикла;          
//	
//	Если ТаможенныйСборРуб <> 0 Тогда
//		// таможенный сбор 
//		ТаблДолгов.НоваяСтрока();
//		ТаблДолгов.СтавкаНДС	= "";
//		ТаблДолгов.ВидДолга 	= глВД.Прочее;
//		ТаблДолгов.КредДокумент = ТекущийДокумент();
//		ТаблДолгов.Сумма		= ТаможенныйСборРуб;
//		ТаблДолгов.СуммаУпр		= глПересчет(ТаблДолгов.Сумма,глРубли,КурсРубля,глДоллары,КурсДоллара,КратРубля,КратДоллара);
//		ТаблДолгов.СуммаРуб		= ТаможенныйСборРуб;
//		ТаблДолгов.СуммаНДС		= 0;
//		ТаблДолгов.СуммаНП		= 0;
//	КонецЕсли;           
//	
//	// Теперь нам нужна таблица только по рублевым договорам
//	ТаблДолговРуб = СоздатьОбъект("ТаблицаЗначений");
//	ТаблДолгов.Выгрузить(ТаблДолговРуб);
//	ТаблДолговРуб.ВыбратьСтроки();
//	Пока ТаблДолговРуб.ПолучитьСтроку() = 1 Цикл
//		Пока ТаблДолговРуб.ВидДолга = глВД.ПрочееВал Цикл
//			ТаблДолговРуб.УдалитьСтроку();    
//		КонецЦикла;
//	КонецЦикла;           
//	    
//	Если ТаблДолговРуб.КоличествоСтрок() > 0 Тогда
//		СписокПараметров.Установить("КодОперации",	глКО.ТаможенныеПлатежи);
//		СписокПараметров.Установить("ЗнакДвижения", -1); // уменьшение долга контрагента
//		глДвижениеДолгов(Контекст, ДоговорТаможниРуб, ТаблДолговРуб,СписокПараметров,ВремПоставщики);
//	КонецЕсли;
//	                                          
//	// Теперь нам нужны только валютные долги
//	ТаблДолгов.ВыбратьСтроки();
//	Пока ТаблДолгов.ПолучитьСтроку() = 1 Цикл
//		Пока ТаблДолгов.ВидДолга = глВД.Прочее Цикл
//			ТаблДолгов.УдалитьСтроку();    
//		КонецЦикла;
//	КонецЦикла;
//
//	// теперь валютный сбор
//	Если ТаможенныйСборВал<>0 Тогда
//		ВремРегистры = СоздатьОбъект("Регистры");
//		
//		ВремПоставщики = ВремРегистры.Поставщики;
//		глФильтрДолгов(Контекст, ДоговорТаможниВал, СписокПараметров, ВремПоставщики);
//		
//		Если ИтогиАктуальны() = 0 Тогда
//			ВремРегистры.Актуальность(1);
//			ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//		КонецЕсли;
//		
//		ВалютаВалСбора 		= ДоговорТаможниВал.ВалютаВзаиморасчетов;
//		КурсВалютыВалСбора 	= ТаможенныйСборВал_Р/ТаможенныйСборВал;
//		КратВалютыВалСбора 	= глКратностьДляВалюты(ВалютаВалСбора,ДатаДок);
//		
//		ТаблДолгов.НоваяСтрока();
//		ТаблДолгов.СтавкаНДС	= "";
//		ТаблДолгов.ВидДолга 	= ?(ВалютаВалСбора = глРубли,глВД.Прочее,глВД.ПрочееВал);
//		ТаблДолгов.КредДокумент = ТекущийДокумент();
//		ТаблДолгов.Сумма		= ТаможенныйСборВал;
//		ТаблДолгов.СуммаУпр		= глПересчет(ТаможенныйСборВал,ВалютаВалСбора,КурсВалютыВалСбора,глДоллары,КурсДоллара,КратВалютыВалСбора,КратДоллара);
//		ТаблДолгов.СуммаРуб		= ТаможенныйСборВал_Р;
//		ТаблДолгов.СуммаНДС		= 0;
//		ТаблДолгов.СуммаНП		= 0;
//		
//	КонецЕсли; // если есть вал. таможенный сбор
//
//	Если ТаблДолгов.КоличествоСтрок() >0 Тогда
//		СписокПараметров.Установить("КодОперации",	глКО.ТаможенныеПлатежи);
//		СписокПараметров.Установить("ЗнакДвижения", -1); // уменьшение долга контрагента
//		глДвижениеДолгов(Контекст, ДоговорТаможниВал, ТаблДолгов,СписокПараметров,ВремПоставщики);
//	КонецЕсли;
//                                       
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//	СписокОбязатРеквизитов = "Фирма,Склад,Валюта,Контрагент,Договор,Таможня,ДоговорТаможниРуб";
//	Если (ТаможенныйСборВал<>0) или (ТаможенныйСборВал_Р<>0) или (НДСВВалюте = 1) или (ПошлинаВВалюте = 1) Тогда
//		СписокОбязатРеквизитов = СписокОбязатРеквизитов + ",ДоговорТаможниВал"
//	КонецЕсли;
//	Если глВсеРеквизитыДокументаЗаполнены(Контекст,СписокОбязатРеквизитов)=0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ДоговорТаможниРуб.ВалютаВзаиморасчетов<>глРубли Тогда
//		глНеПроводить(Контекст, "В качестве реквизита ""Договор таможни (руб.)"" выбран валютный договор!");
//		Возврат;
//	КонецЕсли;       
//	
//	Если (ТаможенныйСборВал <> 0) и (ТаможенныйСборВал_Р = 0) Тогда
//		глНеПроводить(Контекст, "Не указана сумма эквивалента валютного сбора в валюте бух. учета!");
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ДатаДок >= глДатаПоПриказу147 Тогда
//		СкорректироватьДвиженияПартийПоАвансам();
//		РаспределитьПостоянныеРазницы();
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	Сумма_Итог = ТабличнаяЧасть1.Итог("Сумма");
	СуммаПошлиныРуб_Итог = ТабличнаяЧасть1.Итог("СуммаПошлиныРуб");
	СуммаНДСРуб_Итог = ТабличнаяЧасть1.Итог("СуммаНДСРуб");
	ТаможеннаяСтоимость_Итог = ТабличнаяЧасть1.Итог("ТаможеннаяСтоимость");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
