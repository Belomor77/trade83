////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ВремРегистры;
	Перем ВремОстаткиТМЦ;
	Перем ТаблицаДокумента;
	Перем ФирмаДляОстатковТМЦ;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;  
//	
//	// Таблица для хранения переоцениваемых товаров и их продажных цен с целью
//	// последующего списания партий
//	ТабОстатков = СоздатьОбъект("ТаблицаЗначений");
//	ТабОстатков.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
//	ТабОстатков.НоваяКолонка("Количество", "Число");
//	ТабОстатков.НоваяКолонка("ЦенаПродПриход", "Число");
//	ТабОстатков.НоваяКолонка("ЦенаПрод", "Число");
//   	
//	ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
//	
//	// надо привести таблицу к стандартно понимаемому процедурами проведения виду
//	ТаблицаДокумента.НоваяКолонка("СуммаУпр");
//	ТаблицаДокумента.НоваяКолонка("СуммаРуб");
//	ТаблицаДокумента.НоваяКолонка("СкидкаРуб");
//	ТаблицаДокумента.НоваяКолонка("Сумма");
//	ТаблицаДокумента.НоваяКолонка("СуммаНДС");
//	ТаблицаДокумента.НоваяКолонка("СуммаНП");
//	ТаблицаДокумента.НоваяКолонка("СтавкаНДС");
//	ТаблицаДокумента.НоваяКолонка("СтавкаНП");
//	ТаблицаДокумента.НоваяКолонка("ЦенаПрод");
//	ТаблицаДокумента.НоваяКолонка("ЦенаПродПриход");
//	ТаблицаДокумента.НоваяКолонка("ПродСтоимость");
//	ТаблицаДокумента.НоваяКолонка("СкидкаРуб");
//	    
//	Регистр.ОстаткиТМЦ.Склад 		= Склад;
//	Регистр.ОстаткиТМЦ.Фирма 		= Фирма;
//		
//	КурсРубля = глКурсДляВалюты(глРубли, ДатаДок);
//	КратРубля = глКратностьДляВалюты(глРубли, ДатаДок);
//	
//	КолСтрок = ТаблицаДокумента.КоличествоСтрок();
//	Для Сч = 1 По КолСтрок Цикл
//		                           
//		ТаблицаДокумента.ПолучитьСтрокуПоНомеру(КолСтрок - Сч +1);
//		
//		// услуги и работы здесь не учитываем
//		Если (ТаблицаДокумента.Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга)
//		 или (ТаблицаДокумента.Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Работа) Тогда
//			Продолжить;
//		КонецЕсли;                                    
//		
//		// если цена не менялась  - движения не делаем
//		Если ТаблицаДокумента.ЦенаСтарая = ТаблицаДокумента.ЦенаНовая Тогда
//			ТаблицаДокумента.УдалитьСтроку();
//			Продолжить;
//		КонецЕсли;
//		
//		ТаблицаДокумента.СуммаРуб		= 	ТаблицаДокумента.Количество * ТаблицаДокумента.ЦенаСтарая;
//		ТаблицаДокумента.СкидкаРуб		= 0 ;
//		ТаблицаДокумента.Количество		= ТаблицаДокумента.Количество * ТаблицаДокумента.Коэффициент;
//		ТаблицаДокумента.ПродСтоимость	= ТаблицаДокумента.СуммаРуб;    
//		ТаблицаДокумента.ЦенаПрод		= ТаблицаДокумента.ЦенаСтарая/ТаблицаДокумента.Коэффициент;
//		ТаблицаДокумента.ЦенаПродПриход	= ТаблицаДокумента.ЦенаНовая/ТаблицаДокумента.Коэффициент;
//		
//		// измерения
//		Регистр.ОстаткиТМЦ.Номенклатура = ТаблицаДокумента.Номенклатура;
//		Регистр.ОстаткиТМЦ.ЦенаПрод		= ТаблицаДокумента.ЦенаПродПриход;
//		Регистр.ОстаткиТМЦ.Количество 	= ТаблицаДокумента.Количество;     
//		Регистр.ОстаткиТМЦ.Внутреннее	= 1;
//		
//		// выполним движение
//		Регистр.ОстаткиТМЦ.ДвижениеПриходВыполнить();
//		ТабОстатков.НоваяСтрока();
//		ТабОстатков.Номенклатура		= Регистр.ОстаткиТМЦ.Номенклатура;
//		ТабОстатков.Количество			= Регистр.ОстаткиТМЦ.Количество;
//		ТабОстатков.ЦенаПродПриход		= Регистр.ОстаткиТМЦ.ЦенаПрод;
//		ТабОстатков.ЦенаПрод			= ТаблицаДокумента.ЦенаПрод;
//		
//	КонецЦикла;
//	
//    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
//	СписокПараметров	= СоздатьОбъект("СписокЗначений");
//	
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Склад,			"Склад");
//	СписокПараметров.ДобавитьЗначение(Фирма,			"Фирма");
//	СписокПараметров.ДобавитьЗначение(ФирмаДляОстатковТМЦ,"ФирмаДляОстатковТМЦ");
//	СписокПараметров.ДобавитьЗначение(глКО.Перемещение,	"КодОперации");         
//	
//	ВремРегистры = СоздатьОбъект("Регистры");
//	
//	ВремОстаткиТМЦ = ВремРегистры.ОстаткиТМЦ;
//	ВремПартииТМЦ = ВремРегистры.ПартииНаличие;
//	глФильтрОстатковТМЦ(Контекст,ТаблицаДокумента, СписокПараметров, ВремОстаткиТМЦ);
//	глФильтрПартийТМЦ(Контекст, ТаблицаДокумента, СписокПараметров, ВремПартииТМЦ);    
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;
//	
//	// остатки ТМЦ
//	Если глСписаниеОстатковТМЦ	(Контекст,ТаблицаДокумента,СписокПараметров, ВремОстаткиТМЦ)=0 Тогда
//		Возврат;
//	КонецЕсли;  
//	
//	ТаблицаДокумента.НоваяКолонка("Партия", "Справочник.Партии");  
//	ТаблицаДокумента.Свернуть("НомерСтрокиДокумента, Номенклатура, Единица, Коэффициент, СтавкаНДС, СтавкаНП, Партия, ЦенаПрод, ЦенаПродПриход", "Количество, Сумма, СуммаУпр, СуммаРуб, СуммаПлат, СкидкаРуб, СуммаНДС, СуммаНП, ПродСтоимость");
//	ТЗПартий = СоздатьОбъект("ТаблицаЗначений");
//	глСписаниеПартийТМЦ	(Контекст,ТаблицаДокумента,СписокПараметров, ВремПартииТМЦ, ТЗПартий);  
//	ТЗПартий.ВыбратьСтроки(); 
//	
//	Пока ТЗПартий.ПолучитьСтроку() = 1 Цикл                                                         
//		ОстКоличество  = ТЗПартий.Количество;                                                        
//		ОстСуммаРуб    = ТЗПартий.СуммаРуб;
//		ОстСуммаУпр    = ТЗПартий.СуммаУпр;
//		ОстСуммаБезНДС = ТЗПартий.СуммаБезНДС;
//		
//	    Регистр.ПартииНаличие.Фирма 	   = ТЗПартий.Фирма;                               
//		Регистр.ПартииНаличие.МОЛ 		   = ТЗПартий.МОЛ;
//		Регистр.ПартииНаличие.Номенклатура = ТЗПартий.Номенклатура;
//		Регистр.ПартииНаличие.СтатусПартии = ТЗПартий.СтатусПартии;
//		Регистр.ПартииНаличие.Партия 	   = ТЗПартий.Партия;
//		Регистр.ПартииНаличие.ДатаПартии   = ТЗПартий.ДатаПартии;
//		Регистр.ПартииНаличие.Количество   = ТЗПартий.Количество;
//		
//		ТабОстатков.ВыбратьСтроки();
//		Пока ТабОстатков.ПолучитьСтроку() = 1  Цикл                      
//			Если ТабОстатков.Количество = 0  Тогда
//			    Продолжить;
//			КонецЕсли;
//		    Если (ТабОстатков.Номенклатура = ТЗПартий.Номенклатура) И (ТабОстатков.ЦенаПрод = ТЗПартий.ЦенаПрод) Тогда
//				СписКоличество = Мин(ОстКоличество, ТабОстатков.Количество);
//		        Регистр.ПартииНаличие.Количество = СписКоличество;
//				ТабОстатков.Количество = ТабОстатков.Количество - СписКоличество;
//				
//				КоэффСписания = СписКоличество / ТЗПартий.Количество;
//				
//				Регистр.ПартииНаличие.ЦенаПрод      = ТабОстатков.ЦенаПродПриход;
//				Регистр.ПартииНаличие.ПродСтоимость = СписКоличество 	   * ТабОстатков.ЦенаПродПриход;
//				
//				Если ОстКоличество = СписКоличество Тогда
//					Регистр.ПартииНаличие.СуммаРуб	  = ОстСуммаРуб;
//					Регистр.ПартииНаличие.СуммаУпр	  = ОстСуммаУпр;
//					Регистр.ПартииНаличие.СуммаБезНДС = ОстСуммаБезНДС;
//				Иначе
//					Регистр.ПартииНаличие.СуммаРуб	  = ТЗПартий.СуммаРуб    * КоэффСписания;
//					Регистр.ПартииНаличие.СуммаУпр	  = ТЗПартий.СуммаУпр    * КоэффСписания;
//					Регистр.ПартииНаличие.СуммаБезНДС = ТЗПартий.СуммаБезНДС * КоэффСписания;
//				КонецЕсли;            
//				
//				ОстСуммаРуб    = ОстСуммаРуб    - Регистр.ПартииНаличие.СуммаРуб;
//				ОстСуммаУпр    = ОстСуммаУпр    - Регистр.ПартииНаличие.СуммаУпр;
//				ОстСуммаБезНДС = ОстСуммаБезНДС - Регистр.ПартииНаличие.СуммаБезНДС;
//				ОстКоличество  = ОстКоличество  - СписКоличество;         
//				
//				Регистр.ПартииНаличие.КодОперации = глКО.Перемещение;
//				Регистр.ПартииНаличие.ДвижениеПриходВыполнить();            
//				
//				Если ОстКоличество = 0 Тогда
//				    Прервать;
//				КонецЕсли;
//				
//		    КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
//		"Фирма,Склад,Валюта")=0 Тогда
//		Возврат;
//	КонецЕсли;                 
//	
//	Если Склад.РозничныйСклад = 0 Тогда
//		глНеПроводить(Контекст,"Выбранный склад не является розничным!
//		|Переоценка на таком складе не производится!");
//		
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
