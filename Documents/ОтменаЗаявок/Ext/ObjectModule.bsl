////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// СнятьЗаявку(Заявка, ВремЗаявки, ВремЗаказыЗаявки, ВремРезервы)
//
// Парметры:
//  Заявка - заявка покупателя прденазначенная для снятия                   
//	ВремЗаявки - рассчитанный регистр Заявки
//	ВремЗаказыЗаявки - рассчитанный регистр ЗаказыЗаявки
//	ВремРезервы - рассчитанный регистр РезервыТМЦ
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Списывает все остаки по заявке в регистрах Заявки, ЗаказыЗаявки, РезервыТМЦ
//
Процедура СнятьЗаявку(Заявка, ВремЗаявки, ВремЗаказыЗаявки, ВремРезервы) 
//	                                                                        
//	// Установим фильтр для выгрузки в таблицу
//	ВремЗаявки.			УстановитьЗначениеФильтра("ДоговорПокупателя", Заявка.Договор, 1);
//	ВремЗаявки.			УстановитьЗначениеФильтра("ЗаявкаПокупателя" , Заявка        , 1);
//	ВремЗаказыЗаявки.	УстановитьЗначениеФильтра("ЗаявкаПокупателя" , Заявка        , 1);
//	ВремРезервы.		УстановитьЗначениеФильтра("ЗаявкаПокупателя" , Заявка        , 1);
//	
//	ТабИтогов = СоздатьОбъект("ТаблицаЗначений");
//	ВремЗаявки.ВыгрузитьИтоги(ТабИтогов, 1, 1);  
//	ВремЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя", , 0);
//
//	ТабИтогов.ВыбратьСтроки();
//	Пока ТабИтогов.ПолучитьСтроку() = 1  Цикл
//	    Регистр.Заявки.Фирма = ТабИтогов.Фирма;
//		Регистр.Заявки.Номенклатура    	= ТабИтогов.Номенклатура;
//		Регистр.Заявки.ДоговорПокупателя= ТабИтогов.ДоговорПокупателя;
//		Регистр.Заявки.ЗаявкаПокупателя = ТабИтогов.ЗаявкаПокупателя;
//		Регистр.Заявки.КоличествоРасход = ТабИтогов.КоличествоРасход;
//		Регистр.Заявки.СтоимостьРасход  = ТабИтогов.СтоимостьРасход;
//		Регистр.Заявки.ДвижениеРасходВыполнить();
//	КонецЦикла;    
//	
//	ВремЗаказыЗаявки.ВыгрузитьИтоги(ТабИтогов,1, 1);
//	ВремЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",, 0);    
//	ТабИтогов.ВыбратьСтроки();
//	Пока ТабИтогов.ПолучитьСтроку() = 1  Цикл
//		Регистр.ЗаказыЗаявки.Номенклатура       = ТабИтогов.Номенклатура;
//		Регистр.ЗаказыЗаявки.ЗаказПоставщику    = ТабИтогов.ЗаказПоставщику;
//		Регистр.ЗаказыЗаявки.ЗаявкаПокупателя   = ТабИтогов.ЗаявкаПокупателя;
//		Регистр.ЗаказыЗаявки.Количество			= ТабИтогов.Количество;
//		Регистр.ЗаказыЗаявки.ДвижениеРасходВыполнить();
//	КонецЦикла;
//	
//	ВремРезервы.ВыгрузитьИтоги(ТабИтогов,1, 1);
//	ВремРезервы.УстановитьЗначениеФильтра("ЗаявкаПокупателя",,0); 
//	ТабИтогов.ВыбратьСтроки();
//	Пока ТабИтогов.ПолучитьСтроку() = 1 Цикл
//		Регистр.РезервыТМЦ.Фирма             = ТабИтогов.Фирма;
//		Регистр.РезервыТМЦ.Номенклатура      = ТабИтогов.Номенклатура;
//		Регистр.РезервыТМЦ.Склад             = ТабИтогов.Склад;
//		Регистр.РезервыТМЦ.ДоговорПокупателя = ТабИтогов.ДоговорПокупателя;
//		Регистр.РезервыТМЦ.ЗаявкаПокупателя  = ТабИтогов.ЗаявкаПокупателя;
//		Регистр.РезервыТМЦ.Количество  		 = ТабИтогов.Количество;
//		Регистр.РезервыТМЦ.ДвижениеРасходВыполнить();
//	КонецЦикла;
КонецПроцедуры // СнятьЗаявку()


//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам() 

	Перем ВремРезервы, ВремЗаказыЗаявки, ВремЗаявки;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//	СписокЗаявок = СоздатьОбъект("СписокЗначений");
//	
//	ВыгрузитьТабличнуюЧасть(СписокЗаявок, "Заявка");
//
//	ВремРегистры = СоздатьОбъект("Регистры");
//	ВремЗаявки 			= ВремРегистры.Заявки;
//	ВремЗаказыЗаявки	= ВремРегистры.ЗаказыЗаявки;
//	ВремРезервы			= ВремРегистры.РезервыТМЦ;      
//	
//	ВремЗаявки.			УстановитьЗначениеФильтра("Фирма"           , Фирма       , 1);
//	ВремЗаявки.			УстановитьЗначениеФильтра("ЗаявкаПокупателя", СписокЗаявок, 2);
//	ВремЗаказыЗаявки.	УстановитьЗначениеФильтра("ЗаявкаПокупателя", СписокЗаявок, 2);
//	ВремРезервы.		УстановитьЗначениеФильтра("ЗаявкаПокупателя", СписокЗаявок, 2);
//	
//	Если ИтогиАктуальны() = 0  Тогда
//		ВремЗаявки.			ВременныйРасчет();
//		ВремЗаказыЗаявки.   ВременныйРасчет();
//		ВремРезервы.		ВременныйРасчет();
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;        
//
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку() = 1  Цикл 
//		Если Заявка.Выбран() = 1 тогда
//			Если Заявка.Фирма <> Фирма Тогда
//				Сообщить("В строке " + Строка(НомерСтроки) + " выбрана заявка по фирме, не соответствующей фирме, по котрой оформлен данный документ.");
//				СтатусВозврата(0);
//				Возврат;
//			КонецЕсли;
//	    	СнятьЗаявку(Заявка, ВремЗаявки, ВремЗаказыЗаявки, ВремРезервы);
//		Иначе
//			Сообщить("В строке " + Строка(НомерСтроки) + " не выбрана заявка."); 
//		КонецЕсли;
//	КонецЦикла; 
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
Процедура ОбработкаПроведения(Отказ, Режим)
//	Если  глВсеРеквизитыДокументаЗаполнены(Контекст, "Фирма") = 0 Тогда
//	    СтатусВозврата(0);
//		Возврат;
//	КонецЕсли;
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры // ОбработкаПроведения()
