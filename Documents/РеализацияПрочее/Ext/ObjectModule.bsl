////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// КонтрольДатыОплаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  В случае, если дата оплаты корректна возвращается пустая строка, 
//  в противном случае - соответствующий текст предупреждения.
//
// Описание:
//  Проверяет соответствует ли дата оплаты документа глубине кредита, заданного
//  для данного договора. Вызывается из модулей документов реализации.
//
Функция КонтрольДатыОплаты() 
//	Если ДатаОплаты < ДатаДок Тогда
//	    Возврат "Дата оплаты меньше даты документа!";
//	КонецЕсли;
//	Если ДатаОплаты > глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита) Тогда
//	    Возврат "Дата оплаты превышает глубину кредита!";
//	Иначе
//		Возврат "";
Возврат "";//	КонецЕсли;	
КонецФункции // глКонтрольДатыОплаты()

//******************************************************************************
// КонтрольКредитаПройден(ВремПокупатели)
//
// Параметры:
//  ВремПокупатели- регистр "Покупатели", рассчитанный при необходимости
//
// Возвращаемое значение:
//  1 - контроль пройден (можно проводить), 0 - не пройден (не проводить!).
//
// Описание:
//  Проводит контроль величины кредита.
//
Функция КонтрольКредитаПройден(ВремПокупатели)
//	
//	
//	РазрешитьПревышениеКредита = глПолучитьПолномочие("РазрешитьПревышениеКредита");
//	
//	// Проверим дату оплаты
//	КонтрольДатыОплаты = КонтрольДатыОплаты();
//	Если ПустоеЗначение(КонтрольДатыОплаты) = 0 Тогда 
//	    Если РазрешитьПревышениеКредита <> 0  Тогда
//			глСообщениеПроведения(КонтрольДатыОплаты+ РазделительСтрок+
//			"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент(),,,1);
//		Иначе                   
//			глНеПроводить(Контекст,КонтрольДатыОплаты);
//			Возврат 0;
//		КонецЕсли;
//	КонецЕсли;			
//	
//	Если Договор.НеКонтролироватьКредит = 1 Тогда
//		Возврат 1;
//	КонецЕсли;
//	
//	ТекущийДолг = ВремПокупатели.СводныйОстаток(Фирма,Договор,,,,"СуммаВал");
//	
//	Если (ТекущийДолг + СуммаВзаиморасчетов) > (Договор.СуммаКредита) Тогда
//		                                                      
//		ВалютаКредита = Договор.ВалютаВзаиморасчетов;
//		
//		СтрокаСообщ = "Сумма накладной вместе с текущим долгом превышает сумму максимального кредита клиенту!
//					  |   Текущий долг:   "+глФРМ(ТекущийДолг,ВалютаКредита)+"
//					  |   Остаток кредита:"+глФРМ(Договор.СуммаКредита - ТекущийДолг,ВалютаКредита)+"
//					  |   Сумма накладной:"+ глФРМ(СуммаВзаиморасчетов,ВалютаКредита)+"!";
//		
//	    Если РазрешитьПревышениеКредита <> 0  Тогда
//			глСообщениеПроведения(СтрокаСообщ+ РазделительСтрок+
//			"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент(),,,1);
//			Возврат 1;
//		Иначе                   
//			глНеПроводить(Контекст,СтрокаСообщ);
//			Возврат 0;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат 1;
Возврат "";//	
КонецФункции // КонтрольКредитаПройден()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ВремРегистры;
	Перем ВремПокупатели;   
	Перем ТаблицаДокумента;
//	
//	// Удаление движений по регистрам.
//	Для Номер = 1 По Метаданные.Регистр() Цикл
//		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
//	КонецЦикла;
//   	
//	ТаблицаДокумента=глПодготовитьТаблицуДокумента(Контекст);
//	
//	СписокПараметров=СоздатьОбъект("СписокЗначений");
//	
//	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
//	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
//	СписокПараметров.ДобавитьЗначение(1,			"ЗнакДвижения"); // увеличился долг клиента
//	                              
//	СписокПараметров.ДобавитьЗначение(глКО.Продажа	,"КодОперации");
//	
//	ВремРегистры = СоздатьОбъект("Регистры");
//	
//	ВремПокупатели = ВремРегистры.Покупатели;
//	глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремПокупатели);
//	
//	Если ИтогиАктуальны() = 0 Тогда
//		ВремРегистры.Актуальность(1);
//		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
//	КонецЕсли;      
//	               
//	// контроль величины кредита клиенту (с учетом права пользователя превышать его)
//	Если КонтрольКредитаПройден(ВремПокупатели) = 0 Тогда
//		Возврат;
//	КонецЕсли;
//
//	ТаблицаДокумента.НоваяКолонка("КредДокумент");
//	ТаблицаДокумента.НоваяКолонка("ВидДолга");    
//	ТаблицаДокумента.НоваяКолонка("Себестоимость");
//	ТаблицаДокумента.НоваяКолонка("ДоговорКомитента");
//	ТаблицаДокумента.НоваяКолонка("ОблагаетсяНП");
//	ТаблицаДокумента.НоваяКолонка("СуммаПрод");
//	
//	ТаблицаДокумента.ВыбратьСтроки();
//	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
//		
//		ТаблицаДокумента.КредДокумент 	= ТекущийДокумент();
//		ТаблицаДокумента.ВидДолга		= глВД.Прочее;
//		ТаблицаДокумента.ОблагаетсяНП 	= УчитыватьНП;
//	КонецЦикла;                                                                       
//	
//	глДвижениеДолгов(Контекст, Договор,ТаблицаДокумента,СписокПараметров,ВремПокупатели,1);
//	                                  
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	// Проверка заполненности обязательных реквизитов.
//   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
//		"Фирма,Валюта,Контрагент,Договор")=0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// Проведение по регистрам оперативного учета.	
//	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
//		ПроведениеПоРегистрам();
//		
//		Если СтатусВозврата() = 0 Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	глПриПроведении(Контекст, ВидыДвижений);
//	
КонецПроцедуры //ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, Режим)
	Сумма_Итог = ТабличнаяЧасть1.Итог("Сумма");
	СуммаНДС_Итог = ТабличнаяЧасть1.Итог("СуммаНДС");
	СуммаНП_Итог = ТабличнаяЧасть1.Итог("СуммаНП");
КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
